// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestCustomOptionsRoot {
    private var UnittestCustomOptionsRoot_fileOpt1:ConcreteExtensionField<Int64,PBFileOptions>
    private var UnittestCustomOptionsRoot_messageOpt1:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_fieldOpt1:ConcreteExtensionField<Int64,PBFieldOptions>
    private var UnittestCustomOptionsRoot_fieldOpt2:ConcreteExtensionField<Int32,PBFieldOptions>
    private var UnittestCustomOptionsRoot_enumOpt1:ConcreteExtensionField<Int32,PBEnumOptions>
    private var UnittestCustomOptionsRoot_enumValueOpt1:ConcreteExtensionField<Int32,PBEnumValueOptions>
    private var UnittestCustomOptionsRoot_serviceOpt1:ConcreteExtensionField<Int64,PBServiceOptions>
    private var UnittestCustomOptionsRoot_methodOpt1:ConcreteExtensionField<Int32,PBMethodOptions>
    private var UnittestCustomOptionsRoot_boolOpt:ConcreteExtensionField<Bool,PBMessageOptions>
    private var UnittestCustomOptionsRoot_int32Opt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_int64Opt:ConcreteExtensionField<Int64,PBMessageOptions>
    private var UnittestCustomOptionsRoot_uint32Opt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_uint64Opt:ConcreteExtensionField<Int64,PBMessageOptions>
    private var UnittestCustomOptionsRoot_sint32Opt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_sint64Opt:ConcreteExtensionField<Int64,PBMessageOptions>
    private var UnittestCustomOptionsRoot_fixed32Opt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_fixed64Opt:ConcreteExtensionField<Int64,PBMessageOptions>
    private var UnittestCustomOptionsRoot_sfixed32Opt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_sfixed64Opt:ConcreteExtensionField<Int64,PBMessageOptions>
    private var UnittestCustomOptionsRoot_floatOpt:ConcreteExtensionField<Float,PBMessageOptions>
    private var UnittestCustomOptionsRoot_doubleOpt:ConcreteExtensionField<Double,PBMessageOptions>
    private var UnittestCustomOptionsRoot_stringOpt:ConcreteExtensionField<String,PBMessageOptions>
    private var UnittestCustomOptionsRoot_bytesOpt:ConcreteExtensionField<[Byte],PBMessageOptions>
    private var UnittestCustomOptionsRoot_enumOpt:ConcreteExtensionField<Int32,PBMessageOptions>
    private var UnittestCustomOptionsRoot_messageTypeOpt:ConcreteExtensionField<DummyMessageInvalidAsOptionType,PBMessageOptions>
    private var UnittestCustomOptionsRoot_quux:ConcreteExtensionField<Int32,ComplexOptionType1>
    private var UnittestCustomOptionsRoot_corge:ConcreteExtensionField<ComplexOptionType3,ComplexOptionType1>
    private var UnittestCustomOptionsRoot_grault:ConcreteExtensionField<Int32,ComplexOptionType2>
    private var UnittestCustomOptionsRoot_garply:ConcreteExtensionField<ComplexOptionType1,ComplexOptionType2>
    private var UnittestCustomOptionsRoot_complexOpt1:ConcreteExtensionField<ComplexOptionType1,PBMessageOptions>
    private var UnittestCustomOptionsRoot_complexOpt2:ConcreteExtensionField<ComplexOptionType2,PBMessageOptions>
    private var UnittestCustomOptionsRoot_complexOpt3:ConcreteExtensionField<ComplexOptionType3,PBMessageOptions>
    private var UnittestCustomOptionsRoot_complexOpt6:ConcreteExtensionField<ComplexOpt6,PBMessageOptions>
    private var UnittestCustomOptionsRoot_fileopt:ConcreteExtensionField<Aggregate,PBFileOptions>
    private var UnittestCustomOptionsRoot_msgopt:ConcreteExtensionField<Aggregate,PBMessageOptions>
    private var UnittestCustomOptionsRoot_fieldopt:ConcreteExtensionField<Aggregate,PBFieldOptions>
    private var UnittestCustomOptionsRoot_enumopt:ConcreteExtensionField<Aggregate,PBEnumOptions>
    private var UnittestCustomOptionsRoot_enumvalopt:ConcreteExtensionField<Aggregate,PBEnumValueOptions>
    private var UnittestCustomOptionsRoot_serviceopt:ConcreteExtensionField<Aggregate,PBServiceOptions>
    private var UnittestCustomOptionsRoot_methodopt:ConcreteExtensionField<Aggregate,PBMethodOptions>
    private var ComplexOptionType2ComplexOptionType4_complexOpt4:ConcreteExtensionField<ComplexOptionType2ComplexOptionType4,PBMessageOptions>
    private var AggregateMessageSetElement_messageSetExtension:ConcreteExtensionField<AggregateMessageSetElement,AggregateMessageSet>
    private var Aggregate_nested:ConcreteExtensionField<Aggregate,PBFileOptions>
    private var NestedOptionType_nestedExtension:ConcreteExtensionField<Int32,PBFileOptions>
    var extensionRegistry:ExtensionRegistry

    init() {
        UnittestCustomOptionsRoot_fileOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:7736974, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_messageOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7739036, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fieldOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:7740936, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fieldOpt2 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7753913, defaultValue:42, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_enumOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:7753576, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_enumValueOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:1560678, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_serviceOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:7887650, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_methodOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:7890860, defaultValue:MethodOpt1Methodopt1Val1, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_boolOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:7706090, defaultValue:false, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_int32Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7705709, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_int64Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:7705542, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_uint32Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:7704880, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_uint64Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:7702367, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_sint32Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:7701568, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_sint64Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:7700863, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fixed32Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:7700307, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fixed64Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:7700194, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_sfixed32Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:7698645, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_sfixed64Opt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:7685475, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_floatOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:7675390, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_doubleOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:7673293, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_stringOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:7673285, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_bytesOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:7673238, defaultValue:[Byte](), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_enumOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:7673233, defaultValue:DummyMessageContainingEnumTestEnumTypeTestOptionEnumType1, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_messageTypeOpt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7665967, defaultValue:DummyMessageInvalidAsOptionType(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_quux = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7663707, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_corge = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7663442, defaultValue:ComplexOptionType3(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_grault = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7650927, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_garply = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7649992, defaultValue:ComplexOptionType1(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_complexOpt1 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7646756, defaultValue:ComplexOptionType1(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_complexOpt2 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7636949, defaultValue:ComplexOptionType2(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_complexOpt3 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7636463, defaultValue:ComplexOptionType3(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_complexOpt6 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeGroup, fieldNumber:7595468, defaultValue:ComplexOpt6(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fileopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15478479, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_msgopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15480088, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_fieldopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15481374, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_enumopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15483218, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_enumvalopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15486921, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_serviceopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15497145, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestCustomOptionsRoot_methodopt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15512713, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        ComplexOptionType2ComplexOptionType4_complexOpt4 = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:7633546, defaultValue:ComplexOptionType2ComplexOptionType4(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        AggregateMessageSetElement_messageSetExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15447542, defaultValue:AggregateMessageSetElement(), isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
        Aggregate_nested = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:15476903, defaultValue:Aggregate(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        NestedOptionType_nestedExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:7912573, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        PBDescriptorRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(UnittestCustomOptionsRoot_fileOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_messageOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_fieldOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_fieldOpt2)
      registry.addExtension(UnittestCustomOptionsRoot_enumOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_enumValueOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_serviceOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_methodOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_boolOpt)
      registry.addExtension(UnittestCustomOptionsRoot_int32Opt)
      registry.addExtension(UnittestCustomOptionsRoot_int64Opt)
      registry.addExtension(UnittestCustomOptionsRoot_uint32Opt)
      registry.addExtension(UnittestCustomOptionsRoot_uint64Opt)
      registry.addExtension(UnittestCustomOptionsRoot_sint32Opt)
      registry.addExtension(UnittestCustomOptionsRoot_sint64Opt)
      registry.addExtension(UnittestCustomOptionsRoot_fixed32Opt)
      registry.addExtension(UnittestCustomOptionsRoot_fixed64Opt)
      registry.addExtension(UnittestCustomOptionsRoot_sfixed32Opt)
      registry.addExtension(UnittestCustomOptionsRoot_sfixed64Opt)
      registry.addExtension(UnittestCustomOptionsRoot_floatOpt)
      registry.addExtension(UnittestCustomOptionsRoot_doubleOpt)
      registry.addExtension(UnittestCustomOptionsRoot_stringOpt)
      registry.addExtension(UnittestCustomOptionsRoot_bytesOpt)
      registry.addExtension(UnittestCustomOptionsRoot_enumOpt)
      registry.addExtension(UnittestCustomOptionsRoot_messageTypeOpt)
      registry.addExtension(UnittestCustomOptionsRoot_quux)
      registry.addExtension(UnittestCustomOptionsRoot_corge)
      registry.addExtension(UnittestCustomOptionsRoot_grault)
      registry.addExtension(UnittestCustomOptionsRoot_garply)
      registry.addExtension(UnittestCustomOptionsRoot_complexOpt1)
      registry.addExtension(UnittestCustomOptionsRoot_complexOpt2)
      registry.addExtension(UnittestCustomOptionsRoot_complexOpt3)
      registry.addExtension(UnittestCustomOptionsRoot_complexOpt6)
      registry.addExtension(UnittestCustomOptionsRoot_fileopt)
      registry.addExtension(UnittestCustomOptionsRoot_msgopt)
      registry.addExtension(UnittestCustomOptionsRoot_fieldopt)
      registry.addExtension(UnittestCustomOptionsRoot_enumopt)
      registry.addExtension(UnittestCustomOptionsRoot_enumvalopt)
      registry.addExtension(UnittestCustomOptionsRoot_serviceopt)
      registry.addExtension(UnittestCustomOptionsRoot_methodopt)
      registry.addExtension(ComplexOptionType2ComplexOptionType4_complexOpt4)
      registry.addExtension(AggregateMessageSetElement_messageSetExtension)
      registry.addExtension(Aggregate_nested)
      registry.addExtension(NestedOptionType_nestedExtension)
    }
    var fileOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fileOpt1
         }
    }
    var messageOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_messageOpt1
         }
    }
    var fieldOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fieldOpt1
         }
    }
    var fieldOpt2:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fieldOpt2
         }
    }
    var enumOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_enumOpt1
         }
    }
    var enumValueOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_enumValueOpt1
         }
    }
    var serviceOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_serviceOpt1
         }
    }
    var methodOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_methodOpt1
         }
    }
    var boolOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_boolOpt
         }
    }
    var int32Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_int32Opt
         }
    }
    var int64Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_int64Opt
         }
    }
    var uint32Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_uint32Opt
         }
    }
    var uint64Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_uint64Opt
         }
    }
    var sint32Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_sint32Opt
         }
    }
    var sint64Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_sint64Opt
         }
    }
    var fixed32Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fixed32Opt
         }
    }
    var fixed64Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fixed64Opt
         }
    }
    var sfixed32Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_sfixed32Opt
         }
    }
    var sfixed64Opt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_sfixed64Opt
         }
    }
    var floatOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_floatOpt
         }
    }
    var doubleOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_doubleOpt
         }
    }
    var stringOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_stringOpt
         }
    }
    var bytesOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_bytesOpt
         }
    }
    var enumOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_enumOpt
         }
    }
    var messageTypeOpt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_messageTypeOpt
         }
    }
    var quux:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_quux
         }
    }
    var corge:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_corge
         }
    }
    var grault:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_grault
         }
    }
    var garply:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_garply
         }
    }
    var complexOpt1:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_complexOpt1
         }
    }
    var complexOpt2:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_complexOpt2
         }
    }
    var complexOpt3:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_complexOpt3
         }
    }
    var complexOpt6:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_complexOpt6
         }
    }
    var fileopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fileopt
         }
    }
    var msgopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_msgopt
         }
    }
    var fieldopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_fieldopt
         }
    }
    var enumopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_enumopt
         }
    }
    var enumvalopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_enumvalopt
         }
    }
    var serviceopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_serviceopt
         }
    }
    var methodopt:ExtensionField {
         get {
             return UnittestCustomOptionsRoot_methodopt
         }
    }
    }

enum MethodOpt1:Int32 {
  case MethodOpt1Methodopt1Val1 = 1
  case MethodOpt1Methodopt1Val2 = 2

  static func MethodOpt1IsValidValue(value:MethodOpt1) ->Bool {
    switch value {
      case .MethodOpt1Methodopt1Val1, .MethodOpt1Methodopt1Val2:
        return true;
      default:
        return false;
    }
  }
}

enum AggregateEnum:Int32 {
  case AggregateEnumValue = 1

  static func AggregateEnumIsValidValue(value:AggregateEnum) ->Bool {
    switch value {
      case .AggregateEnumValue:
        return true;
      default:
        return false;
    }
  }
}

func == (lhs: TestMessageWithCustomOptions, rhs: TestMessageWithCustomOptions) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestMessageWithCustomOptions : GeneratedMessage {
  private(set) var hasField1:Bool = false
  private(set) var field1:String = ""

  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasField1 {
      output.writeString(1, value:field1)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasField1 {
      size += WireFormat.computeStringSize(1, value:field1)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptionsBuilder()
  }
  class func builderWithPrototype(prototype:TestMessageWithCustomOptions) -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builder().mergeFrom(prototype)
  }
  func builder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builder()
  }
  func toBuilder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasField1 {
      output += "\(indent) field1: \(field1) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasField1 {
           hashCode = (hashCode &* 31) &+ field1.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  enum TestMessageWithCustomOptionsAnEnum:Int32 {
    case TestMessageWithCustomOptionsAnEnumAnenumVal1 = 1
    case TestMessageWithCustomOptionsAnEnumAnenumVal2 = 2

    static func TestMessageWithCustomOptionsAnEnumIsValidValue(value:TestMessageWithCustomOptionsAnEnum) ->Bool {
      switch value {
        case .TestMessageWithCustomOptionsAnEnumAnenumVal1, .TestMessageWithCustomOptionsAnEnumAnenumVal2:
          return true;
        default:
          return false;
      }
    }
  }

  class TestMessageWithCustomOptionsBuilder : GeneratedMessageBuilder {
  private var result:TestMessageWithCustomOptions

  override init () {
     result = TestMessageWithCustomOptions()
  }
  var hasField1:Bool {
       get {
            return result.hasField1
       }
  }
  var field1:String {
       get {
            return result.field1
       }
       set (value) {
           result.hasField1 = true
           result.field1 = value
       }
  }
  func clearField1() -> TestMessageWithCustomOptionsBuilder{
       result.hasField1 = false
       result.field1 = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> TestMessageWithCustomOptionsBuilder {
    result = TestMessageWithCustomOptions()
    return self
  }
  override func clone() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builderWithPrototype(result)
  }
  func build() -> TestMessageWithCustomOptions {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TestMessageWithCustomOptions {
    var returnMe:TestMessageWithCustomOptions = result
    return returnMe
  }
  func mergeFrom(other:TestMessageWithCustomOptions) -> TestMessageWithCustomOptionsBuilder {
    if (other == TestMessageWithCustomOptions()) {
      return self
    }
    if other.hasField1 {
         field1 = other.field1
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageWithCustomOptionsBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptionsBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 10 {
          field1 = input.readString()
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }

  func == (lhs: CustomOptionFooRequest, rhs: CustomOptionFooRequest) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class CustomOptionFooRequest : GeneratedMessage {
    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequest {
      return CustomOptionFooRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> CustomOptionFooRequestBuilder {
      return CustomOptionFooRequestBuilder()
    }
    class func builderWithPrototype(prototype:CustomOptionFooRequest) -> CustomOptionFooRequestBuilder {
      return CustomOptionFooRequest.builder().mergeFrom(prototype)
    }
    func builder() -> CustomOptionFooRequestBuilder {
      return CustomOptionFooRequest.builder()
    }
    func toBuilder() -> CustomOptionFooRequestBuilder {
      return CustomOptionFooRequest.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class CustomOptionFooRequestBuilder : GeneratedMessageBuilder {
    private var result:CustomOptionFooRequest

    override init () {
       result = CustomOptionFooRequest()
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> CustomOptionFooRequestBuilder {
      result = CustomOptionFooRequest()
      return self
    }
    override func clone() -> CustomOptionFooRequestBuilder {
      return CustomOptionFooRequest.builderWithPrototype(result)
    }
    func build() -> CustomOptionFooRequest {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> CustomOptionFooRequest {
      var returnMe:CustomOptionFooRequest = result
      return returnMe
    }
    func mergeFrom(other:CustomOptionFooRequest) -> CustomOptionFooRequestBuilder {
      if (other == CustomOptionFooRequest()) {
        return self
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooRequestBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequestBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    func == (lhs: CustomOptionFooResponse, rhs: CustomOptionFooResponse) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    }
    class CustomOptionFooResponse : GeneratedMessage {
      override init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
          return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponse {
        return CustomOptionFooResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> CustomOptionFooResponseBuilder {
        return CustomOptionFooResponseBuilder()
      }
      class func builderWithPrototype(prototype:CustomOptionFooResponse) -> CustomOptionFooResponseBuilder {
        return CustomOptionFooResponse.builder().mergeFrom(prototype)
      }
      func builder() -> CustomOptionFooResponseBuilder {
        return CustomOptionFooResponse.builder()
      }
      func toBuilder() -> CustomOptionFooResponseBuilder {
        return CustomOptionFooResponse.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
       get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
          }
        }
      }

      class CustomOptionFooResponseBuilder : GeneratedMessageBuilder {
      private var result:CustomOptionFooResponse

      override init () {
         result = CustomOptionFooResponse()
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return result
           }
      }
      override func clear() -> CustomOptionFooResponseBuilder {
        result = CustomOptionFooResponse()
        return self
      }
      override func clone() -> CustomOptionFooResponseBuilder {
        return CustomOptionFooResponse.builderWithPrototype(result)
      }
      func build() -> CustomOptionFooResponse {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> CustomOptionFooResponse {
        var returnMe:CustomOptionFooResponse = result
        return returnMe
      }
      func mergeFrom(other:CustomOptionFooResponse) -> CustomOptionFooResponseBuilder {
        if (other == CustomOptionFooResponse()) {
          return self
        }
          mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooResponseBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponseBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag:Int32 = input.readTag()
            if tag == 0 {
                 self.unknownFields = unknownFieldsBuilder.build()
                 return self}
            else {
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                      unknownFields = unknownFieldsBuilder.build()
                      return self
                  }
            }
            }
         }
      }

      func == (lhs: CustomOptionFooClientMessage, rhs: CustomOptionFooClientMessage) -> Bool {
            if (lhs === rhs) {
              return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      }
      class CustomOptionFooClientMessage : GeneratedMessage {
        override init() {
             super.init()
        }
        override func isInitialized() -> Bool {
          return true
        }
        override func writeToCodedOutputStream(output:CodedOutputStream) {
          unknownFields.writeToCodedOutputStream(output)
        }
        override func serializedSize() -> Int32 {
          var size:Int32 = memoizedSerializedSize
          if size != -1 {
            return size
          }

          size = 0
          size += unknownFields.serializedSize()
          memoizedSerializedSize = size
          return size
        }
        class func parseFromData(data:[Byte]) -> CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromData(data).build()
        }
        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromInputStream(input).build()
        }
        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromCodedInputStream(input).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessage {
          return CustomOptionFooClientMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func builder() -> CustomOptionFooClientMessageBuilder {
          return CustomOptionFooClientMessageBuilder()
        }
        class func builderWithPrototype(prototype:CustomOptionFooClientMessage) -> CustomOptionFooClientMessageBuilder {
          return CustomOptionFooClientMessage.builder().mergeFrom(prototype)
        }
        func builder() -> CustomOptionFooClientMessageBuilder {
          return CustomOptionFooClientMessage.builder()
        }
        func toBuilder() -> CustomOptionFooClientMessageBuilder {
          return CustomOptionFooClientMessage.builderWithPrototype(self)
        }
        override func writeDescriptionTo(inout output:String, indent:String) {
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override var hashValue:Int {
         get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
            }
          }
        }

        class CustomOptionFooClientMessageBuilder : GeneratedMessageBuilder {
        private var result:CustomOptionFooClientMessage

        override init () {
           result = CustomOptionFooClientMessage()
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> CustomOptionFooClientMessageBuilder {
          result = CustomOptionFooClientMessage()
          return self
        }
        override func clone() -> CustomOptionFooClientMessageBuilder {
          return CustomOptionFooClientMessage.builderWithPrototype(result)
        }
        func build() -> CustomOptionFooClientMessage {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> CustomOptionFooClientMessage {
          var returnMe:CustomOptionFooClientMessage = result
          return returnMe
        }
        func mergeFrom(other:CustomOptionFooClientMessage) -> CustomOptionFooClientMessageBuilder {
          if (other == CustomOptionFooClientMessage()) {
            return self
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooClientMessageBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessageBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        func == (lhs: CustomOptionFooServerMessage, rhs: CustomOptionFooServerMessage) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        }
        class CustomOptionFooServerMessage : GeneratedMessage {
          override init() {
               super.init()
          }
          override func isInitialized() -> Bool {
            return true
          }
          override func writeToCodedOutputStream(output:CodedOutputStream) {
            unknownFields.writeToCodedOutputStream(output)
          }
          override func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
              return size
            }

            size = 0
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          class func parseFromData(data:[Byte]) -> CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromData(data).build()
          }
          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromInputStream(input).build()
          }
          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromCodedInputStream(input).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessage {
            return CustomOptionFooServerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func builder() -> CustomOptionFooServerMessageBuilder {
            return CustomOptionFooServerMessageBuilder()
          }
          class func builderWithPrototype(prototype:CustomOptionFooServerMessage) -> CustomOptionFooServerMessageBuilder {
            return CustomOptionFooServerMessage.builder().mergeFrom(prototype)
          }
          func builder() -> CustomOptionFooServerMessageBuilder {
            return CustomOptionFooServerMessage.builder()
          }
          func toBuilder() -> CustomOptionFooServerMessageBuilder {
            return CustomOptionFooServerMessage.builderWithPrototype(self)
          }
          override func writeDescriptionTo(inout output:String, indent:String) {
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override var hashValue:Int {
           get {
                var hashCode:Int = 7
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
              }
            }
          }

          class CustomOptionFooServerMessageBuilder : GeneratedMessageBuilder {
          private var result:CustomOptionFooServerMessage

          override init () {
             result = CustomOptionFooServerMessage()
          }
          override var internalGetResult:GeneratedMessage {
               get {
                  return result
               }
          }
          override func clear() -> CustomOptionFooServerMessageBuilder {
            result = CustomOptionFooServerMessage()
            return self
          }
          override func clone() -> CustomOptionFooServerMessageBuilder {
            return CustomOptionFooServerMessage.builderWithPrototype(result)
          }
          func build() -> CustomOptionFooServerMessage {
               checkInitialized()
               return buildPartial()
          }
          func buildPartial() -> CustomOptionFooServerMessage {
            var returnMe:CustomOptionFooServerMessage = result
            return returnMe
          }
          func mergeFrom(other:CustomOptionFooServerMessage) -> CustomOptionFooServerMessageBuilder {
            if (other == CustomOptionFooServerMessage()) {
              return self
            }
              mergeUnknownFields(other.unknownFields)
            return self
          }
          override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooServerMessageBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessageBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag:Int32 = input.readTag()
                if tag == 0 {
                     self.unknownFields = unknownFieldsBuilder.build()
                     return self}
                else {
                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                          unknownFields = unknownFieldsBuilder.build()
                          return self
                      }
                }
                }
             }
          }

          func == (lhs: DummyMessageContainingEnum, rhs: DummyMessageContainingEnum) -> Bool {
                if (lhs === rhs) {
                  return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          }
          class DummyMessageContainingEnum : GeneratedMessage {
            override init() {
                 super.init()
            }
            override func isInitialized() -> Bool {
              return true
            }
            override func writeToCodedOutputStream(output:CodedOutputStream) {
              unknownFields.writeToCodedOutputStream(output)
            }
            override func serializedSize() -> Int32 {
              var size:Int32 = memoizedSerializedSize
              if size != -1 {
                return size
              }

              size = 0
              size += unknownFields.serializedSize()
              memoizedSerializedSize = size
              return size
            }
            class func parseFromData(data:[Byte]) -> DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromData(data).build()
            }
            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromInputStream(input:NSInputStream) -> DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromInputStream(input).build()
            }
            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream) -> DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromCodedInputStream(input).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnum {
              return DummyMessageContainingEnum.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func builder() -> DummyMessageContainingEnumBuilder {
              return DummyMessageContainingEnumBuilder()
            }
            class func builderWithPrototype(prototype:DummyMessageContainingEnum) -> DummyMessageContainingEnumBuilder {
              return DummyMessageContainingEnum.builder().mergeFrom(prototype)
            }
            func builder() -> DummyMessageContainingEnumBuilder {
              return DummyMessageContainingEnum.builder()
            }
            func toBuilder() -> DummyMessageContainingEnumBuilder {
              return DummyMessageContainingEnum.builderWithPrototype(self)
            }
            override func writeDescriptionTo(inout output:String, indent:String) {
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override var hashValue:Int {
             get {
                  var hashCode:Int = 7
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
                }
              }
            }

            enum DummyMessageContainingEnumTestEnumType:Int32 {
              case DummyMessageContainingEnumTestEnumTypeTestOptionEnumType1 = 22
              case DummyMessageContainingEnumTestEnumTypeTestOptionEnumType2 = -23

              static func DummyMessageContainingEnumTestEnumTypeIsValidValue(value:DummyMessageContainingEnumTestEnumType) ->Bool {
                switch value {
                  case .DummyMessageContainingEnumTestEnumTypeTestOptionEnumType1, .DummyMessageContainingEnumTestEnumTypeTestOptionEnumType2:
                    return true;
                  default:
                    return false;
                }
              }
            }

            class DummyMessageContainingEnumBuilder : GeneratedMessageBuilder {
            private var result:DummyMessageContainingEnum

            override init () {
               result = DummyMessageContainingEnum()
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> DummyMessageContainingEnumBuilder {
              result = DummyMessageContainingEnum()
              return self
            }
            override func clone() -> DummyMessageContainingEnumBuilder {
              return DummyMessageContainingEnum.builderWithPrototype(result)
            }
            func build() -> DummyMessageContainingEnum {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> DummyMessageContainingEnum {
              var returnMe:DummyMessageContainingEnum = result
              return returnMe
            }
            func mergeFrom(other:DummyMessageContainingEnum) -> DummyMessageContainingEnumBuilder {
              if (other == DummyMessageContainingEnum()) {
                return self
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->DummyMessageContainingEnumBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnumBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }

            func == (lhs: DummyMessageInvalidAsOptionType, rhs: DummyMessageInvalidAsOptionType) -> Bool {
                  if (lhs === rhs) {
                    return true
                  }
                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            }
            class DummyMessageInvalidAsOptionType : GeneratedMessage {
              override init() {
                   super.init()
              }
              override func isInitialized() -> Bool {
                return true
              }
              override func writeToCodedOutputStream(output:CodedOutputStream) {
                unknownFields.writeToCodedOutputStream(output)
              }
              override func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                  return size
                }

                size = 0
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              class func parseFromData(data:[Byte]) -> DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromData(data).build()
              }
              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromInputStream(input:NSInputStream) -> DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromInputStream(input).build()
              }
              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream) -> DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromCodedInputStream(input).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionType {
                return DummyMessageInvalidAsOptionType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func builder() -> DummyMessageInvalidAsOptionTypeBuilder {
                return DummyMessageInvalidAsOptionTypeBuilder()
              }
              class func builderWithPrototype(prototype:DummyMessageInvalidAsOptionType) -> DummyMessageInvalidAsOptionTypeBuilder {
                return DummyMessageInvalidAsOptionType.builder().mergeFrom(prototype)
              }
              func builder() -> DummyMessageInvalidAsOptionTypeBuilder {
                return DummyMessageInvalidAsOptionType.builder()
              }
              func toBuilder() -> DummyMessageInvalidAsOptionTypeBuilder {
                return DummyMessageInvalidAsOptionType.builderWithPrototype(self)
              }
              override func writeDescriptionTo(inout output:String, indent:String) {
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override var hashValue:Int {
               get {
                    var hashCode:Int = 7
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                  }
                }
              }

              class DummyMessageInvalidAsOptionTypeBuilder : GeneratedMessageBuilder {
              private var result:DummyMessageInvalidAsOptionType

              override init () {
                 result = DummyMessageInvalidAsOptionType()
              }
              override var internalGetResult:GeneratedMessage {
                   get {
                      return result
                   }
              }
              override func clear() -> DummyMessageInvalidAsOptionTypeBuilder {
                result = DummyMessageInvalidAsOptionType()
                return self
              }
              override func clone() -> DummyMessageInvalidAsOptionTypeBuilder {
                return DummyMessageInvalidAsOptionType.builderWithPrototype(result)
              }
              func build() -> DummyMessageInvalidAsOptionType {
                   checkInitialized()
                   return buildPartial()
              }
              func buildPartial() -> DummyMessageInvalidAsOptionType {
                var returnMe:DummyMessageInvalidAsOptionType = result
                return returnMe
              }
              func mergeFrom(other:DummyMessageInvalidAsOptionType) -> DummyMessageInvalidAsOptionTypeBuilder {
                if (other == DummyMessageInvalidAsOptionType()) {
                  return self
                }
                  mergeUnknownFields(other.unknownFields)
                return self
              }
              override func mergeFromCodedInputStream(input:CodedInputStream) ->DummyMessageInvalidAsOptionTypeBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionTypeBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag:Int32 = input.readTag()
                    if tag == 0 {
                         self.unknownFields = unknownFieldsBuilder.build()
                         return self}
                    else {
                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                              unknownFields = unknownFieldsBuilder.build()
                              return self
                          }
                    }
                    }
                 }
              }

              func == (lhs: CustomOptionMinIntegerValues, rhs: CustomOptionMinIntegerValues) -> Bool {
                    if (lhs === rhs) {
                      return true
                    }
                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                    return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
              }
              class CustomOptionMinIntegerValues : GeneratedMessage {
                override init() {
                     super.init()
                }
                override func isInitialized() -> Bool {
                  return true
                }
                override func writeToCodedOutputStream(output:CodedOutputStream) {
                  unknownFields.writeToCodedOutputStream(output)
                }
                override func serializedSize() -> Int32 {
                  var size:Int32 = memoizedSerializedSize
                  if size != -1 {
                    return size
                  }

                  size = 0
                  size += unknownFields.serializedSize()
                  memoizedSerializedSize = size
                  return size
                }
                class func parseFromData(data:[Byte]) -> CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromData(data).build()
                }
                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromInputStream(input:NSInputStream) -> CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromInputStream(input).build()
                }
                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromCodedInputStream(input).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValues {
                  return CustomOptionMinIntegerValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func builder() -> CustomOptionMinIntegerValuesBuilder {
                  return CustomOptionMinIntegerValuesBuilder()
                }
                class func builderWithPrototype(prototype:CustomOptionMinIntegerValues) -> CustomOptionMinIntegerValuesBuilder {
                  return CustomOptionMinIntegerValues.builder().mergeFrom(prototype)
                }
                func builder() -> CustomOptionMinIntegerValuesBuilder {
                  return CustomOptionMinIntegerValues.builder()
                }
                func toBuilder() -> CustomOptionMinIntegerValuesBuilder {
                  return CustomOptionMinIntegerValues.builderWithPrototype(self)
                }
                override func writeDescriptionTo(inout output:String, indent:String) {
                  unknownFields.writeDescriptionTo(&output, indent:indent)
                }
                override var hashValue:Int {
                 get {
                      var hashCode:Int = 7
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                    }
                  }
                }

                class CustomOptionMinIntegerValuesBuilder : GeneratedMessageBuilder {
                private var result:CustomOptionMinIntegerValues

                override init () {
                   result = CustomOptionMinIntegerValues()
                }
                override var internalGetResult:GeneratedMessage {
                     get {
                        return result
                     }
                }
                override func clear() -> CustomOptionMinIntegerValuesBuilder {
                  result = CustomOptionMinIntegerValues()
                  return self
                }
                override func clone() -> CustomOptionMinIntegerValuesBuilder {
                  return CustomOptionMinIntegerValues.builderWithPrototype(result)
                }
                func build() -> CustomOptionMinIntegerValues {
                     checkInitialized()
                     return buildPartial()
                }
                func buildPartial() -> CustomOptionMinIntegerValues {
                  var returnMe:CustomOptionMinIntegerValues = result
                  return returnMe
                }
                func mergeFrom(other:CustomOptionMinIntegerValues) -> CustomOptionMinIntegerValuesBuilder {
                  if (other == CustomOptionMinIntegerValues()) {
                    return self
                  }
                    mergeUnknownFields(other.unknownFields)
                  return self
                }
                override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionMinIntegerValuesBuilder {
                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                }
                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValuesBuilder {
                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                  while (true) {
                    var tag:Int32 = input.readTag()
                      if tag == 0 {
                           self.unknownFields = unknownFieldsBuilder.build()
                           return self}
                      else {
                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                unknownFields = unknownFieldsBuilder.build()
                                return self
                            }
                      }
                      }
                   }
                }

                func == (lhs: CustomOptionMaxIntegerValues, rhs: CustomOptionMaxIntegerValues) -> Bool {
                      if (lhs === rhs) {
                        return true
                      }
                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                      return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                }
                class CustomOptionMaxIntegerValues : GeneratedMessage {
                  override init() {
                       super.init()
                  }
                  override func isInitialized() -> Bool {
                    return true
                  }
                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                    unknownFields.writeToCodedOutputStream(output)
                  }
                  override func serializedSize() -> Int32 {
                    var size:Int32 = memoizedSerializedSize
                    if size != -1 {
                      return size
                    }

                    size = 0
                    size += unknownFields.serializedSize()
                    memoizedSerializedSize = size
                    return size
                  }
                  class func parseFromData(data:[Byte]) -> CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromData(data).build()
                  }
                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromInputStream(input:NSInputStream) -> CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromInputStream(input).build()
                  }
                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromCodedInputStream(input).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValues {
                    return CustomOptionMaxIntegerValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func builder() -> CustomOptionMaxIntegerValuesBuilder {
                    return CustomOptionMaxIntegerValuesBuilder()
                  }
                  class func builderWithPrototype(prototype:CustomOptionMaxIntegerValues) -> CustomOptionMaxIntegerValuesBuilder {
                    return CustomOptionMaxIntegerValues.builder().mergeFrom(prototype)
                  }
                  func builder() -> CustomOptionMaxIntegerValuesBuilder {
                    return CustomOptionMaxIntegerValues.builder()
                  }
                  func toBuilder() -> CustomOptionMaxIntegerValuesBuilder {
                    return CustomOptionMaxIntegerValues.builderWithPrototype(self)
                  }
                  override func writeDescriptionTo(inout output:String, indent:String) {
                    unknownFields.writeDescriptionTo(&output, indent:indent)
                  }
                  override var hashValue:Int {
                   get {
                        var hashCode:Int = 7
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                      }
                    }
                  }

                  class CustomOptionMaxIntegerValuesBuilder : GeneratedMessageBuilder {
                  private var result:CustomOptionMaxIntegerValues

                  override init () {
                     result = CustomOptionMaxIntegerValues()
                  }
                  override var internalGetResult:GeneratedMessage {
                       get {
                          return result
                       }
                  }
                  override func clear() -> CustomOptionMaxIntegerValuesBuilder {
                    result = CustomOptionMaxIntegerValues()
                    return self
                  }
                  override func clone() -> CustomOptionMaxIntegerValuesBuilder {
                    return CustomOptionMaxIntegerValues.builderWithPrototype(result)
                  }
                  func build() -> CustomOptionMaxIntegerValues {
                       checkInitialized()
                       return buildPartial()
                  }
                  func buildPartial() -> CustomOptionMaxIntegerValues {
                    var returnMe:CustomOptionMaxIntegerValues = result
                    return returnMe
                  }
                  func mergeFrom(other:CustomOptionMaxIntegerValues) -> CustomOptionMaxIntegerValuesBuilder {
                    if (other == CustomOptionMaxIntegerValues()) {
                      return self
                    }
                      mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionMaxIntegerValuesBuilder {
                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValuesBuilder {
                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      var tag:Int32 = input.readTag()
                        if tag == 0 {
                             self.unknownFields = unknownFieldsBuilder.build()
                             return self}
                        else {
                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                  unknownFields = unknownFieldsBuilder.build()
                                  return self
                              }
                        }
                        }
                     }
                  }

                  func == (lhs: CustomOptionOtherValues, rhs: CustomOptionOtherValues) -> Bool {
                        if (lhs === rhs) {
                          return true
                        }
                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                        return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                  }
                  class CustomOptionOtherValues : GeneratedMessage {
                    override init() {
                         super.init()
                    }
                    override func isInitialized() -> Bool {
                      return true
                    }
                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                      unknownFields.writeToCodedOutputStream(output)
                    }
                    override func serializedSize() -> Int32 {
                      var size:Int32 = memoizedSerializedSize
                      if size != -1 {
                        return size
                      }

                      size = 0
                      size += unknownFields.serializedSize()
                      memoizedSerializedSize = size
                      return size
                    }
                    class func parseFromData(data:[Byte]) -> CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromData(data).build()
                    }
                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromInputStream(input:NSInputStream) -> CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromInputStream(input).build()
                    }
                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromCodedInputStream(input).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValues {
                      return CustomOptionOtherValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func builder() -> CustomOptionOtherValuesBuilder {
                      return CustomOptionOtherValuesBuilder()
                    }
                    class func builderWithPrototype(prototype:CustomOptionOtherValues) -> CustomOptionOtherValuesBuilder {
                      return CustomOptionOtherValues.builder().mergeFrom(prototype)
                    }
                    func builder() -> CustomOptionOtherValuesBuilder {
                      return CustomOptionOtherValues.builder()
                    }
                    func toBuilder() -> CustomOptionOtherValuesBuilder {
                      return CustomOptionOtherValues.builderWithPrototype(self)
                    }
                    override func writeDescriptionTo(inout output:String, indent:String) {
                      unknownFields.writeDescriptionTo(&output, indent:indent)
                    }
                    override var hashValue:Int {
                     get {
                          var hashCode:Int = 7
                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                          return hashCode
                        }
                      }
                    }

                    class CustomOptionOtherValuesBuilder : GeneratedMessageBuilder {
                    private var result:CustomOptionOtherValues

                    override init () {
                       result = CustomOptionOtherValues()
                    }
                    override var internalGetResult:GeneratedMessage {
                         get {
                            return result
                         }
                    }
                    override func clear() -> CustomOptionOtherValuesBuilder {
                      result = CustomOptionOtherValues()
                      return self
                    }
                    override func clone() -> CustomOptionOtherValuesBuilder {
                      return CustomOptionOtherValues.builderWithPrototype(result)
                    }
                    func build() -> CustomOptionOtherValues {
                         checkInitialized()
                         return buildPartial()
                    }
                    func buildPartial() -> CustomOptionOtherValues {
                      var returnMe:CustomOptionOtherValues = result
                      return returnMe
                    }
                    func mergeFrom(other:CustomOptionOtherValues) -> CustomOptionOtherValuesBuilder {
                      if (other == CustomOptionOtherValues()) {
                        return self
                      }
                        mergeUnknownFields(other.unknownFields)
                      return self
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionOtherValuesBuilder {
                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValuesBuilder {
                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                      while (true) {
                        var tag:Int32 = input.readTag()
                          if tag == 0 {
                               self.unknownFields = unknownFieldsBuilder.build()
                               return self}
                          else {
                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                    unknownFields = unknownFieldsBuilder.build()
                                    return self
                                }
                          }
                          }
                       }
                    }

                    func == (lhs: SettingRealsFromPositiveInts, rhs: SettingRealsFromPositiveInts) -> Bool {
                          if (lhs === rhs) {
                            return true
                          }
                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                          return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                    }
                    class SettingRealsFromPositiveInts : GeneratedMessage {
                      override init() {
                           super.init()
                      }
                      override func isInitialized() -> Bool {
                        return true
                      }
                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                        unknownFields.writeToCodedOutputStream(output)
                      }
                      override func serializedSize() -> Int32 {
                        var size:Int32 = memoizedSerializedSize
                        if size != -1 {
                          return size
                        }

                        size = 0
                        size += unknownFields.serializedSize()
                        memoizedSerializedSize = size
                        return size
                      }
                      class func parseFromData(data:[Byte]) -> SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromData(data).build()
                      }
                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromInputStream(input:NSInputStream) -> SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromInputStream(input).build()
                      }
                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream) -> SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromCodedInputStream(input).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveInts {
                        return SettingRealsFromPositiveInts.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func builder() -> SettingRealsFromPositiveIntsBuilder {
                        return SettingRealsFromPositiveIntsBuilder()
                      }
                      class func builderWithPrototype(prototype:SettingRealsFromPositiveInts) -> SettingRealsFromPositiveIntsBuilder {
                        return SettingRealsFromPositiveInts.builder().mergeFrom(prototype)
                      }
                      func builder() -> SettingRealsFromPositiveIntsBuilder {
                        return SettingRealsFromPositiveInts.builder()
                      }
                      func toBuilder() -> SettingRealsFromPositiveIntsBuilder {
                        return SettingRealsFromPositiveInts.builderWithPrototype(self)
                      }
                      override func writeDescriptionTo(inout output:String, indent:String) {
                        unknownFields.writeDescriptionTo(&output, indent:indent)
                      }
                      override var hashValue:Int {
                       get {
                            var hashCode:Int = 7
                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                            return hashCode
                          }
                        }
                      }

                      class SettingRealsFromPositiveIntsBuilder : GeneratedMessageBuilder {
                      private var result:SettingRealsFromPositiveInts

                      override init () {
                         result = SettingRealsFromPositiveInts()
                      }
                      override var internalGetResult:GeneratedMessage {
                           get {
                              return result
                           }
                      }
                      override func clear() -> SettingRealsFromPositiveIntsBuilder {
                        result = SettingRealsFromPositiveInts()
                        return self
                      }
                      override func clone() -> SettingRealsFromPositiveIntsBuilder {
                        return SettingRealsFromPositiveInts.builderWithPrototype(result)
                      }
                      func build() -> SettingRealsFromPositiveInts {
                           checkInitialized()
                           return buildPartial()
                      }
                      func buildPartial() -> SettingRealsFromPositiveInts {
                        var returnMe:SettingRealsFromPositiveInts = result
                        return returnMe
                      }
                      func mergeFrom(other:SettingRealsFromPositiveInts) -> SettingRealsFromPositiveIntsBuilder {
                        if (other == SettingRealsFromPositiveInts()) {
                          return self
                        }
                          mergeUnknownFields(other.unknownFields)
                        return self
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream) ->SettingRealsFromPositiveIntsBuilder {
                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveIntsBuilder {
                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                        while (true) {
                          var tag:Int32 = input.readTag()
                            if tag == 0 {
                                 self.unknownFields = unknownFieldsBuilder.build()
                                 return self}
                            else {
                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                      unknownFields = unknownFieldsBuilder.build()
                                      return self
                                  }
                            }
                            }
                         }
                      }

                      func == (lhs: SettingRealsFromNegativeInts, rhs: SettingRealsFromNegativeInts) -> Bool {
                            if (lhs === rhs) {
                              return true
                            }
                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                            return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                      }
                      class SettingRealsFromNegativeInts : GeneratedMessage {
                        override init() {
                             super.init()
                        }
                        override func isInitialized() -> Bool {
                          return true
                        }
                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                          unknownFields.writeToCodedOutputStream(output)
                        }
                        override func serializedSize() -> Int32 {
                          var size:Int32 = memoizedSerializedSize
                          if size != -1 {
                            return size
                          }

                          size = 0
                          size += unknownFields.serializedSize()
                          memoizedSerializedSize = size
                          return size
                        }
                        class func parseFromData(data:[Byte]) -> SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromData(data).build()
                        }
                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromInputStream(input:NSInputStream) -> SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromInputStream(input).build()
                        }
                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream) -> SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromCodedInputStream(input).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeInts {
                          return SettingRealsFromNegativeInts.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func builder() -> SettingRealsFromNegativeIntsBuilder {
                          return SettingRealsFromNegativeIntsBuilder()
                        }
                        class func builderWithPrototype(prototype:SettingRealsFromNegativeInts) -> SettingRealsFromNegativeIntsBuilder {
                          return SettingRealsFromNegativeInts.builder().mergeFrom(prototype)
                        }
                        func builder() -> SettingRealsFromNegativeIntsBuilder {
                          return SettingRealsFromNegativeInts.builder()
                        }
                        func toBuilder() -> SettingRealsFromNegativeIntsBuilder {
                          return SettingRealsFromNegativeInts.builderWithPrototype(self)
                        }
                        override func writeDescriptionTo(inout output:String, indent:String) {
                          unknownFields.writeDescriptionTo(&output, indent:indent)
                        }
                        override var hashValue:Int {
                         get {
                              var hashCode:Int = 7
                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                              return hashCode
                            }
                          }
                        }

                        class SettingRealsFromNegativeIntsBuilder : GeneratedMessageBuilder {
                        private var result:SettingRealsFromNegativeInts

                        override init () {
                           result = SettingRealsFromNegativeInts()
                        }
                        override var internalGetResult:GeneratedMessage {
                             get {
                                return result
                             }
                        }
                        override func clear() -> SettingRealsFromNegativeIntsBuilder {
                          result = SettingRealsFromNegativeInts()
                          return self
                        }
                        override func clone() -> SettingRealsFromNegativeIntsBuilder {
                          return SettingRealsFromNegativeInts.builderWithPrototype(result)
                        }
                        func build() -> SettingRealsFromNegativeInts {
                             checkInitialized()
                             return buildPartial()
                        }
                        func buildPartial() -> SettingRealsFromNegativeInts {
                          var returnMe:SettingRealsFromNegativeInts = result
                          return returnMe
                        }
                        func mergeFrom(other:SettingRealsFromNegativeInts) -> SettingRealsFromNegativeIntsBuilder {
                          if (other == SettingRealsFromNegativeInts()) {
                            return self
                          }
                            mergeUnknownFields(other.unknownFields)
                          return self
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream) ->SettingRealsFromNegativeIntsBuilder {
                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeIntsBuilder {
                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                          while (true) {
                            var tag:Int32 = input.readTag()
                              if tag == 0 {
                                   self.unknownFields = unknownFieldsBuilder.build()
                                   return self}
                              else {
                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                        unknownFields = unknownFieldsBuilder.build()
                                        return self
                                    }
                              }
                              }
                           }
                        }

                        func == (lhs: ComplexOptionType1, rhs: ComplexOptionType1) -> Bool {
                              if (lhs === rhs) {
                                return true
                              }
                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                              fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
                               fieldCheck = fieldCheck && (lhs.hasFoo2 == rhs.hasFoo2) && (!lhs.hasFoo2 || lhs.foo2 == rhs.foo2)
                               fieldCheck = fieldCheck && (lhs.hasFoo3 == rhs.hasFoo3) && (!lhs.hasFoo3 || lhs.foo3 == rhs.foo3)
                               fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(100), endExclusive:Int32(536870912))
                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                        }
                        class ComplexOptionType1 : ExtendableMessage {
                          private(set) var hasFoo:Bool = false
                          private(set) var foo:Int32 = 0

                          private(set) var hasFoo2:Bool = false
                          private(set) var foo2:Int32 = 0

                          private(set) var hasFoo3:Bool = false
                          private(set) var foo3:Int32 = 0

                          override init() {
                               super.init()
                          }
                          override func isInitialized() -> Bool {
                            if !extensionsAreInitialized() {
                              return false
                            }
                            return true
                          }
                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                            if hasFoo {
                              output.writeInt32(1, value:foo)
                            }
                            if hasFoo2 {
                              output.writeInt32(2, value:foo2)
                            }
                            if hasFoo3 {
                              output.writeInt32(3, value:foo3)
                            }
                            writeExtensionsToCodedOutputStream(output, startInclusive:Int32(100), endExclusive:Int32(536870912))
                            unknownFields.writeToCodedOutputStream(output)
                          }
                          override func serializedSize() -> Int32 {
                            var size:Int32 = memoizedSerializedSize
                            if size != -1 {
                              return size
                            }

                            size = 0
                            if hasFoo {
                              size += WireFormat.computeInt32Size(1, value:foo)
                            }
                            if hasFoo2 {
                              size += WireFormat.computeInt32Size(2, value:foo2)
                            }
                            if hasFoo3 {
                              size += WireFormat.computeInt32Size(3, value:foo3)
                            }
                            size += extensionsSerializedSize()
                            size += unknownFields.serializedSize()
                            memoizedSerializedSize = size
                            return size
                          }
                          class func parseFromData(data:[Byte]) -> ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromData(data).build()
                          }
                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromInputStream(input).build()
                          }
                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromCodedInputStream(input).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType1 {
                            return ComplexOptionType1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func builder() -> ComplexOptionType1Builder {
                            return ComplexOptionType1Builder()
                          }
                          class func builderWithPrototype(prototype:ComplexOptionType1) -> ComplexOptionType1Builder {
                            return ComplexOptionType1.builder().mergeFrom(prototype)
                          }
                          func builder() -> ComplexOptionType1Builder {
                            return ComplexOptionType1.builder()
                          }
                          func toBuilder() -> ComplexOptionType1Builder {
                            return ComplexOptionType1.builderWithPrototype(self)
                          }
                          override func writeDescriptionTo(inout output:String, indent:String) {
                            if hasFoo {
                              output += "\(indent) foo: \(foo) \n"
                            }
                            if hasFoo2 {
                              output += "\(indent) foo2: \(foo2) \n"
                            }
                            if hasFoo3 {
                              output += "\(indent) foo3: \(foo3) \n"
                            }
                            writeExtensionDescription(&output, startInclusive:Int32(100), endExclusive:Int32(536870912), indent:indent)
                            unknownFields.writeDescriptionTo(&output, indent:indent)
                          }
                          override var hashValue:Int {
                           get {
                                var hashCode:Int = 7
                                if hasFoo {
                                   hashCode = (hashCode &* 31) &+ foo.hashValue
                                }
                                if hasFoo2 {
                                   hashCode = (hashCode &* 31) &+ foo2.hashValue
                                }
                                if hasFoo3 {
                                   hashCode = (hashCode &* 31) &+ foo3.hashValue
                                }
                                hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(100), endExclusive:Int32(536870912)))
                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                return hashCode
                              }
                            }
                          }

                          class ComplexOptionType1Builder : ExtendableMessageBuilder {
                          private var result:ComplexOptionType1

                          override init () {
                             result = ComplexOptionType1()
                          }
                          var hasFoo:Bool {
                               get {
                                    return result.hasFoo
                               }
                          }
                          var foo:Int32 {
                               get {
                                    return result.foo
                               }
                               set (value) {
                                   result.hasFoo = true
                                   result.foo = value
                               }
                          }
                          func clearFoo() -> ComplexOptionType1Builder{
                               result.hasFoo = false
                               result.foo = 0
                               return self
                          }
                          var hasFoo2:Bool {
                               get {
                                    return result.hasFoo2
                               }
                          }
                          var foo2:Int32 {
                               get {
                                    return result.foo2
                               }
                               set (value) {
                                   result.hasFoo2 = true
                                   result.foo2 = value
                               }
                          }
                          func clearFoo2() -> ComplexOptionType1Builder{
                               result.hasFoo2 = false
                               result.foo2 = 0
                               return self
                          }
                          var hasFoo3:Bool {
                               get {
                                    return result.hasFoo3
                               }
                          }
                          var foo3:Int32 {
                               get {
                                    return result.foo3
                               }
                               set (value) {
                                   result.hasFoo3 = true
                                   result.foo3 = value
                               }
                          }
                          func clearFoo3() -> ComplexOptionType1Builder{
                               result.hasFoo3 = false
                               result.foo3 = 0
                               return self
                          }
                          override var internalGetResult:ExtendableMessage {
                               get {
                                   return result
                               }
                          }
                          override func clear() -> ComplexOptionType1Builder {
                            result = ComplexOptionType1()
                            return self
                          }
                          override func clone() -> ComplexOptionType1Builder {
                            return ComplexOptionType1.builderWithPrototype(result)
                          }
                          func build() -> ComplexOptionType1 {
                               checkInitialized()
                               return buildPartial()
                          }
                          func buildPartial() -> ComplexOptionType1 {
                            var returnMe:ComplexOptionType1 = result
                            return returnMe
                          }
                          func mergeFrom(other:ComplexOptionType1) -> ComplexOptionType1Builder {
                            if (other == ComplexOptionType1()) {
                              return self
                            }
                            if other.hasFoo {
                                 foo = other.foo
                            }
                            if other.hasFoo2 {
                                 foo2 = other.foo2
                            }
                            if other.hasFoo3 {
                                 foo3 = other.foo3
                            }
                            mergeExtensionFields(other)
                              mergeUnknownFields(other.unknownFields)
                            return self
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType1Builder {
                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType1Builder {
                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                            while (true) {
                              var tag:Int32 = input.readTag()
                                if tag == 0 {
                                     self.unknownFields = unknownFieldsBuilder.build()
                                     return self}
                                else if tag == 8 {
                                  foo = input.readInt32()
                                }
                                else if tag == 16 {
                                  foo2 = input.readInt32()
                                }
                                else if tag == 24 {
                                  foo3 = input.readInt32()
                                }
                                else {
                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                          unknownFields = unknownFieldsBuilder.build()
                                          return self
                                      }
                                }
                                }
                             }
                          }

                          func == (lhs: ComplexOptionType2, rhs: ComplexOptionType2) -> Bool {
                                if (lhs === rhs) {
                                  return true
                                }
                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
                                 fieldCheck = fieldCheck && (lhs.hasBaz == rhs.hasBaz) && (!lhs.hasBaz || lhs.baz == rhs.baz)
                                 fieldCheck = fieldCheck && (lhs.hasFred == rhs.hasFred) && (!lhs.hasFred || lhs.fred == rhs.fred)
                                 fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(100), endExclusive:Int32(536870912))
                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                          }
                          class ComplexOptionType2 : ExtendableMessage {
                            private(set) var hasBar:Bool = false
                            private(set) var bar:ComplexOptionType1 = ComplexOptionType1()
                            private(set) var hasBaz:Bool = false
                            private(set) var baz:Int32 = 0

                            private(set) var hasFred:Bool = false
                            private(set) var fred:ComplexOptionType2ComplexOptionType4 = ComplexOptionType2ComplexOptionType4()
                            override init() {
                                 super.init()
                            }
                            override func isInitialized() -> Bool {
                              if hasBar {
                                if !bar.isInitialized() {
                                  return false
                                }
                              }
                              if !extensionsAreInitialized() {
                                return false
                              }
                              return true
                            }
                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                              if hasBar {
                                output.writeMessage(1, value:bar)
                              }
                              if hasBaz {
                                output.writeInt32(2, value:baz)
                              }
                              if hasFred {
                                output.writeMessage(3, value:fred)
                              }
                              writeExtensionsToCodedOutputStream(output, startInclusive:Int32(100), endExclusive:Int32(536870912))
                              unknownFields.writeToCodedOutputStream(output)
                            }
                            override func serializedSize() -> Int32 {
                              var size:Int32 = memoizedSerializedSize
                              if size != -1 {
                                return size
                              }

                              size = 0
                              if hasBar {
                                size += WireFormat.computeMessageSize(1, value:bar)
                              }
                              if hasBaz {
                                size += WireFormat.computeInt32Size(2, value:baz)
                              }
                              if hasFred {
                                size += WireFormat.computeMessageSize(3, value:fred)
                              }
                              size += extensionsSerializedSize()
                              size += unknownFields.serializedSize()
                              memoizedSerializedSize = size
                              return size
                            }
                            class func parseFromData(data:[Byte]) -> ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromData(data).build()
                            }
                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromInputStream(input).build()
                            }
                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromCodedInputStream(input).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2 {
                              return ComplexOptionType2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func builder() -> ComplexOptionType2Builder {
                              return ComplexOptionType2Builder()
                            }
                            class func builderWithPrototype(prototype:ComplexOptionType2) -> ComplexOptionType2Builder {
                              return ComplexOptionType2.builder().mergeFrom(prototype)
                            }
                            func builder() -> ComplexOptionType2Builder {
                              return ComplexOptionType2.builder()
                            }
                            func toBuilder() -> ComplexOptionType2Builder {
                              return ComplexOptionType2.builderWithPrototype(self)
                            }
                            override func writeDescriptionTo(inout output:String, indent:String) {
                              if hasBar {
                                output += "\(indent) bar {\n"
                                bar.writeDescriptionTo(&output, indent:"\(indent)  ")
                                output += "\(indent) }\n"
                              }
                              if hasBaz {
                                output += "\(indent) baz: \(baz) \n"
                              }
                              if hasFred {
                                output += "\(indent) fred {\n"
                                fred.writeDescriptionTo(&output, indent:"\(indent)  ")
                                output += "\(indent) }\n"
                              }
                              writeExtensionDescription(&output, startInclusive:Int32(100), endExclusive:Int32(536870912), indent:indent)
                              unknownFields.writeDescriptionTo(&output, indent:indent)
                            }
                            override var hashValue:Int {
                             get {
                                  var hashCode:Int = 7
                                  if hasBar {
                                    hashCode = (hashCode &* 31) &+ bar.hashValue
                                  }
                                  if hasBaz {
                                     hashCode = (hashCode &* 31) &+ baz.hashValue
                                  }
                                  if hasFred {
                                    hashCode = (hashCode &* 31) &+ fred.hashValue
                                  }
                                  hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(100), endExclusive:Int32(536870912)))
                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                  return hashCode
                                }
                              }
                            }

                            func == (lhs: ComplexOptionType2ComplexOptionType4, rhs: ComplexOptionType2ComplexOptionType4) -> Bool {
                                  if (lhs === rhs) {
                                    return true
                                  }
                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                  fieldCheck = fieldCheck && (lhs.hasWaldo == rhs.hasWaldo) && (!lhs.hasWaldo || lhs.waldo == rhs.waldo)
                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                            }
                            class ComplexOptionType2ComplexOptionType4 : GeneratedMessage {
                              private(set) var hasWaldo:Bool = false
                              private(set) var waldo:Int32 = 0

                              var complexOpt4:ExtensionField {
                                   get {
                                       return ComplexOptionType2ComplexOptionType4_complexOpt4
                                   }
                              }
                              override init() {
                                   super.init()
                              }
                              override func isInitialized() -> Bool {
                                return true
                              }
                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                if hasWaldo {
                                  output.writeInt32(1, value:waldo)
                                }
                                unknownFields.writeToCodedOutputStream(output)
                              }
                              override func serializedSize() -> Int32 {
                                var size:Int32 = memoizedSerializedSize
                                if size != -1 {
                                  return size
                                }

                                size = 0
                                if hasWaldo {
                                  size += WireFormat.computeInt32Size(1, value:waldo)
                                }
                                size += unknownFields.serializedSize()
                                memoizedSerializedSize = size
                                return size
                              }
                              class func parseFromData(data:[Byte]) -> ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromData(data).build()
                              }
                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromInputStream(input).build()
                              }
                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromCodedInputStream(input).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2ComplexOptionType4 {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func builder() -> ComplexOptionType2ComplexOptionType4Builder {
                                return ComplexOptionType2ComplexOptionType4Builder()
                              }
                              class func builderWithPrototype(prototype:ComplexOptionType2ComplexOptionType4) -> ComplexOptionType2ComplexOptionType4Builder {
                                return ComplexOptionType2ComplexOptionType4.builder().mergeFrom(prototype)
                              }
                              func builder() -> ComplexOptionType2ComplexOptionType4Builder {
                                return ComplexOptionType2ComplexOptionType4.builder()
                              }
                              func toBuilder() -> ComplexOptionType2ComplexOptionType4Builder {
                                return ComplexOptionType2ComplexOptionType4.builderWithPrototype(self)
                              }
                              override func writeDescriptionTo(inout output:String, indent:String) {
                                if hasWaldo {
                                  output += "\(indent) waldo: \(waldo) \n"
                                }
                                unknownFields.writeDescriptionTo(&output, indent:indent)
                              }
                              override var hashValue:Int {
                               get {
                                    var hashCode:Int = 7
                                    if hasWaldo {
                                       hashCode = (hashCode &* 31) &+ waldo.hashValue
                                    }
                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                    return hashCode
                                  }
                                }
                              }

                              class ComplexOptionType2ComplexOptionType4Builder : GeneratedMessageBuilder {
                              private var result:ComplexOptionType2ComplexOptionType4

                              override init () {
                                 result = ComplexOptionType2ComplexOptionType4()
                              }
                              var hasWaldo:Bool {
                                   get {
                                        return result.hasWaldo
                                   }
                              }
                              var waldo:Int32 {
                                   get {
                                        return result.waldo
                                   }
                                   set (value) {
                                       result.hasWaldo = true
                                       result.waldo = value
                                   }
                              }
                              func clearWaldo() -> ComplexOptionType2ComplexOptionType4Builder{
                                   result.hasWaldo = false
                                   result.waldo = 0
                                   return self
                              }
                              override var internalGetResult:GeneratedMessage {
                                   get {
                                      return result
                                   }
                              }
                              override func clear() -> ComplexOptionType2ComplexOptionType4Builder {
                                result = ComplexOptionType2ComplexOptionType4()
                                return self
                              }
                              override func clone() -> ComplexOptionType2ComplexOptionType4Builder {
                                return ComplexOptionType2ComplexOptionType4.builderWithPrototype(result)
                              }
                              func build() -> ComplexOptionType2ComplexOptionType4 {
                                   checkInitialized()
                                   return buildPartial()
                              }
                              func buildPartial() -> ComplexOptionType2ComplexOptionType4 {
                                var returnMe:ComplexOptionType2ComplexOptionType4 = result
                                return returnMe
                              }
                              func mergeFrom(other:ComplexOptionType2ComplexOptionType4) -> ComplexOptionType2ComplexOptionType4Builder {
                                if (other == ComplexOptionType2ComplexOptionType4()) {
                                  return self
                                }
                                if other.hasWaldo {
                                     waldo = other.waldo
                                }
                                  mergeUnknownFields(other.unknownFields)
                                return self
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType2ComplexOptionType4Builder {
                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2ComplexOptionType4Builder {
                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                while (true) {
                                  var tag:Int32 = input.readTag()
                                    if tag == 0 {
                                         self.unknownFields = unknownFieldsBuilder.build()
                                         return self}
                                    else if tag == 8 {
                                      waldo = input.readInt32()
                                    }
                                    else {
                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                              unknownFields = unknownFieldsBuilder.build()
                                              return self
                                          }
                                    }
                                    }
                                 }
                              }

                              class ComplexOptionType2Builder : ExtendableMessageBuilder {
                              private var result:ComplexOptionType2

                              override init () {
                                 result = ComplexOptionType2()
                              }
                              var hasBar:Bool {
                                   get {
                                       return result.hasBar
                                   }
                              }
                              var bar:ComplexOptionType1 {
                                   get {
                                       return result.bar     }
                                   set (value) {
                                       result.hasBar = true
                                       result.bar = value
                                   }
                              }
                              func setBarBuilder(builderForValue:ComplexOptionType1Builder) -> ComplexOptionType2Builder {
                                bar = builderForValue.build()
                                return self
                              }
                              func mergeBar(value:ComplexOptionType1) -> ComplexOptionType2Builder {
                                if (result.hasBar && result.bar != ComplexOptionType1()) {
                                  result.bar = ComplexOptionType1.builderWithPrototype(result.bar).mergeFrom(value).buildPartial()
                                } else {
                                  result.bar = value
                                }
                                result.hasBar = true
                                return self
                              }
                              func clearBar() -> ComplexOptionType2Builder {
                                result.hasBar = false
                                result.bar = ComplexOptionType1()
                                return self
                              }
                              var hasBaz:Bool {
                                   get {
                                        return result.hasBaz
                                   }
                              }
                              var baz:Int32 {
                                   get {
                                        return result.baz
                                   }
                                   set (value) {
                                       result.hasBaz = true
                                       result.baz = value
                                   }
                              }
                              func clearBaz() -> ComplexOptionType2Builder{
                                   result.hasBaz = false
                                   result.baz = 0
                                   return self
                              }
                              var hasFred:Bool {
                                   get {
                                       return result.hasFred
                                   }
                              }
                              var fred:ComplexOptionType2ComplexOptionType4 {
                                   get {
                                       return result.fred     }
                                   set (value) {
                                       result.hasFred = true
                                       result.fred = value
                                   }
                              }
                              func setFredBuilder(builderForValue:ComplexOptionType2ComplexOptionType4Builder) -> ComplexOptionType2Builder {
                                fred = builderForValue.build()
                                return self
                              }
                              func mergeFred(value:ComplexOptionType2ComplexOptionType4) -> ComplexOptionType2Builder {
                                if (result.hasFred && result.fred != ComplexOptionType2ComplexOptionType4()) {
                                  result.fred = ComplexOptionType2ComplexOptionType4.builderWithPrototype(result.fred).mergeFrom(value).buildPartial()
                                } else {
                                  result.fred = value
                                }
                                result.hasFred = true
                                return self
                              }
                              func clearFred() -> ComplexOptionType2Builder {
                                result.hasFred = false
                                result.fred = ComplexOptionType2ComplexOptionType4()
                                return self
                              }
                              override var internalGetResult:ExtendableMessage {
                                   get {
                                       return result
                                   }
                              }
                              override func clear() -> ComplexOptionType2Builder {
                                result = ComplexOptionType2()
                                return self
                              }
                              override func clone() -> ComplexOptionType2Builder {
                                return ComplexOptionType2.builderWithPrototype(result)
                              }
                              func build() -> ComplexOptionType2 {
                                   checkInitialized()
                                   return buildPartial()
                              }
                              func buildPartial() -> ComplexOptionType2 {
                                var returnMe:ComplexOptionType2 = result
                                return returnMe
                              }
                              func mergeFrom(other:ComplexOptionType2) -> ComplexOptionType2Builder {
                                if (other == ComplexOptionType2()) {
                                  return self
                                }
                                if (other.hasBar) {
                                    mergeBar(other.bar)
                                }
                                if other.hasBaz {
                                     baz = other.baz
                                }
                                if (other.hasFred) {
                                    mergeFred(other.fred)
                                }
                                mergeExtensionFields(other)
                                  mergeUnknownFields(other.unknownFields)
                                return self
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType2Builder {
                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2Builder {
                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                while (true) {
                                  var tag:Int32 = input.readTag()
                                    if tag == 0 {
                                         self.unknownFields = unknownFieldsBuilder.build()
                                         return self}
                                    else if tag == 10 {
                                      var subBuilder:ComplexOptionType1Builder = ComplexOptionType1.builder()
                                      if hasBar {
                                        subBuilder.mergeFrom(bar)
                                      }
                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                      bar = subBuilder.buildPartial()
                                    }
                                    else if tag == 16 {
                                      baz = input.readInt32()
                                    }
                                    else if tag == 26 {
                                      var subBuilder:ComplexOptionType2ComplexOptionType4Builder = ComplexOptionType2ComplexOptionType4.builder()
                                      if hasFred {
                                        subBuilder.mergeFrom(fred)
                                      }
                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                      fred = subBuilder.buildPartial()
                                    }
                                    else {
                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                              unknownFields = unknownFieldsBuilder.build()
                                              return self
                                          }
                                    }
                                    }
                                 }
                              }

                              func == (lhs: ComplexOptionType3, rhs: ComplexOptionType3) -> Bool {
                                    if (lhs === rhs) {
                                      return true
                                    }
                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                    fieldCheck = fieldCheck && (lhs.hasQux == rhs.hasQux) && (!lhs.hasQux || lhs.qux == rhs.qux)
                                     fieldCheck = fieldCheck && (lhs.hasComplexOptionType5 == rhs.hasComplexOptionType5) && (!lhs.hasComplexOptionType5 || lhs.complexOptionType5 == rhs.complexOptionType5)
                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                              }
                              class ComplexOptionType3 : GeneratedMessage {
                                private(set) var hasQux:Bool = false
                                private(set) var qux:Int32 = 0

                                private(set) var hasComplexOptionType5:Bool = false
                                private(set) var complexOptionType5:ComplexOptionType3ComplexOptionType5 = ComplexOptionType3ComplexOptionType5()
                                override init() {
                                     super.init()
                                }
                                override func isInitialized() -> Bool {
                                  return true
                                }
                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                  if hasQux {
                                    output.writeInt32(1, value:qux)
                                  }
                                  if hasComplexOptionType5 {
                                    output.writeGroup(2, value:complexOptionType5)
                                  }
                                  unknownFields.writeToCodedOutputStream(output)
                                }
                                override func serializedSize() -> Int32 {
                                  var size:Int32 = memoizedSerializedSize
                                  if size != -1 {
                                    return size
                                  }

                                  size = 0
                                  if hasQux {
                                    size += WireFormat.computeInt32Size(1, value:qux)
                                  }
                                  if hasComplexOptionType5 {
                                    size += WireFormat.computeGroupSize(2, value:complexOptionType5)
                                  }
                                  size += unknownFields.serializedSize()
                                  memoizedSerializedSize = size
                                  return size
                                }
                                class func parseFromData(data:[Byte]) -> ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromData(data).build()
                                }
                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromInputStream(input).build()
                                }
                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromCodedInputStream(input).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3 {
                                  return ComplexOptionType3.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func builder() -> ComplexOptionType3Builder {
                                  return ComplexOptionType3Builder()
                                }
                                class func builderWithPrototype(prototype:ComplexOptionType3) -> ComplexOptionType3Builder {
                                  return ComplexOptionType3.builder().mergeFrom(prototype)
                                }
                                func builder() -> ComplexOptionType3Builder {
                                  return ComplexOptionType3.builder()
                                }
                                func toBuilder() -> ComplexOptionType3Builder {
                                  return ComplexOptionType3.builderWithPrototype(self)
                                }
                                override func writeDescriptionTo(inout output:String, indent:String) {
                                  if hasQux {
                                    output += "\(indent) qux: \(qux) \n"
                                  }
                                  if hasComplexOptionType5 {
                                    output += "\(indent) complexOptionType5 {\n"
                                    complexOptionType5.writeDescriptionTo(&output, indent:"\(indent)  ")
                                    output += "\(indent) }\n"
                                  }
                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                }
                                override var hashValue:Int {
                                 get {
                                      var hashCode:Int = 7
                                      if hasQux {
                                         hashCode = (hashCode &* 31) &+ qux.hashValue
                                      }
                                      if hasComplexOptionType5 {
                                        hashCode = (hashCode &* 31) &+ complexOptionType5.hashValue
                                      }
                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                      return hashCode
                                    }
                                  }
                                }

                                func == (lhs: ComplexOptionType3ComplexOptionType5, rhs: ComplexOptionType3ComplexOptionType5) -> Bool {
                                      if (lhs === rhs) {
                                        return true
                                      }
                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                      fieldCheck = fieldCheck && (lhs.hasPlugh == rhs.hasPlugh) && (!lhs.hasPlugh || lhs.plugh == rhs.plugh)
                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                }
                                class ComplexOptionType3ComplexOptionType5 : GeneratedMessage {
                                  private(set) var hasPlugh:Bool = false
                                  private(set) var plugh:Int32 = 0

                                  override init() {
                                       super.init()
                                  }
                                  override func isInitialized() -> Bool {
                                    return true
                                  }
                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                    if hasPlugh {
                                      output.writeInt32(3, value:plugh)
                                    }
                                    unknownFields.writeToCodedOutputStream(output)
                                  }
                                  override func serializedSize() -> Int32 {
                                    var size:Int32 = memoizedSerializedSize
                                    if size != -1 {
                                      return size
                                    }

                                    size = 0
                                    if hasPlugh {
                                      size += WireFormat.computeInt32Size(3, value:plugh)
                                    }
                                    size += unknownFields.serializedSize()
                                    memoizedSerializedSize = size
                                    return size
                                  }
                                  class func parseFromData(data:[Byte]) -> ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromData(data).build()
                                  }
                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromInputStream(input).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromCodedInputStream(input).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3ComplexOptionType5 {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func builder() -> ComplexOptionType3ComplexOptionType5Builder {
                                    return ComplexOptionType3ComplexOptionType5Builder()
                                  }
                                  class func builderWithPrototype(prototype:ComplexOptionType3ComplexOptionType5) -> ComplexOptionType3ComplexOptionType5Builder {
                                    return ComplexOptionType3ComplexOptionType5.builder().mergeFrom(prototype)
                                  }
                                  func builder() -> ComplexOptionType3ComplexOptionType5Builder {
                                    return ComplexOptionType3ComplexOptionType5.builder()
                                  }
                                  func toBuilder() -> ComplexOptionType3ComplexOptionType5Builder {
                                    return ComplexOptionType3ComplexOptionType5.builderWithPrototype(self)
                                  }
                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                    if hasPlugh {
                                      output += "\(indent) plugh: \(plugh) \n"
                                    }
                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                  }
                                  override var hashValue:Int {
                                   get {
                                        var hashCode:Int = 7
                                        if hasPlugh {
                                           hashCode = (hashCode &* 31) &+ plugh.hashValue
                                        }
                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                        return hashCode
                                      }
                                    }
                                  }

                                  class ComplexOptionType3ComplexOptionType5Builder : GeneratedMessageBuilder {
                                  private var result:ComplexOptionType3ComplexOptionType5

                                  override init () {
                                     result = ComplexOptionType3ComplexOptionType5()
                                  }
                                  var hasPlugh:Bool {
                                       get {
                                            return result.hasPlugh
                                       }
                                  }
                                  var plugh:Int32 {
                                       get {
                                            return result.plugh
                                       }
                                       set (value) {
                                           result.hasPlugh = true
                                           result.plugh = value
                                       }
                                  }
                                  func clearPlugh() -> ComplexOptionType3ComplexOptionType5Builder{
                                       result.hasPlugh = false
                                       result.plugh = 0
                                       return self
                                  }
                                  override var internalGetResult:GeneratedMessage {
                                       get {
                                          return result
                                       }
                                  }
                                  override func clear() -> ComplexOptionType3ComplexOptionType5Builder {
                                    result = ComplexOptionType3ComplexOptionType5()
                                    return self
                                  }
                                  override func clone() -> ComplexOptionType3ComplexOptionType5Builder {
                                    return ComplexOptionType3ComplexOptionType5.builderWithPrototype(result)
                                  }
                                  func build() -> ComplexOptionType3ComplexOptionType5 {
                                       checkInitialized()
                                       return buildPartial()
                                  }
                                  func buildPartial() -> ComplexOptionType3ComplexOptionType5 {
                                    var returnMe:ComplexOptionType3ComplexOptionType5 = result
                                    return returnMe
                                  }
                                  func mergeFrom(other:ComplexOptionType3ComplexOptionType5) -> ComplexOptionType3ComplexOptionType5Builder {
                                    if (other == ComplexOptionType3ComplexOptionType5()) {
                                      return self
                                    }
                                    if other.hasPlugh {
                                         plugh = other.plugh
                                    }
                                      mergeUnknownFields(other.unknownFields)
                                    return self
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType3ComplexOptionType5Builder {
                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3ComplexOptionType5Builder {
                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                    while (true) {
                                      var tag:Int32 = input.readTag()
                                        if tag == 0 {
                                             self.unknownFields = unknownFieldsBuilder.build()
                                             return self}
                                        else if tag == 24 {
                                          plugh = input.readInt32()
                                        }
                                        else {
                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                  unknownFields = unknownFieldsBuilder.build()
                                                  return self
                                              }
                                        }
                                        }
                                     }
                                  }

                                  class ComplexOptionType3Builder : GeneratedMessageBuilder {
                                  private var result:ComplexOptionType3

                                  override init () {
                                     result = ComplexOptionType3()
                                  }
                                  var hasQux:Bool {
                                       get {
                                            return result.hasQux
                                       }
                                  }
                                  var qux:Int32 {
                                       get {
                                            return result.qux
                                       }
                                       set (value) {
                                           result.hasQux = true
                                           result.qux = value
                                       }
                                  }
                                  func clearQux() -> ComplexOptionType3Builder{
                                       result.hasQux = false
                                       result.qux = 0
                                       return self
                                  }
                                  var hasComplexOptionType5:Bool {
                                       get {
                                           return result.hasComplexOptionType5
                                       }
                                  }
                                  var complexOptionType5:ComplexOptionType3ComplexOptionType5 {
                                       get {
                                           return result.complexOptionType5     }
                                       set (value) {
                                           result.hasComplexOptionType5 = true
                                           result.complexOptionType5 = value
                                       }
                                  }
                                  func setComplexOptionType5Builder(builderForValue:ComplexOptionType3ComplexOptionType5Builder) -> ComplexOptionType3Builder {
                                    complexOptionType5 = builderForValue.build()
                                    return self
                                  }
                                  func mergeComplexOptionType5(value:ComplexOptionType3ComplexOptionType5) -> ComplexOptionType3Builder {
                                    if (result.hasComplexOptionType5 && result.complexOptionType5 != ComplexOptionType3ComplexOptionType5()) {
                                      result.complexOptionType5 = ComplexOptionType3ComplexOptionType5.builderWithPrototype(result.complexOptionType5).mergeFrom(value).buildPartial()
                                    } else {
                                      result.complexOptionType5 = value
                                    }
                                    result.hasComplexOptionType5 = true
                                    return self
                                  }
                                  func clearComplexOptionType5() -> ComplexOptionType3Builder {
                                    result.hasComplexOptionType5 = false
                                    result.complexOptionType5 = ComplexOptionType3ComplexOptionType5()
                                    return self
                                  }
                                  override var internalGetResult:GeneratedMessage {
                                       get {
                                          return result
                                       }
                                  }
                                  override func clear() -> ComplexOptionType3Builder {
                                    result = ComplexOptionType3()
                                    return self
                                  }
                                  override func clone() -> ComplexOptionType3Builder {
                                    return ComplexOptionType3.builderWithPrototype(result)
                                  }
                                  func build() -> ComplexOptionType3 {
                                       checkInitialized()
                                       return buildPartial()
                                  }
                                  func buildPartial() -> ComplexOptionType3 {
                                    var returnMe:ComplexOptionType3 = result
                                    return returnMe
                                  }
                                  func mergeFrom(other:ComplexOptionType3) -> ComplexOptionType3Builder {
                                    if (other == ComplexOptionType3()) {
                                      return self
                                    }
                                    if other.hasQux {
                                         qux = other.qux
                                    }
                                    if (other.hasComplexOptionType5) {
                                        mergeComplexOptionType5(other.complexOptionType5)
                                    }
                                      mergeUnknownFields(other.unknownFields)
                                    return self
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType3Builder {
                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3Builder {
                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                    while (true) {
                                      var tag:Int32 = input.readTag()
                                        if tag == 0 {
                                             self.unknownFields = unknownFieldsBuilder.build()
                                             return self}
                                        else if tag == 8 {
                                          qux = input.readInt32()
                                        }
                                        else if tag == 19 {
                                          var subBuilder:ComplexOptionType3ComplexOptionType5Builder = ComplexOptionType3ComplexOptionType5.builder()
                                          if hasComplexOptionType5 {
                                            subBuilder.mergeFrom(complexOptionType5)
                                          }
                                          input.readGroup(2, builder:subBuilder, extensionRegistry:extensionRegistry)
                                          complexOptionType5 = subBuilder.buildPartial()
                                        }
                                        else {
                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                  unknownFields = unknownFieldsBuilder.build()
                                                  return self
                                              }
                                        }
                                        }
                                     }
                                  }

                                  func == (lhs: ComplexOpt6, rhs: ComplexOpt6) -> Bool {
                                        if (lhs === rhs) {
                                          return true
                                        }
                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                        fieldCheck = fieldCheck && (lhs.hasXyzzy == rhs.hasXyzzy) && (!lhs.hasXyzzy || lhs.xyzzy == rhs.xyzzy)
                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                  }
                                  class ComplexOpt6 : GeneratedMessage {
                                    private(set) var hasXyzzy:Bool = false
                                    private(set) var xyzzy:Int32 = 0

                                    override init() {
                                         super.init()
                                    }
                                    override func isInitialized() -> Bool {
                                      return true
                                    }
                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                      if hasXyzzy {
                                        output.writeInt32(7593951, value:xyzzy)
                                      }
                                      unknownFields.writeToCodedOutputStream(output)
                                    }
                                    override func serializedSize() -> Int32 {
                                      var size:Int32 = memoizedSerializedSize
                                      if size != -1 {
                                        return size
                                      }

                                      size = 0
                                      if hasXyzzy {
                                        size += WireFormat.computeInt32Size(7593951, value:xyzzy)
                                      }
                                      size += unknownFields.serializedSize()
                                      memoizedSerializedSize = size
                                      return size
                                    }
                                    class func parseFromData(data:[Byte]) -> ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromData(data).build()
                                    }
                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream) -> ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromInputStream(input).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromCodedInputStream(input).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOpt6 {
                                      return ComplexOpt6.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func builder() -> ComplexOpt6Builder {
                                      return ComplexOpt6Builder()
                                    }
                                    class func builderWithPrototype(prototype:ComplexOpt6) -> ComplexOpt6Builder {
                                      return ComplexOpt6.builder().mergeFrom(prototype)
                                    }
                                    func builder() -> ComplexOpt6Builder {
                                      return ComplexOpt6.builder()
                                    }
                                    func toBuilder() -> ComplexOpt6Builder {
                                      return ComplexOpt6.builderWithPrototype(self)
                                    }
                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                      if hasXyzzy {
                                        output += "\(indent) xyzzy: \(xyzzy) \n"
                                      }
                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                    }
                                    override var hashValue:Int {
                                     get {
                                          var hashCode:Int = 7
                                          if hasXyzzy {
                                             hashCode = (hashCode &* 31) &+ xyzzy.hashValue
                                          }
                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                          return hashCode
                                        }
                                      }
                                    }

                                    class ComplexOpt6Builder : GeneratedMessageBuilder {
                                    private var result:ComplexOpt6

                                    override init () {
                                       result = ComplexOpt6()
                                    }
                                    var hasXyzzy:Bool {
                                         get {
                                              return result.hasXyzzy
                                         }
                                    }
                                    var xyzzy:Int32 {
                                         get {
                                              return result.xyzzy
                                         }
                                         set (value) {
                                             result.hasXyzzy = true
                                             result.xyzzy = value
                                         }
                                    }
                                    func clearXyzzy() -> ComplexOpt6Builder{
                                         result.hasXyzzy = false
                                         result.xyzzy = 0
                                         return self
                                    }
                                    override var internalGetResult:GeneratedMessage {
                                         get {
                                            return result
                                         }
                                    }
                                    override func clear() -> ComplexOpt6Builder {
                                      result = ComplexOpt6()
                                      return self
                                    }
                                    override func clone() -> ComplexOpt6Builder {
                                      return ComplexOpt6.builderWithPrototype(result)
                                    }
                                    func build() -> ComplexOpt6 {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> ComplexOpt6 {
                                      var returnMe:ComplexOpt6 = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:ComplexOpt6) -> ComplexOpt6Builder {
                                      if (other == ComplexOpt6()) {
                                        return self
                                      }
                                      if other.hasXyzzy {
                                           xyzzy = other.xyzzy
                                      }
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOpt6Builder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOpt6Builder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 60751608 {
                                            xyzzy = input.readInt32()
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }

                                    func == (lhs: VariousComplexOptions, rhs: VariousComplexOptions) -> Bool {
                                          if (lhs === rhs) {
                                            return true
                                          }
                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                          return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                    }
                                    class VariousComplexOptions : GeneratedMessage {
                                      override init() {
                                           super.init()
                                      }
                                      override func isInitialized() -> Bool {
                                        return true
                                      }
                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                        unknownFields.writeToCodedOutputStream(output)
                                      }
                                      override func serializedSize() -> Int32 {
                                        var size:Int32 = memoizedSerializedSize
                                        if size != -1 {
                                          return size
                                        }

                                        size = 0
                                        size += unknownFields.serializedSize()
                                        memoizedSerializedSize = size
                                        return size
                                      }
                                      class func parseFromData(data:[Byte]) -> VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromData(data).build()
                                      }
                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream) -> VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromInputStream(input).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream) -> VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromCodedInputStream(input).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> VariousComplexOptions {
                                        return VariousComplexOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func builder() -> VariousComplexOptionsBuilder {
                                        return VariousComplexOptionsBuilder()
                                      }
                                      class func builderWithPrototype(prototype:VariousComplexOptions) -> VariousComplexOptionsBuilder {
                                        return VariousComplexOptions.builder().mergeFrom(prototype)
                                      }
                                      func builder() -> VariousComplexOptionsBuilder {
                                        return VariousComplexOptions.builder()
                                      }
                                      func toBuilder() -> VariousComplexOptionsBuilder {
                                        return VariousComplexOptions.builderWithPrototype(self)
                                      }
                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                      }
                                      override var hashValue:Int {
                                       get {
                                            var hashCode:Int = 7
                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                            return hashCode
                                          }
                                        }
                                      }

                                      class VariousComplexOptionsBuilder : GeneratedMessageBuilder {
                                      private var result:VariousComplexOptions

                                      override init () {
                                         result = VariousComplexOptions()
                                      }
                                      override var internalGetResult:GeneratedMessage {
                                           get {
                                              return result
                                           }
                                      }
                                      override func clear() -> VariousComplexOptionsBuilder {
                                        result = VariousComplexOptions()
                                        return self
                                      }
                                      override func clone() -> VariousComplexOptionsBuilder {
                                        return VariousComplexOptions.builderWithPrototype(result)
                                      }
                                      func build() -> VariousComplexOptions {
                                           checkInitialized()
                                           return buildPartial()
                                      }
                                      func buildPartial() -> VariousComplexOptions {
                                        var returnMe:VariousComplexOptions = result
                                        return returnMe
                                      }
                                      func mergeFrom(other:VariousComplexOptions) -> VariousComplexOptionsBuilder {
                                        if (other == VariousComplexOptions()) {
                                          return self
                                        }
                                          mergeUnknownFields(other.unknownFields)
                                        return self
                                      }
                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->VariousComplexOptionsBuilder {
                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                      }
                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> VariousComplexOptionsBuilder {
                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                        while (true) {
                                          var tag:Int32 = input.readTag()
                                            if tag == 0 {
                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                 return self}
                                            else {
                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                      unknownFields = unknownFieldsBuilder.build()
                                                      return self
                                                  }
                                            }
                                            }
                                         }
                                      }

                                      func == (lhs: AggregateMessageSet, rhs: AggregateMessageSet) -> Bool {
                                            if (lhs === rhs) {
                                              return true
                                            }
                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                            fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4), endExclusive:Int32(2147483647))
                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                      }
                                      class AggregateMessageSet : ExtendableMessage {
                                        override init() {
                                             super.init()
                                        }
                                        override func isInitialized() -> Bool {
                                          if !extensionsAreInitialized() {
                                            return false
                                          }
                                          return true
                                        }
                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                          writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4), endExclusive:Int32(2147483647))
                                          unknownFields.writeAsMessageSetTo(output)
                                        }
                                        override func serializedSize() -> Int32 {
                                          var size:Int32 = memoizedSerializedSize
                                          if size != -1 {
                                            return size
                                          }

                                          size = 0
                                          size += extensionsSerializedSize()
                                          size += unknownFields.serializedSizeAsMessageSet()
                                          memoizedSerializedSize = size
                                          return size
                                        }
                                        class func parseFromData(data:[Byte]) -> AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromData(data).build()
                                        }
                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream) -> AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromInputStream(input).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromCodedInputStream(input).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSet {
                                          return AggregateMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func builder() -> AggregateMessageSetBuilder {
                                          return AggregateMessageSetBuilder()
                                        }
                                        class func builderWithPrototype(prototype:AggregateMessageSet) -> AggregateMessageSetBuilder {
                                          return AggregateMessageSet.builder().mergeFrom(prototype)
                                        }
                                        func builder() -> AggregateMessageSetBuilder {
                                          return AggregateMessageSet.builder()
                                        }
                                        func toBuilder() -> AggregateMessageSetBuilder {
                                          return AggregateMessageSet.builderWithPrototype(self)
                                        }
                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                          writeExtensionDescription(&output, startInclusive:Int32(4), endExclusive:Int32(2147483647), indent:indent)
                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                        }
                                        override var hashValue:Int {
                                         get {
                                              var hashCode:Int = 7
                                              hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4), endExclusive:Int32(2147483647)))
                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                              return hashCode
                                            }
                                          }
                                        }

                                        class AggregateMessageSetBuilder : ExtendableMessageBuilder {
                                        private var result:AggregateMessageSet

                                        override init () {
                                           result = AggregateMessageSet()
                                        }
                                        override var internalGetResult:ExtendableMessage {
                                             get {
                                                 return result
                                             }
                                        }
                                        override func clear() -> AggregateMessageSetBuilder {
                                          result = AggregateMessageSet()
                                          return self
                                        }
                                        override func clone() -> AggregateMessageSetBuilder {
                                          return AggregateMessageSet.builderWithPrototype(result)
                                        }
                                        func build() -> AggregateMessageSet {
                                             checkInitialized()
                                             return buildPartial()
                                        }
                                        func buildPartial() -> AggregateMessageSet {
                                          var returnMe:AggregateMessageSet = result
                                          return returnMe
                                        }
                                        func mergeFrom(other:AggregateMessageSet) -> AggregateMessageSetBuilder {
                                          if (other == AggregateMessageSet()) {
                                            return self
                                          }
                                          mergeExtensionFields(other)
                                            mergeUnknownFields(other.unknownFields)
                                          return self
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageSetBuilder {
                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetBuilder {
                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                          while (true) {
                                            var tag:Int32 = input.readTag()
                                              if tag == 0 {
                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                   return self}
                                              else {
                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                        unknownFields = unknownFieldsBuilder.build()
                                                        return self
                                                    }
                                              }
                                              }
                                           }
                                        }

                                        func == (lhs: AggregateMessageSetElement, rhs: AggregateMessageSetElement) -> Bool {
                                              if (lhs === rhs) {
                                                return true
                                              }
                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                              fieldCheck = fieldCheck && (lhs.hasS == rhs.hasS) && (!lhs.hasS || lhs.s == rhs.s)
                                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                        }
                                        class AggregateMessageSetElement : GeneratedMessage {
                                          private(set) var hasS:Bool = false
                                          private(set) var s:String = ""

                                          var messageSetExtension:ExtensionField {
                                               get {
                                                   return AggregateMessageSetElement_messageSetExtension
                                               }
                                          }
                                          override init() {
                                               super.init()
                                          }
                                          override func isInitialized() -> Bool {
                                            return true
                                          }
                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                            if hasS {
                                              output.writeString(1, value:s)
                                            }
                                            unknownFields.writeToCodedOutputStream(output)
                                          }
                                          override func serializedSize() -> Int32 {
                                            var size:Int32 = memoizedSerializedSize
                                            if size != -1 {
                                              return size
                                            }

                                            size = 0
                                            if hasS {
                                              size += WireFormat.computeStringSize(1, value:s)
                                            }
                                            size += unknownFields.serializedSize()
                                            memoizedSerializedSize = size
                                            return size
                                          }
                                          class func parseFromData(data:[Byte]) -> AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromData(data).build()
                                          }
                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func parseFromInputStream(input:NSInputStream) -> AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromInputStream(input).build()
                                          }
                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromCodedInputStream(input).build()
                                          }
                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElement {
                                            return AggregateMessageSetElement.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func builder() -> AggregateMessageSetElementBuilder {
                                            return AggregateMessageSetElementBuilder()
                                          }
                                          class func builderWithPrototype(prototype:AggregateMessageSetElement) -> AggregateMessageSetElementBuilder {
                                            return AggregateMessageSetElement.builder().mergeFrom(prototype)
                                          }
                                          func builder() -> AggregateMessageSetElementBuilder {
                                            return AggregateMessageSetElement.builder()
                                          }
                                          func toBuilder() -> AggregateMessageSetElementBuilder {
                                            return AggregateMessageSetElement.builderWithPrototype(self)
                                          }
                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                            if hasS {
                                              output += "\(indent) s: \(s) \n"
                                            }
                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                          }
                                          override var hashValue:Int {
                                           get {
                                                var hashCode:Int = 7
                                                if hasS {
                                                   hashCode = (hashCode &* 31) &+ s.hashValue
                                                }
                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                return hashCode
                                              }
                                            }
                                          }

                                          class AggregateMessageSetElementBuilder : GeneratedMessageBuilder {
                                          private var result:AggregateMessageSetElement

                                          override init () {
                                             result = AggregateMessageSetElement()
                                          }
                                          var hasS:Bool {
                                               get {
                                                    return result.hasS
                                               }
                                          }
                                          var s:String {
                                               get {
                                                    return result.s
                                               }
                                               set (value) {
                                                   result.hasS = true
                                                   result.s = value
                                               }
                                          }
                                          func clearS() -> AggregateMessageSetElementBuilder{
                                               result.hasS = false
                                               result.s = ""
                                               return self
                                          }
                                          override var internalGetResult:GeneratedMessage {
                                               get {
                                                  return result
                                               }
                                          }
                                          override func clear() -> AggregateMessageSetElementBuilder {
                                            result = AggregateMessageSetElement()
                                            return self
                                          }
                                          override func clone() -> AggregateMessageSetElementBuilder {
                                            return AggregateMessageSetElement.builderWithPrototype(result)
                                          }
                                          func build() -> AggregateMessageSetElement {
                                               checkInitialized()
                                               return buildPartial()
                                          }
                                          func buildPartial() -> AggregateMessageSetElement {
                                            var returnMe:AggregateMessageSetElement = result
                                            return returnMe
                                          }
                                          func mergeFrom(other:AggregateMessageSetElement) -> AggregateMessageSetElementBuilder {
                                            if (other == AggregateMessageSetElement()) {
                                              return self
                                            }
                                            if other.hasS {
                                                 s = other.s
                                            }
                                              mergeUnknownFields(other.unknownFields)
                                            return self
                                          }
                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageSetElementBuilder {
                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                          }
                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElementBuilder {
                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                            while (true) {
                                              var tag:Int32 = input.readTag()
                                                if tag == 0 {
                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                     return self}
                                                else if tag == 10 {
                                                  s = input.readString()
                                                }
                                                else {
                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                          unknownFields = unknownFieldsBuilder.build()
                                                          return self
                                                      }
                                                }
                                                }
                                             }
                                          }

                                          func == (lhs: Aggregate, rhs: Aggregate) -> Bool {
                                                if (lhs === rhs) {
                                                  return true
                                                }
                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
                                                 fieldCheck = fieldCheck && (lhs.hasS == rhs.hasS) && (!lhs.hasS || lhs.s == rhs.s)
                                                 fieldCheck = fieldCheck && (lhs.hasSub == rhs.hasSub) && (!lhs.hasSub || lhs.sub == rhs.sub)
                                                 fieldCheck = fieldCheck && (lhs.hasFile == rhs.hasFile) && (!lhs.hasFile || lhs.file == rhs.file)
                                                 fieldCheck = fieldCheck && (lhs.hasMset == rhs.hasMset) && (!lhs.hasMset || lhs.mset == rhs.mset)
                                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                          }
                                          class Aggregate : GeneratedMessage {
                                            private(set) var hasI:Bool = false
                                            private(set) var i:Int32 = 0

                                            private(set) var hasS:Bool = false
                                            private(set) var s:String = ""

                                            private(set) var hasSub:Bool = false
                                            private(set) var sub:Aggregate = Aggregate()
                                            private(set) var hasFile:Bool = false
                                            private(set) var file:PBFileOptions = PBFileOptions()
                                            private(set) var hasMset:Bool = false
                                            private(set) var mset:AggregateMessageSet = AggregateMessageSet()
                                            var nested:ExtensionField {
                                                 get {
                                                     return Aggregate_nested
                                                 }
                                            }
                                            override init() {
                                                 super.init()
                                            }
                                            override func isInitialized() -> Bool {
                                              if hasSub {
                                                if !sub.isInitialized() {
                                                  return false
                                                }
                                              }
                                              if hasFile {
                                                if !file.isInitialized() {
                                                  return false
                                                }
                                              }
                                              if hasMset {
                                                if !mset.isInitialized() {
                                                  return false
                                                }
                                              }
                                              return true
                                            }
                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                              if hasI {
                                                output.writeInt32(1, value:i)
                                              }
                                              if hasS {
                                                output.writeString(2, value:s)
                                              }
                                              if hasSub {
                                                output.writeMessage(3, value:sub)
                                              }
                                              if hasFile {
                                                output.writeMessage(4, value:file)
                                              }
                                              if hasMset {
                                                output.writeMessage(5, value:mset)
                                              }
                                              unknownFields.writeToCodedOutputStream(output)
                                            }
                                            override func serializedSize() -> Int32 {
                                              var size:Int32 = memoizedSerializedSize
                                              if size != -1 {
                                                return size
                                              }

                                              size = 0
                                              if hasI {
                                                size += WireFormat.computeInt32Size(1, value:i)
                                              }
                                              if hasS {
                                                size += WireFormat.computeStringSize(2, value:s)
                                              }
                                              if hasSub {
                                                size += WireFormat.computeMessageSize(3, value:sub)
                                              }
                                              if hasFile {
                                                size += WireFormat.computeMessageSize(4, value:file)
                                              }
                                              if hasMset {
                                                size += WireFormat.computeMessageSize(5, value:mset)
                                              }
                                              size += unknownFields.serializedSize()
                                              memoizedSerializedSize = size
                                              return size
                                            }
                                            class func parseFromData(data:[Byte]) -> Aggregate {
                                              return Aggregate.builder().mergeFromData(data).build()
                                            }
                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Aggregate {
                                              return Aggregate.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func parseFromInputStream(input:NSInputStream) -> Aggregate {
                                              return Aggregate.builder().mergeFromInputStream(input).build()
                                            }
                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Aggregate {
                                              return Aggregate.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func parseFromCodedInputStream(input:CodedInputStream) -> Aggregate {
                                              return Aggregate.builder().mergeFromCodedInputStream(input).build()
                                            }
                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Aggregate {
                                              return Aggregate.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func builder() -> AggregateBuilder {
                                              return AggregateBuilder()
                                            }
                                            class func builderWithPrototype(prototype:Aggregate) -> AggregateBuilder {
                                              return Aggregate.builder().mergeFrom(prototype)
                                            }
                                            func builder() -> AggregateBuilder {
                                              return Aggregate.builder()
                                            }
                                            func toBuilder() -> AggregateBuilder {
                                              return Aggregate.builderWithPrototype(self)
                                            }
                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                              if hasI {
                                                output += "\(indent) i: \(i) \n"
                                              }
                                              if hasS {
                                                output += "\(indent) s: \(s) \n"
                                              }
                                              if hasSub {
                                                output += "\(indent) sub {\n"
                                                sub.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                output += "\(indent) }\n"
                                              }
                                              if hasFile {
                                                output += "\(indent) file {\n"
                                                file.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                output += "\(indent) }\n"
                                              }
                                              if hasMset {
                                                output += "\(indent) mset {\n"
                                                mset.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                output += "\(indent) }\n"
                                              }
                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                            }
                                            override var hashValue:Int {
                                             get {
                                                  var hashCode:Int = 7
                                                  if hasI {
                                                     hashCode = (hashCode &* 31) &+ i.hashValue
                                                  }
                                                  if hasS {
                                                     hashCode = (hashCode &* 31) &+ s.hashValue
                                                  }
                                                  if hasSub {
                                                    hashCode = (hashCode &* 31) &+ sub.hashValue
                                                  }
                                                  if hasFile {
                                                    hashCode = (hashCode &* 31) &+ file.hashValue
                                                  }
                                                  if hasMset {
                                                    hashCode = (hashCode &* 31) &+ mset.hashValue
                                                  }
                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                  return hashCode
                                                }
                                              }
                                            }

                                            class AggregateBuilder : GeneratedMessageBuilder {
                                            private var result:Aggregate

                                            override init () {
                                               result = Aggregate()
                                            }
                                            var hasI:Bool {
                                                 get {
                                                      return result.hasI
                                                 }
                                            }
                                            var i:Int32 {
                                                 get {
                                                      return result.i
                                                 }
                                                 set (value) {
                                                     result.hasI = true
                                                     result.i = value
                                                 }
                                            }
                                            func clearI() -> AggregateBuilder{
                                                 result.hasI = false
                                                 result.i = 0
                                                 return self
                                            }
                                            var hasS:Bool {
                                                 get {
                                                      return result.hasS
                                                 }
                                            }
                                            var s:String {
                                                 get {
                                                      return result.s
                                                 }
                                                 set (value) {
                                                     result.hasS = true
                                                     result.s = value
                                                 }
                                            }
                                            func clearS() -> AggregateBuilder{
                                                 result.hasS = false
                                                 result.s = ""
                                                 return self
                                            }
                                            var hasSub:Bool {
                                                 get {
                                                     return result.hasSub
                                                 }
                                            }
                                            var sub:Aggregate {
                                                 get {
                                                     return result.sub     }
                                                 set (value) {
                                                     result.hasSub = true
                                                     result.sub = value
                                                 }
                                            }
                                            func setSubBuilder(builderForValue:AggregateBuilder) -> AggregateBuilder {
                                              sub = builderForValue.build()
                                              return self
                                            }
                                            func mergeSub(value:Aggregate) -> AggregateBuilder {
                                              if (result.hasSub && result.sub != Aggregate()) {
                                                result.sub = Aggregate.builderWithPrototype(result.sub).mergeFrom(value).buildPartial()
                                              } else {
                                                result.sub = value
                                              }
                                              result.hasSub = true
                                              return self
                                            }
                                            func clearSub() -> AggregateBuilder {
                                              result.hasSub = false
                                              result.sub = Aggregate()
                                              return self
                                            }
                                            var hasFile:Bool {
                                                 get {
                                                     return result.hasFile
                                                 }
                                            }
                                            var file:PBFileOptions {
                                                 get {
                                                     return result.file     }
                                                 set (value) {
                                                     result.hasFile = true
                                                     result.file = value
                                                 }
                                            }
                                            func setFileBuilder(builderForValue:PBFileOptionsBuilder) -> AggregateBuilder {
                                              file = builderForValue.build()
                                              return self
                                            }
                                            func mergeFile(value:PBFileOptions) -> AggregateBuilder {
                                              if (result.hasFile && result.file != PBFileOptions()) {
                                                result.file = PBFileOptions.builderWithPrototype(result.file).mergeFrom(value).buildPartial()
                                              } else {
                                                result.file = value
                                              }
                                              result.hasFile = true
                                              return self
                                            }
                                            func clearFile() -> AggregateBuilder {
                                              result.hasFile = false
                                              result.file = PBFileOptions()
                                              return self
                                            }
                                            var hasMset:Bool {
                                                 get {
                                                     return result.hasMset
                                                 }
                                            }
                                            var mset:AggregateMessageSet {
                                                 get {
                                                     return result.mset     }
                                                 set (value) {
                                                     result.hasMset = true
                                                     result.mset = value
                                                 }
                                            }
                                            func setMsetBuilder(builderForValue:AggregateMessageSetBuilder) -> AggregateBuilder {
                                              mset = builderForValue.build()
                                              return self
                                            }
                                            func mergeMset(value:AggregateMessageSet) -> AggregateBuilder {
                                              if (result.hasMset && result.mset != AggregateMessageSet()) {
                                                result.mset = AggregateMessageSet.builderWithPrototype(result.mset).mergeFrom(value).buildPartial()
                                              } else {
                                                result.mset = value
                                              }
                                              result.hasMset = true
                                              return self
                                            }
                                            func clearMset() -> AggregateBuilder {
                                              result.hasMset = false
                                              result.mset = AggregateMessageSet()
                                              return self
                                            }
                                            override var internalGetResult:GeneratedMessage {
                                                 get {
                                                    return result
                                                 }
                                            }
                                            override func clear() -> AggregateBuilder {
                                              result = Aggregate()
                                              return self
                                            }
                                            override func clone() -> AggregateBuilder {
                                              return Aggregate.builderWithPrototype(result)
                                            }
                                            func build() -> Aggregate {
                                                 checkInitialized()
                                                 return buildPartial()
                                            }
                                            func buildPartial() -> Aggregate {
                                              var returnMe:Aggregate = result
                                              return returnMe
                                            }
                                            func mergeFrom(other:Aggregate) -> AggregateBuilder {
                                              if (other == Aggregate()) {
                                                return self
                                              }
                                              if other.hasI {
                                                   i = other.i
                                              }
                                              if other.hasS {
                                                   s = other.s
                                              }
                                              if (other.hasSub) {
                                                  mergeSub(other.sub)
                                              }
                                              if (other.hasFile) {
                                                  mergeFile(other.file)
                                              }
                                              if (other.hasMset) {
                                                  mergeMset(other.mset)
                                              }
                                                mergeUnknownFields(other.unknownFields)
                                              return self
                                            }
                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateBuilder {
                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                            }
                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateBuilder {
                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                              while (true) {
                                                var tag:Int32 = input.readTag()
                                                  if tag == 0 {
                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                       return self}
                                                  else if tag == 8 {
                                                    i = input.readInt32()
                                                  }
                                                  else if tag == 18 {
                                                    s = input.readString()
                                                  }
                                                  else if tag == 26 {
                                                    var subBuilder:AggregateBuilder = Aggregate.builder()
                                                    if hasSub {
                                                      subBuilder.mergeFrom(sub)
                                                    }
                                                    input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                    sub = subBuilder.buildPartial()
                                                  }
                                                  else if tag == 34 {
                                                    var subBuilder:PBFileOptionsBuilder = PBFileOptions.builder()
                                                    if hasFile {
                                                      subBuilder.mergeFrom(file)
                                                    }
                                                    input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                    file = subBuilder.buildPartial()
                                                  }
                                                  else if tag == 42 {
                                                    var subBuilder:AggregateMessageSetBuilder = AggregateMessageSet.builder()
                                                    if hasMset {
                                                      subBuilder.mergeFrom(mset)
                                                    }
                                                    input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                    mset = subBuilder.buildPartial()
                                                  }
                                                  else {
                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                            unknownFields = unknownFieldsBuilder.build()
                                                            return self
                                                        }
                                                  }
                                                  }
                                               }
                                            }

                                            func == (lhs: AggregateMessage, rhs: AggregateMessage) -> Bool {
                                                  if (lhs === rhs) {
                                                    return true
                                                  }
                                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                  fieldCheck = fieldCheck && (lhs.hasFieldname == rhs.hasFieldname) && (!lhs.hasFieldname || lhs.fieldname == rhs.fieldname)
                                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                            }
                                            class AggregateMessage : GeneratedMessage {
                                              private(set) var hasFieldname:Bool = false
                                              private(set) var fieldname:Int32 = 0

                                              override init() {
                                                   super.init()
                                              }
                                              override func isInitialized() -> Bool {
                                                return true
                                              }
                                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                if hasFieldname {
                                                  output.writeInt32(1, value:fieldname)
                                                }
                                                unknownFields.writeToCodedOutputStream(output)
                                              }
                                              override func serializedSize() -> Int32 {
                                                var size:Int32 = memoizedSerializedSize
                                                if size != -1 {
                                                  return size
                                                }

                                                size = 0
                                                if hasFieldname {
                                                  size += WireFormat.computeInt32Size(1, value:fieldname)
                                                }
                                                size += unknownFields.serializedSize()
                                                memoizedSerializedSize = size
                                                return size
                                              }
                                              class func parseFromData(data:[Byte]) -> AggregateMessage {
                                                return AggregateMessage.builder().mergeFromData(data).build()
                                              }
                                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessage {
                                                return AggregateMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func parseFromInputStream(input:NSInputStream) -> AggregateMessage {
                                                return AggregateMessage.builder().mergeFromInputStream(input).build()
                                              }
                                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessage {
                                                return AggregateMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessage {
                                                return AggregateMessage.builder().mergeFromCodedInputStream(input).build()
                                              }
                                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessage {
                                                return AggregateMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func builder() -> AggregateMessageBuilder {
                                                return AggregateMessageBuilder()
                                              }
                                              class func builderWithPrototype(prototype:AggregateMessage) -> AggregateMessageBuilder {
                                                return AggregateMessage.builder().mergeFrom(prototype)
                                              }
                                              func builder() -> AggregateMessageBuilder {
                                                return AggregateMessage.builder()
                                              }
                                              func toBuilder() -> AggregateMessageBuilder {
                                                return AggregateMessage.builderWithPrototype(self)
                                              }
                                              override func writeDescriptionTo(inout output:String, indent:String) {
                                                if hasFieldname {
                                                  output += "\(indent) fieldname: \(fieldname) \n"
                                                }
                                                unknownFields.writeDescriptionTo(&output, indent:indent)
                                              }
                                              override var hashValue:Int {
                                               get {
                                                    var hashCode:Int = 7
                                                    if hasFieldname {
                                                       hashCode = (hashCode &* 31) &+ fieldname.hashValue
                                                    }
                                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                    return hashCode
                                                  }
                                                }
                                              }

                                              class AggregateMessageBuilder : GeneratedMessageBuilder {
                                              private var result:AggregateMessage

                                              override init () {
                                                 result = AggregateMessage()
                                              }
                                              var hasFieldname:Bool {
                                                   get {
                                                        return result.hasFieldname
                                                   }
                                              }
                                              var fieldname:Int32 {
                                                   get {
                                                        return result.fieldname
                                                   }
                                                   set (value) {
                                                       result.hasFieldname = true
                                                       result.fieldname = value
                                                   }
                                              }
                                              func clearFieldname() -> AggregateMessageBuilder{
                                                   result.hasFieldname = false
                                                   result.fieldname = 0
                                                   return self
                                              }
                                              override var internalGetResult:GeneratedMessage {
                                                   get {
                                                      return result
                                                   }
                                              }
                                              override func clear() -> AggregateMessageBuilder {
                                                result = AggregateMessage()
                                                return self
                                              }
                                              override func clone() -> AggregateMessageBuilder {
                                                return AggregateMessage.builderWithPrototype(result)
                                              }
                                              func build() -> AggregateMessage {
                                                   checkInitialized()
                                                   return buildPartial()
                                              }
                                              func buildPartial() -> AggregateMessage {
                                                var returnMe:AggregateMessage = result
                                                return returnMe
                                              }
                                              func mergeFrom(other:AggregateMessage) -> AggregateMessageBuilder {
                                                if (other == AggregateMessage()) {
                                                  return self
                                                }
                                                if other.hasFieldname {
                                                     fieldname = other.fieldname
                                                }
                                                  mergeUnknownFields(other.unknownFields)
                                                return self
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageBuilder {
                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageBuilder {
                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                while (true) {
                                                  var tag:Int32 = input.readTag()
                                                    if tag == 0 {
                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                         return self}
                                                    else if tag == 8 {
                                                      fieldname = input.readInt32()
                                                    }
                                                    else {
                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                              unknownFields = unknownFieldsBuilder.build()
                                                              return self
                                                          }
                                                    }
                                                    }
                                                 }
                                              }

                                              func == (lhs: NestedOptionType, rhs: NestedOptionType) -> Bool {
                                                    if (lhs === rhs) {
                                                      return true
                                                    }
                                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                    return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                              }
                                              class NestedOptionType : GeneratedMessage {
                                                var nestedExtension:ExtensionField {
                                                     get {
                                                         return NestedOptionType_nestedExtension
                                                     }
                                                }
                                                override init() {
                                                     super.init()
                                                }
                                                override func isInitialized() -> Bool {
                                                  return true
                                                }
                                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                  unknownFields.writeToCodedOutputStream(output)
                                                }
                                                override func serializedSize() -> Int32 {
                                                  var size:Int32 = memoizedSerializedSize
                                                  if size != -1 {
                                                    return size
                                                  }

                                                  size = 0
                                                  size += unknownFields.serializedSize()
                                                  memoizedSerializedSize = size
                                                  return size
                                                }
                                                class func parseFromData(data:[Byte]) -> NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromData(data).build()
                                                }
                                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func parseFromInputStream(input:NSInputStream) -> NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromInputStream(input).build()
                                                }
                                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func parseFromCodedInputStream(input:CodedInputStream) -> NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromCodedInputStream(input).build()
                                                }
                                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionType {
                                                  return NestedOptionType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func builder() -> NestedOptionTypeBuilder {
                                                  return NestedOptionTypeBuilder()
                                                }
                                                class func builderWithPrototype(prototype:NestedOptionType) -> NestedOptionTypeBuilder {
                                                  return NestedOptionType.builder().mergeFrom(prototype)
                                                }
                                                func builder() -> NestedOptionTypeBuilder {
                                                  return NestedOptionType.builder()
                                                }
                                                func toBuilder() -> NestedOptionTypeBuilder {
                                                  return NestedOptionType.builderWithPrototype(self)
                                                }
                                                override func writeDescriptionTo(inout output:String, indent:String) {
                                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                                }
                                                override var hashValue:Int {
                                                 get {
                                                      var hashCode:Int = 7
                                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                      return hashCode
                                                    }
                                                  }
                                                }

                                                enum NestedOptionTypeNestedEnum:Int32 {
                                                  case NestedOptionTypeNestedEnumNestedEnumValue = 1

                                                  static func NestedOptionTypeNestedEnumIsValidValue(value:NestedOptionTypeNestedEnum) ->Bool {
                                                    switch value {
                                                      case .NestedOptionTypeNestedEnumNestedEnumValue:
                                                        return true;
                                                      default:
                                                        return false;
                                                    }
                                                  }
                                                }

                                                func == (lhs: NestedOptionTypeNestedMessage, rhs: NestedOptionTypeNestedMessage) -> Bool {
                                                      if (lhs === rhs) {
                                                        return true
                                                      }
                                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                      fieldCheck = fieldCheck && (lhs.hasNestedField == rhs.hasNestedField) && (!lhs.hasNestedField || lhs.nestedField == rhs.nestedField)
                                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                }
                                                class NestedOptionTypeNestedMessage : GeneratedMessage {
                                                  private(set) var hasNestedField:Bool = false
                                                  private(set) var nestedField:Int32 = 0

                                                  override init() {
                                                       super.init()
                                                  }
                                                  override func isInitialized() -> Bool {
                                                    return true
                                                  }
                                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                    if hasNestedField {
                                                      output.writeInt32(1, value:nestedField)
                                                    }
                                                    unknownFields.writeToCodedOutputStream(output)
                                                  }
                                                  override func serializedSize() -> Int32 {
                                                    var size:Int32 = memoizedSerializedSize
                                                    if size != -1 {
                                                      return size
                                                    }

                                                    size = 0
                                                    if hasNestedField {
                                                      size += WireFormat.computeInt32Size(1, value:nestedField)
                                                    }
                                                    size += unknownFields.serializedSize()
                                                    memoizedSerializedSize = size
                                                    return size
                                                  }
                                                  class func parseFromData(data:[Byte]) -> NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromData(data).build()
                                                  }
                                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func parseFromInputStream(input:NSInputStream) -> NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromInputStream(input).build()
                                                  }
                                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func parseFromCodedInputStream(input:CodedInputStream) -> NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromCodedInputStream(input).build()
                                                  }
                                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionTypeNestedMessage {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func builder() -> NestedOptionTypeNestedMessageBuilder {
                                                    return NestedOptionTypeNestedMessageBuilder()
                                                  }
                                                  class func builderWithPrototype(prototype:NestedOptionTypeNestedMessage) -> NestedOptionTypeNestedMessageBuilder {
                                                    return NestedOptionTypeNestedMessage.builder().mergeFrom(prototype)
                                                  }
                                                  func builder() -> NestedOptionTypeNestedMessageBuilder {
                                                    return NestedOptionTypeNestedMessage.builder()
                                                  }
                                                  func toBuilder() -> NestedOptionTypeNestedMessageBuilder {
                                                    return NestedOptionTypeNestedMessage.builderWithPrototype(self)
                                                  }
                                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                                    if hasNestedField {
                                                      output += "\(indent) nestedField: \(nestedField) \n"
                                                    }
                                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                                  }
                                                  override var hashValue:Int {
                                                   get {
                                                        var hashCode:Int = 7
                                                        if hasNestedField {
                                                           hashCode = (hashCode &* 31) &+ nestedField.hashValue
                                                        }
                                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                        return hashCode
                                                      }
                                                    }
                                                  }

                                                  class NestedOptionTypeNestedMessageBuilder : GeneratedMessageBuilder {
                                                  private var result:NestedOptionTypeNestedMessage

                                                  override init () {
                                                     result = NestedOptionTypeNestedMessage()
                                                  }
                                                  var hasNestedField:Bool {
                                                       get {
                                                            return result.hasNestedField
                                                       }
                                                  }
                                                  var nestedField:Int32 {
                                                       get {
                                                            return result.nestedField
                                                       }
                                                       set (value) {
                                                           result.hasNestedField = true
                                                           result.nestedField = value
                                                       }
                                                  }
                                                  func clearNestedField() -> NestedOptionTypeNestedMessageBuilder{
                                                       result.hasNestedField = false
                                                       result.nestedField = 0
                                                       return self
                                                  }
                                                  override var internalGetResult:GeneratedMessage {
                                                       get {
                                                          return result
                                                       }
                                                  }
                                                  override func clear() -> NestedOptionTypeNestedMessageBuilder {
                                                    result = NestedOptionTypeNestedMessage()
                                                    return self
                                                  }
                                                  override func clone() -> NestedOptionTypeNestedMessageBuilder {
                                                    return NestedOptionTypeNestedMessage.builderWithPrototype(result)
                                                  }
                                                  func build() -> NestedOptionTypeNestedMessage {
                                                       checkInitialized()
                                                       return buildPartial()
                                                  }
                                                  func buildPartial() -> NestedOptionTypeNestedMessage {
                                                    var returnMe:NestedOptionTypeNestedMessage = result
                                                    return returnMe
                                                  }
                                                  func mergeFrom(other:NestedOptionTypeNestedMessage) -> NestedOptionTypeNestedMessageBuilder {
                                                    if (other == NestedOptionTypeNestedMessage()) {
                                                      return self
                                                    }
                                                    if other.hasNestedField {
                                                         nestedField = other.nestedField
                                                    }
                                                      mergeUnknownFields(other.unknownFields)
                                                    return self
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->NestedOptionTypeNestedMessageBuilder {
                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionTypeNestedMessageBuilder {
                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                    while (true) {
                                                      var tag:Int32 = input.readTag()
                                                        if tag == 0 {
                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                             return self}
                                                        else if tag == 8 {
                                                          nestedField = input.readInt32()
                                                        }
                                                        else {
                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                  return self
                                                              }
                                                        }
                                                        }
                                                     }
                                                  }

                                                  class NestedOptionTypeBuilder : GeneratedMessageBuilder {
                                                  private var result:NestedOptionType

                                                  override init () {
                                                     result = NestedOptionType()
                                                  }
                                                  override var internalGetResult:GeneratedMessage {
                                                       get {
                                                          return result
                                                       }
                                                  }
                                                  override func clear() -> NestedOptionTypeBuilder {
                                                    result = NestedOptionType()
                                                    return self
                                                  }
                                                  override func clone() -> NestedOptionTypeBuilder {
                                                    return NestedOptionType.builderWithPrototype(result)
                                                  }
                                                  func build() -> NestedOptionType {
                                                       checkInitialized()
                                                       return buildPartial()
                                                  }
                                                  func buildPartial() -> NestedOptionType {
                                                    var returnMe:NestedOptionType = result
                                                    return returnMe
                                                  }
                                                  func mergeFrom(other:NestedOptionType) -> NestedOptionTypeBuilder {
                                                    if (other == NestedOptionType()) {
                                                      return self
                                                    }
                                                      mergeUnknownFields(other.unknownFields)
                                                    return self
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->NestedOptionTypeBuilder {
                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionTypeBuilder {
                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                    while (true) {
                                                      var tag:Int32 = input.readTag()
                                                        if tag == 0 {
                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                             return self}
                                                        else {
                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                  return self
                                                              }
                                                        }
                                                        }
                                                     }
                                                  }


                                                  // @@protoc_insertion_point(global_scope)
