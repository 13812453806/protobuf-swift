// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestRoot {
    private var UnittestRoot_optionalInt32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalInt64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_optionalUint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalUint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_optionalSint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalSint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_optionalFixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalFixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_optionalSfixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalSfixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_optionalFloatExtension:ConcreteExtensionField<Float,TestAllExtensions>
    private var UnittestRoot_optionalDoubleExtension:ConcreteExtensionField<Double,TestAllExtensions>
    private var UnittestRoot_optionalBoolExtension:ConcreteExtensionField<Bool,TestAllExtensions>
    private var UnittestRoot_optionalStringExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_optionalBytesExtension:ConcreteExtensionField<[Byte],TestAllExtensions>
    private var UnittestRoot_optionalGroupExtension:ConcreteExtensionField<OptionalGroup_extension,TestAllExtensions>
    private var UnittestRoot_optionalNestedMessageExtension:ConcreteExtensionField<TestAllTypesNestedMessage,TestAllExtensions>
    private var UnittestRoot_optionalForeignMessageExtension:ConcreteExtensionField<ForeignMessage,TestAllExtensions>
    private var UnittestRoot_optionalImportMessageExtension:ConcreteExtensionField<ImportMessage,TestAllExtensions>
    private var UnittestRoot_optionalNestedEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalForeignEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalImportEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_optionalStringPieceExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_optionalCordExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_optionalPublicImportMessageExtension:ConcreteExtensionField<PublicImportMessage,TestAllExtensions>
    private var UnittestRoot_optionalLazyMessageExtension:ConcreteExtensionField<TestAllTypesNestedMessage,TestAllExtensions>
    private var UnittestRoot_repeatedInt32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedInt64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_repeatedUint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedUint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_repeatedSint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedSint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_repeatedFixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedFixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_repeatedSfixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedSfixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_repeatedFloatExtension:ConcreteExtensionField<Float,TestAllExtensions>
    private var UnittestRoot_repeatedDoubleExtension:ConcreteExtensionField<Double,TestAllExtensions>
    private var UnittestRoot_repeatedBoolExtension:ConcreteExtensionField<Bool,TestAllExtensions>
    private var UnittestRoot_repeatedStringExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_repeatedBytesExtension:ConcreteExtensionField<[Byte],TestAllExtensions>
    private var UnittestRoot_repeatedGroupExtension:ConcreteExtensionField<RepeatedGroup_extension,TestAllExtensions>
    private var UnittestRoot_repeatedNestedMessageExtension:ConcreteExtensionField<TestAllTypesNestedMessage,TestAllExtensions>
    private var UnittestRoot_repeatedForeignMessageExtension:ConcreteExtensionField<ForeignMessage,TestAllExtensions>
    private var UnittestRoot_repeatedImportMessageExtension:ConcreteExtensionField<ImportMessage,TestAllExtensions>
    private var UnittestRoot_repeatedNestedEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedForeignEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedImportEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_repeatedStringPieceExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_repeatedCordExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_repeatedLazyMessageExtension:ConcreteExtensionField<TestAllTypesNestedMessage,TestAllExtensions>
    private var UnittestRoot_defaultInt32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultInt64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_defaultUint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultUint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_defaultSint32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultSint64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_defaultFixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultFixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_defaultSfixed32Extension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultSfixed64Extension:ConcreteExtensionField<Int64,TestAllExtensions>
    private var UnittestRoot_defaultFloatExtension:ConcreteExtensionField<Float,TestAllExtensions>
    private var UnittestRoot_defaultDoubleExtension:ConcreteExtensionField<Double,TestAllExtensions>
    private var UnittestRoot_defaultBoolExtension:ConcreteExtensionField<Bool,TestAllExtensions>
    private var UnittestRoot_defaultStringExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_defaultBytesExtension:ConcreteExtensionField<[Byte],TestAllExtensions>
    private var UnittestRoot_defaultNestedEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultForeignEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultImportEnumExtension:ConcreteExtensionField<Int32,TestAllExtensions>
    private var UnittestRoot_defaultStringPieceExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_defaultCordExtension:ConcreteExtensionField<String,TestAllExtensions>
    private var UnittestRoot_myExtensionString:ConcreteExtensionField<String,TestFieldOrderings>
    private var UnittestRoot_myExtensionInt:ConcreteExtensionField<Int32,TestFieldOrderings>
    private var UnittestRoot_packedInt32Extension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var UnittestRoot_packedInt64Extension:ConcreteExtensionField<Int64,TestPackedExtensions>
    private var UnittestRoot_packedUint32Extension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var UnittestRoot_packedUint64Extension:ConcreteExtensionField<Int64,TestPackedExtensions>
    private var UnittestRoot_packedSint32Extension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var UnittestRoot_packedSint64Extension:ConcreteExtensionField<Int64,TestPackedExtensions>
    private var UnittestRoot_packedFixed32Extension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var UnittestRoot_packedFixed64Extension:ConcreteExtensionField<Int64,TestPackedExtensions>
    private var UnittestRoot_packedSfixed32Extension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var UnittestRoot_packedSfixed64Extension:ConcreteExtensionField<Int64,TestPackedExtensions>
    private var UnittestRoot_packedFloatExtension:ConcreteExtensionField<Float,TestPackedExtensions>
    private var UnittestRoot_packedDoubleExtension:ConcreteExtensionField<Double,TestPackedExtensions>
    private var UnittestRoot_packedBoolExtension:ConcreteExtensionField<Bool,TestPackedExtensions>
    private var UnittestRoot_packedEnumExtension:ConcreteExtensionField<Int32,TestPackedExtensions>
    private var TestNestedExtension_test:ConcreteExtensionField<String,TestAllExtensions>
    private var TestRequired_single:ConcreteExtensionField<TestRequired,TestAllExtensions>
    private var TestRequired_multi:ConcreteExtensionField<TestRequired,TestAllExtensions>
    private var TestParsingMerge_optionalExt:ConcreteExtensionField<TestAllTypes,TestParsingMerge>
    private var TestParsingMerge_repeatedExt:ConcreteExtensionField<TestAllTypes,TestParsingMerge>
    var extensionRegistry:ExtensionRegistry

    init() {
        UnittestRoot_optionalInt32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:1, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalInt64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:2, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalUint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:3, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalUint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:4, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalSint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:5, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalSint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:6, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalFixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:7, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalFixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:8, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalSfixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:9, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalSfixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:10, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalFloatExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:11, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalDoubleExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:12, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalBoolExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:13, defaultValue:false, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalStringExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:14, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalBytesExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:15, defaultValue:[Byte](), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalGroupExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeGroup, fieldNumber:16, defaultValue:OptionalGroup_extension(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalNestedMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:18, defaultValue:TestAllTypesNestedMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalForeignMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:19, defaultValue:ForeignMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalImportMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:20, defaultValue:ImportMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalNestedEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:21, defaultValue:TestAllTypesNestedEnumFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalForeignEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:22, defaultValue:ForeignEnumForeignFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalImportEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:23, defaultValue:ImportEnumImportFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalStringPieceExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:24, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalCordExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:25, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalPublicImportMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:26, defaultValue:PublicImportMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_optionalLazyMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:27, defaultValue:TestAllTypesNestedMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedInt32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:31, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedInt64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:32, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedUint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:33, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedUint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:34, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedSint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:35, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedSint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:36, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedFixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:37, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedFixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:38, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedSfixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:39, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedSfixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:40, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedFloatExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:41, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedDoubleExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:42, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedBoolExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:43, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedStringExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:44, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedBytesExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:45, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedGroupExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeGroup, fieldNumber:46, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedNestedMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:48, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedForeignMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:49, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedImportMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:50, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedNestedEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:51, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedForeignEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:52, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedImportEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:53, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedStringPieceExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:54, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedCordExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:55, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_repeatedLazyMessageExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:57, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultInt32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:61, defaultValue:41, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultInt64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:62, defaultValue:42, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultUint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:63, defaultValue:43, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultUint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:64, defaultValue:44, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultSint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:65, defaultValue:-45, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultSint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:66, defaultValue:46, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultFixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:67, defaultValue:47, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultFixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:68, defaultValue:48, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultSfixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:69, defaultValue:49, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultSfixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:70, defaultValue:-50, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultFloatExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:71, defaultValue:51.5, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultDoubleExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:72, defaultValue:52000, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultBoolExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:73, defaultValue:true, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultStringExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:74, defaultValue:"hello", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultBytesExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:75, defaultValue:([Byte]() + "world".utf8), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultNestedEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:81, defaultValue:TestAllTypesNestedEnumBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultForeignEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:82, defaultValue:ForeignEnumForeignBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultImportEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:83, defaultValue:ImportEnumImportBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultStringPieceExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:84, defaultValue:"abc", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_defaultCordExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:85, defaultValue:"123", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_myExtensionString = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:50, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_myExtensionInt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:5, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestRoot_packedInt32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:90, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedInt64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:91, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedUint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:92, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedUint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:93, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedSint32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:94, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedSint64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:95, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedFixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:96, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedFixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:97, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedSfixed32Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:98, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedSfixed64Extension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:99, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedFloatExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:100, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedDoubleExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:101, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedBoolExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:102, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestRoot_packedEnumExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:103, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        TestNestedExtension_test = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:1002, defaultValue:"test", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        TestRequired_single = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1000, defaultValue:TestRequired(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        TestRequired_multi = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1001, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        TestParsingMerge_optionalExt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1000, defaultValue:TestAllTypes(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        TestParsingMerge_repeatedExt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1001, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        UnittestImportRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(UnittestRoot_optionalInt32Extension)
      registry.addExtension(UnittestRoot_optionalInt64Extension)
      registry.addExtension(UnittestRoot_optionalUint32Extension)
      registry.addExtension(UnittestRoot_optionalUint64Extension)
      registry.addExtension(UnittestRoot_optionalSint32Extension)
      registry.addExtension(UnittestRoot_optionalSint64Extension)
      registry.addExtension(UnittestRoot_optionalFixed32Extension)
      registry.addExtension(UnittestRoot_optionalFixed64Extension)
      registry.addExtension(UnittestRoot_optionalSfixed32Extension)
      registry.addExtension(UnittestRoot_optionalSfixed64Extension)
      registry.addExtension(UnittestRoot_optionalFloatExtension)
      registry.addExtension(UnittestRoot_optionalDoubleExtension)
      registry.addExtension(UnittestRoot_optionalBoolExtension)
      registry.addExtension(UnittestRoot_optionalStringExtension)
      registry.addExtension(UnittestRoot_optionalBytesExtension)
      registry.addExtension(UnittestRoot_optionalGroupExtension)
      registry.addExtension(UnittestRoot_optionalNestedMessageExtension)
      registry.addExtension(UnittestRoot_optionalForeignMessageExtension)
      registry.addExtension(UnittestRoot_optionalImportMessageExtension)
      registry.addExtension(UnittestRoot_optionalNestedEnumExtension)
      registry.addExtension(UnittestRoot_optionalForeignEnumExtension)
      registry.addExtension(UnittestRoot_optionalImportEnumExtension)
      registry.addExtension(UnittestRoot_optionalStringPieceExtension)
      registry.addExtension(UnittestRoot_optionalCordExtension)
      registry.addExtension(UnittestRoot_optionalPublicImportMessageExtension)
      registry.addExtension(UnittestRoot_optionalLazyMessageExtension)
      registry.addExtension(UnittestRoot_repeatedInt32Extension)
      registry.addExtension(UnittestRoot_repeatedInt64Extension)
      registry.addExtension(UnittestRoot_repeatedUint32Extension)
      registry.addExtension(UnittestRoot_repeatedUint64Extension)
      registry.addExtension(UnittestRoot_repeatedSint32Extension)
      registry.addExtension(UnittestRoot_repeatedSint64Extension)
      registry.addExtension(UnittestRoot_repeatedFixed32Extension)
      registry.addExtension(UnittestRoot_repeatedFixed64Extension)
      registry.addExtension(UnittestRoot_repeatedSfixed32Extension)
      registry.addExtension(UnittestRoot_repeatedSfixed64Extension)
      registry.addExtension(UnittestRoot_repeatedFloatExtension)
      registry.addExtension(UnittestRoot_repeatedDoubleExtension)
      registry.addExtension(UnittestRoot_repeatedBoolExtension)
      registry.addExtension(UnittestRoot_repeatedStringExtension)
      registry.addExtension(UnittestRoot_repeatedBytesExtension)
      registry.addExtension(UnittestRoot_repeatedGroupExtension)
      registry.addExtension(UnittestRoot_repeatedNestedMessageExtension)
      registry.addExtension(UnittestRoot_repeatedForeignMessageExtension)
      registry.addExtension(UnittestRoot_repeatedImportMessageExtension)
      registry.addExtension(UnittestRoot_repeatedNestedEnumExtension)
      registry.addExtension(UnittestRoot_repeatedForeignEnumExtension)
      registry.addExtension(UnittestRoot_repeatedImportEnumExtension)
      registry.addExtension(UnittestRoot_repeatedStringPieceExtension)
      registry.addExtension(UnittestRoot_repeatedCordExtension)
      registry.addExtension(UnittestRoot_repeatedLazyMessageExtension)
      registry.addExtension(UnittestRoot_defaultInt32Extension)
      registry.addExtension(UnittestRoot_defaultInt64Extension)
      registry.addExtension(UnittestRoot_defaultUint32Extension)
      registry.addExtension(UnittestRoot_defaultUint64Extension)
      registry.addExtension(UnittestRoot_defaultSint32Extension)
      registry.addExtension(UnittestRoot_defaultSint64Extension)
      registry.addExtension(UnittestRoot_defaultFixed32Extension)
      registry.addExtension(UnittestRoot_defaultFixed64Extension)
      registry.addExtension(UnittestRoot_defaultSfixed32Extension)
      registry.addExtension(UnittestRoot_defaultSfixed64Extension)
      registry.addExtension(UnittestRoot_defaultFloatExtension)
      registry.addExtension(UnittestRoot_defaultDoubleExtension)
      registry.addExtension(UnittestRoot_defaultBoolExtension)
      registry.addExtension(UnittestRoot_defaultStringExtension)
      registry.addExtension(UnittestRoot_defaultBytesExtension)
      registry.addExtension(UnittestRoot_defaultNestedEnumExtension)
      registry.addExtension(UnittestRoot_defaultForeignEnumExtension)
      registry.addExtension(UnittestRoot_defaultImportEnumExtension)
      registry.addExtension(UnittestRoot_defaultStringPieceExtension)
      registry.addExtension(UnittestRoot_defaultCordExtension)
      registry.addExtension(UnittestRoot_myExtensionString)
      registry.addExtension(UnittestRoot_myExtensionInt)
      registry.addExtension(UnittestRoot_packedInt32Extension)
      registry.addExtension(UnittestRoot_packedInt64Extension)
      registry.addExtension(UnittestRoot_packedUint32Extension)
      registry.addExtension(UnittestRoot_packedUint64Extension)
      registry.addExtension(UnittestRoot_packedSint32Extension)
      registry.addExtension(UnittestRoot_packedSint64Extension)
      registry.addExtension(UnittestRoot_packedFixed32Extension)
      registry.addExtension(UnittestRoot_packedFixed64Extension)
      registry.addExtension(UnittestRoot_packedSfixed32Extension)
      registry.addExtension(UnittestRoot_packedSfixed64Extension)
      registry.addExtension(UnittestRoot_packedFloatExtension)
      registry.addExtension(UnittestRoot_packedDoubleExtension)
      registry.addExtension(UnittestRoot_packedBoolExtension)
      registry.addExtension(UnittestRoot_packedEnumExtension)
      registry.addExtension(TestNestedExtension_test)
      registry.addExtension(TestRequired_single)
      registry.addExtension(TestRequired_multi)
      registry.addExtension(TestParsingMerge_optionalExt)
      registry.addExtension(TestParsingMerge_repeatedExt)
    }
    var optionalInt32Extension:ExtensionField {
         get {
             return UnittestRoot_optionalInt32Extension
         }
    }
    var optionalInt64Extension:ExtensionField {
         get {
             return UnittestRoot_optionalInt64Extension
         }
    }
    var optionalUint32Extension:ExtensionField {
         get {
             return UnittestRoot_optionalUint32Extension
         }
    }
    var optionalUint64Extension:ExtensionField {
         get {
             return UnittestRoot_optionalUint64Extension
         }
    }
    var optionalSint32Extension:ExtensionField {
         get {
             return UnittestRoot_optionalSint32Extension
         }
    }
    var optionalSint64Extension:ExtensionField {
         get {
             return UnittestRoot_optionalSint64Extension
         }
    }
    var optionalFixed32Extension:ExtensionField {
         get {
             return UnittestRoot_optionalFixed32Extension
         }
    }
    var optionalFixed64Extension:ExtensionField {
         get {
             return UnittestRoot_optionalFixed64Extension
         }
    }
    var optionalSfixed32Extension:ExtensionField {
         get {
             return UnittestRoot_optionalSfixed32Extension
         }
    }
    var optionalSfixed64Extension:ExtensionField {
         get {
             return UnittestRoot_optionalSfixed64Extension
         }
    }
    var optionalFloatExtension:ExtensionField {
         get {
             return UnittestRoot_optionalFloatExtension
         }
    }
    var optionalDoubleExtension:ExtensionField {
         get {
             return UnittestRoot_optionalDoubleExtension
         }
    }
    var optionalBoolExtension:ExtensionField {
         get {
             return UnittestRoot_optionalBoolExtension
         }
    }
    var optionalStringExtension:ExtensionField {
         get {
             return UnittestRoot_optionalStringExtension
         }
    }
    var optionalBytesExtension:ExtensionField {
         get {
             return UnittestRoot_optionalBytesExtension
         }
    }
    var optionalGroupExtension:ExtensionField {
         get {
             return UnittestRoot_optionalGroupExtension
         }
    }
    var optionalNestedMessageExtension:ExtensionField {
         get {
             return UnittestRoot_optionalNestedMessageExtension
         }
    }
    var optionalForeignMessageExtension:ExtensionField {
         get {
             return UnittestRoot_optionalForeignMessageExtension
         }
    }
    var optionalImportMessageExtension:ExtensionField {
         get {
             return UnittestRoot_optionalImportMessageExtension
         }
    }
    var optionalNestedEnumExtension:ExtensionField {
         get {
             return UnittestRoot_optionalNestedEnumExtension
         }
    }
    var optionalForeignEnumExtension:ExtensionField {
         get {
             return UnittestRoot_optionalForeignEnumExtension
         }
    }
    var optionalImportEnumExtension:ExtensionField {
         get {
             return UnittestRoot_optionalImportEnumExtension
         }
    }
    var optionalStringPieceExtension:ExtensionField {
         get {
             return UnittestRoot_optionalStringPieceExtension
         }
    }
    var optionalCordExtension:ExtensionField {
         get {
             return UnittestRoot_optionalCordExtension
         }
    }
    var optionalPublicImportMessageExtension:ExtensionField {
         get {
             return UnittestRoot_optionalPublicImportMessageExtension
         }
    }
    var optionalLazyMessageExtension:ExtensionField {
         get {
             return UnittestRoot_optionalLazyMessageExtension
         }
    }
    var repeatedInt32Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedInt32Extension
         }
    }
    var repeatedInt64Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedInt64Extension
         }
    }
    var repeatedUint32Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedUint32Extension
         }
    }
    var repeatedUint64Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedUint64Extension
         }
    }
    var repeatedSint32Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedSint32Extension
         }
    }
    var repeatedSint64Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedSint64Extension
         }
    }
    var repeatedFixed32Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedFixed32Extension
         }
    }
    var repeatedFixed64Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedFixed64Extension
         }
    }
    var repeatedSfixed32Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedSfixed32Extension
         }
    }
    var repeatedSfixed64Extension:ExtensionField {
         get {
             return UnittestRoot_repeatedSfixed64Extension
         }
    }
    var repeatedFloatExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedFloatExtension
         }
    }
    var repeatedDoubleExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedDoubleExtension
         }
    }
    var repeatedBoolExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedBoolExtension
         }
    }
    var repeatedStringExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedStringExtension
         }
    }
    var repeatedBytesExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedBytesExtension
         }
    }
    var repeatedGroupExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedGroupExtension
         }
    }
    var repeatedNestedMessageExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedNestedMessageExtension
         }
    }
    var repeatedForeignMessageExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedForeignMessageExtension
         }
    }
    var repeatedImportMessageExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedImportMessageExtension
         }
    }
    var repeatedNestedEnumExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedNestedEnumExtension
         }
    }
    var repeatedForeignEnumExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedForeignEnumExtension
         }
    }
    var repeatedImportEnumExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedImportEnumExtension
         }
    }
    var repeatedStringPieceExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedStringPieceExtension
         }
    }
    var repeatedCordExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedCordExtension
         }
    }
    var repeatedLazyMessageExtension:ExtensionField {
         get {
             return UnittestRoot_repeatedLazyMessageExtension
         }
    }
    var defaultInt32Extension:ExtensionField {
         get {
             return UnittestRoot_defaultInt32Extension
         }
    }
    var defaultInt64Extension:ExtensionField {
         get {
             return UnittestRoot_defaultInt64Extension
         }
    }
    var defaultUint32Extension:ExtensionField {
         get {
             return UnittestRoot_defaultUint32Extension
         }
    }
    var defaultUint64Extension:ExtensionField {
         get {
             return UnittestRoot_defaultUint64Extension
         }
    }
    var defaultSint32Extension:ExtensionField {
         get {
             return UnittestRoot_defaultSint32Extension
         }
    }
    var defaultSint64Extension:ExtensionField {
         get {
             return UnittestRoot_defaultSint64Extension
         }
    }
    var defaultFixed32Extension:ExtensionField {
         get {
             return UnittestRoot_defaultFixed32Extension
         }
    }
    var defaultFixed64Extension:ExtensionField {
         get {
             return UnittestRoot_defaultFixed64Extension
         }
    }
    var defaultSfixed32Extension:ExtensionField {
         get {
             return UnittestRoot_defaultSfixed32Extension
         }
    }
    var defaultSfixed64Extension:ExtensionField {
         get {
             return UnittestRoot_defaultSfixed64Extension
         }
    }
    var defaultFloatExtension:ExtensionField {
         get {
             return UnittestRoot_defaultFloatExtension
         }
    }
    var defaultDoubleExtension:ExtensionField {
         get {
             return UnittestRoot_defaultDoubleExtension
         }
    }
    var defaultBoolExtension:ExtensionField {
         get {
             return UnittestRoot_defaultBoolExtension
         }
    }
    var defaultStringExtension:ExtensionField {
         get {
             return UnittestRoot_defaultStringExtension
         }
    }
    var defaultBytesExtension:ExtensionField {
         get {
             return UnittestRoot_defaultBytesExtension
         }
    }
    var defaultNestedEnumExtension:ExtensionField {
         get {
             return UnittestRoot_defaultNestedEnumExtension
         }
    }
    var defaultForeignEnumExtension:ExtensionField {
         get {
             return UnittestRoot_defaultForeignEnumExtension
         }
    }
    var defaultImportEnumExtension:ExtensionField {
         get {
             return UnittestRoot_defaultImportEnumExtension
         }
    }
    var defaultStringPieceExtension:ExtensionField {
         get {
             return UnittestRoot_defaultStringPieceExtension
         }
    }
    var defaultCordExtension:ExtensionField {
         get {
             return UnittestRoot_defaultCordExtension
         }
    }
    var myExtensionString:ExtensionField {
         get {
             return UnittestRoot_myExtensionString
         }
    }
    var myExtensionInt:ExtensionField {
         get {
             return UnittestRoot_myExtensionInt
         }
    }
    var packedInt32Extension:ExtensionField {
         get {
             return UnittestRoot_packedInt32Extension
         }
    }
    var packedInt64Extension:ExtensionField {
         get {
             return UnittestRoot_packedInt64Extension
         }
    }
    var packedUint32Extension:ExtensionField {
         get {
             return UnittestRoot_packedUint32Extension
         }
    }
    var packedUint64Extension:ExtensionField {
         get {
             return UnittestRoot_packedUint64Extension
         }
    }
    var packedSint32Extension:ExtensionField {
         get {
             return UnittestRoot_packedSint32Extension
         }
    }
    var packedSint64Extension:ExtensionField {
         get {
             return UnittestRoot_packedSint64Extension
         }
    }
    var packedFixed32Extension:ExtensionField {
         get {
             return UnittestRoot_packedFixed32Extension
         }
    }
    var packedFixed64Extension:ExtensionField {
         get {
             return UnittestRoot_packedFixed64Extension
         }
    }
    var packedSfixed32Extension:ExtensionField {
         get {
             return UnittestRoot_packedSfixed32Extension
         }
    }
    var packedSfixed64Extension:ExtensionField {
         get {
             return UnittestRoot_packedSfixed64Extension
         }
    }
    var packedFloatExtension:ExtensionField {
         get {
             return UnittestRoot_packedFloatExtension
         }
    }
    var packedDoubleExtension:ExtensionField {
         get {
             return UnittestRoot_packedDoubleExtension
         }
    }
    var packedBoolExtension:ExtensionField {
         get {
             return UnittestRoot_packedBoolExtension
         }
    }
    var packedEnumExtension:ExtensionField {
         get {
             return UnittestRoot_packedEnumExtension
         }
    }
    }

enum ForeignEnum:Int32 {
  case ForeignEnumForeignFoo = 4
  case ForeignEnumForeignBar = 5
  case ForeignEnumForeignBaz = 6

  static func ForeignEnumIsValidValue(value:ForeignEnum) ->Bool {
    switch value {
      case .ForeignEnumForeignFoo, .ForeignEnumForeignBar, .ForeignEnumForeignBaz:
        return true;
      default:
        return false;
    }
  }
}

enum TestEnumWithDupValue:Int32 {
  case TestEnumWithDupValueFoo1 = 1
  case TestEnumWithDupValueBar1 = 2
  case TestEnumWithDupValueBaz = 3

  static func TestEnumWithDupValueIsValidValue(value:TestEnumWithDupValue) ->Bool {
    switch value {
      case .TestEnumWithDupValueFoo1, .TestEnumWithDupValueBar1, .TestEnumWithDupValueBaz:
        return true;
      default:
        return false;
    }
  }
}

enum TestSparseEnum:Int32 {
  case TestSparseEnumSparseA = 123
  case TestSparseEnumSparseB = 62374
  case TestSparseEnumSparseC = 12589234
  case TestSparseEnumSparseD = -15
  case TestSparseEnumSparseE = -53452
  case TestSparseEnumSparseF = 0
  case TestSparseEnumSparseG = 2

  static func TestSparseEnumIsValidValue(value:TestSparseEnum) ->Bool {
    switch value {
      case .TestSparseEnumSparseA, .TestSparseEnumSparseB, .TestSparseEnumSparseC, .TestSparseEnumSparseD, .TestSparseEnumSparseE, .TestSparseEnumSparseF, .TestSparseEnumSparseG:
        return true;
      default:
        return false;
    }
  }
}

func == (lhs: TestAllTypes, rhs: TestAllTypes) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
       fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
       fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
       fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
       fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
       fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
       fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
       fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
       fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
       fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
       fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
       fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
       fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
       fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
       fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
       fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
       fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalImportMessage == rhs.hasOptionalImportMessage) && (!lhs.hasOptionalImportMessage || lhs.optionalImportMessage == rhs.optionalImportMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalImportEnum == rhs.hasOptionalImportEnum) && (!lhs.hasOptionalImportEnum || lhs.optionalImportEnum == rhs.optionalImportEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
       fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
       fieldCheck = fieldCheck && (lhs.hasOptionalPublicImportMessage == rhs.hasOptionalPublicImportMessage) && (!lhs.hasOptionalPublicImportMessage || lhs.optionalPublicImportMessage == rhs.optionalPublicImportMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
       fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
       fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
       fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
       fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
       fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
       fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
       fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
       fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
       fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
       fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
       fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
       fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
       fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
       fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
       fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
       fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
       fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
       fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
       fieldCheck = fieldCheck && (lhs.repeatedImportMessage == rhs.repeatedImportMessage)
       fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
       fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
       fieldCheck = fieldCheck && (lhs.repeatedImportEnum == rhs.repeatedImportEnum)
       fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
       fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
       fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
       fieldCheck = fieldCheck && (lhs.hasDefaultInt32 == rhs.hasDefaultInt32) && (!lhs.hasDefaultInt32 || lhs.defaultInt32 == rhs.defaultInt32)
       fieldCheck = fieldCheck && (lhs.hasDefaultInt64 == rhs.hasDefaultInt64) && (!lhs.hasDefaultInt64 || lhs.defaultInt64 == rhs.defaultInt64)
       fieldCheck = fieldCheck && (lhs.hasDefaultUint32 == rhs.hasDefaultUint32) && (!lhs.hasDefaultUint32 || lhs.defaultUint32 == rhs.defaultUint32)
       fieldCheck = fieldCheck && (lhs.hasDefaultUint64 == rhs.hasDefaultUint64) && (!lhs.hasDefaultUint64 || lhs.defaultUint64 == rhs.defaultUint64)
       fieldCheck = fieldCheck && (lhs.hasDefaultSint32 == rhs.hasDefaultSint32) && (!lhs.hasDefaultSint32 || lhs.defaultSint32 == rhs.defaultSint32)
       fieldCheck = fieldCheck && (lhs.hasDefaultSint64 == rhs.hasDefaultSint64) && (!lhs.hasDefaultSint64 || lhs.defaultSint64 == rhs.defaultSint64)
       fieldCheck = fieldCheck && (lhs.hasDefaultFixed32 == rhs.hasDefaultFixed32) && (!lhs.hasDefaultFixed32 || lhs.defaultFixed32 == rhs.defaultFixed32)
       fieldCheck = fieldCheck && (lhs.hasDefaultFixed64 == rhs.hasDefaultFixed64) && (!lhs.hasDefaultFixed64 || lhs.defaultFixed64 == rhs.defaultFixed64)
       fieldCheck = fieldCheck && (lhs.hasDefaultSfixed32 == rhs.hasDefaultSfixed32) && (!lhs.hasDefaultSfixed32 || lhs.defaultSfixed32 == rhs.defaultSfixed32)
       fieldCheck = fieldCheck && (lhs.hasDefaultSfixed64 == rhs.hasDefaultSfixed64) && (!lhs.hasDefaultSfixed64 || lhs.defaultSfixed64 == rhs.defaultSfixed64)
       fieldCheck = fieldCheck && (lhs.hasDefaultFloat == rhs.hasDefaultFloat) && (!lhs.hasDefaultFloat || lhs.defaultFloat == rhs.defaultFloat)
       fieldCheck = fieldCheck && (lhs.hasDefaultDouble == rhs.hasDefaultDouble) && (!lhs.hasDefaultDouble || lhs.defaultDouble == rhs.defaultDouble)
       fieldCheck = fieldCheck && (lhs.hasDefaultBool == rhs.hasDefaultBool) && (!lhs.hasDefaultBool || lhs.defaultBool == rhs.defaultBool)
       fieldCheck = fieldCheck && (lhs.hasDefaultString == rhs.hasDefaultString) && (!lhs.hasDefaultString || lhs.defaultString == rhs.defaultString)
       fieldCheck = fieldCheck && (lhs.hasDefaultBytes == rhs.hasDefaultBytes) && (!lhs.hasDefaultBytes || lhs.defaultBytes == rhs.defaultBytes)
       fieldCheck = fieldCheck && (lhs.hasDefaultNestedEnum == rhs.hasDefaultNestedEnum) && (!lhs.hasDefaultNestedEnum || lhs.defaultNestedEnum == rhs.defaultNestedEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultForeignEnum == rhs.hasDefaultForeignEnum) && (!lhs.hasDefaultForeignEnum || lhs.defaultForeignEnum == rhs.defaultForeignEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultImportEnum == rhs.hasDefaultImportEnum) && (!lhs.hasDefaultImportEnum || lhs.defaultImportEnum == rhs.defaultImportEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultStringPiece == rhs.hasDefaultStringPiece) && (!lhs.hasDefaultStringPiece || lhs.defaultStringPiece == rhs.defaultStringPiece)
       fieldCheck = fieldCheck && (lhs.hasDefaultCord == rhs.hasDefaultCord) && (!lhs.hasDefaultCord || lhs.defaultCord == rhs.defaultCord)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestAllTypes : GeneratedMessage {
  private(set) var hasOptionalInt32:Bool = false
  private(set) var optionalInt32:Int32 = 0

  private(set) var hasOptionalInt64:Bool = false
  private(set) var optionalInt64:Int64 = 0

  private(set) var hasOptionalUint32:Bool = false
  private(set) var optionalUint32:UInt32 = 0

  private(set) var hasOptionalUint64:Bool = false
  private(set) var optionalUint64:UInt64 = 0

  private(set) var hasOptionalSint32:Bool = false
  private(set) var optionalSint32:Int32 = 0

  private(set) var hasOptionalSint64:Bool = false
  private(set) var optionalSint64:Int64 = 0

  private(set) var hasOptionalFixed32:Bool = false
  private(set) var optionalFixed32:UInt32 = 0

  private(set) var hasOptionalFixed64:Bool = false
  private(set) var optionalFixed64:UInt64 = 0

  private(set) var hasOptionalSfixed32:Bool = false
  private(set) var optionalSfixed32:Int32 = 0

  private(set) var hasOptionalSfixed64:Bool = false
  private(set) var optionalSfixed64:Int64 = 0

  private(set) var hasOptionalFloat:Bool = false
  private(set) var optionalFloat:Float = 0

  private(set) var hasOptionalDouble:Bool = false
  private(set) var optionalDouble:Double = 0

  private(set) var hasOptionalBool:Bool = false
  private(set) var optionalBool:Bool = false

  private(set) var hasOptionalString:Bool = false
  private(set) var optionalString:String = ""

  private(set) var hasOptionalBytes:Bool = false
  private(set) var optionalBytes:[Byte] = [Byte]()

  private(set) var hasOptionalGroup:Bool = false
  private(set) var optionalGroup:TestAllTypesOptionalGroup = TestAllTypesOptionalGroup()
  private(set) var hasOptionalNestedMessage:Bool = false
  private(set) var optionalNestedMessage:TestAllTypesNestedMessage = TestAllTypesNestedMessage()
  private(set) var hasOptionalForeignMessage:Bool = false
  private(set) var optionalForeignMessage:ForeignMessage = ForeignMessage()
  private(set) var hasOptionalImportMessage:Bool = false
  private(set) var optionalImportMessage:ImportMessage = ImportMessage()
  private(set) var optionalNestedEnum:TestAllTypesNestedEnum = .TestAllTypesNestedEnumFoo
  private(set) var hasOptionalNestedEnum:Bool = false
  private(set) var optionalForeignEnum:ForeignEnum = .ForeignEnumForeignFoo
  private(set) var hasOptionalForeignEnum:Bool = false
  private(set) var optionalImportEnum:ImportEnum = .ImportEnumImportFoo
  private(set) var hasOptionalImportEnum:Bool = false
  private(set) var hasOptionalStringPiece:Bool = false
  private(set) var optionalStringPiece:String = ""

  private(set) var hasOptionalCord:Bool = false
  private(set) var optionalCord:String = ""

  private(set) var hasOptionalPublicImportMessage:Bool = false
  private(set) var optionalPublicImportMessage:PublicImportMessage = PublicImportMessage()
  private(set) var hasOptionalLazyMessage:Bool = false
  private(set) var optionalLazyMessage:TestAllTypesNestedMessage = TestAllTypesNestedMessage()
  private(set) var hasDefaultInt32:Bool = false
  private(set) var defaultInt32:Int32 = 41

  private(set) var hasDefaultInt64:Bool = false
  private(set) var defaultInt64:Int64 = 42

  private(set) var hasDefaultUint32:Bool = false
  private(set) var defaultUint32:UInt32 = 43

  private(set) var hasDefaultUint64:Bool = false
  private(set) var defaultUint64:UInt64 = 44

  private(set) var hasDefaultSint32:Bool = false
  private(set) var defaultSint32:Int32 = -45

  private(set) var hasDefaultSint64:Bool = false
  private(set) var defaultSint64:Int64 = 46

  private(set) var hasDefaultFixed32:Bool = false
  private(set) var defaultFixed32:UInt32 = 47

  private(set) var hasDefaultFixed64:Bool = false
  private(set) var defaultFixed64:UInt64 = 48

  private(set) var hasDefaultSfixed32:Bool = false
  private(set) var defaultSfixed32:Int32 = 49

  private(set) var hasDefaultSfixed64:Bool = false
  private(set) var defaultSfixed64:Int64 = -50

  private(set) var hasDefaultFloat:Bool = false
  private(set) var defaultFloat:Float = 51.5

  private(set) var hasDefaultDouble:Bool = false
  private(set) var defaultDouble:Double = 52000

  private(set) var hasDefaultBool:Bool = false
  private(set) var defaultBool:Bool = true

  private(set) var hasDefaultString:Bool = false
  private(set) var defaultString:String = "hello"

  private(set) var hasDefaultBytes:Bool = false
  private(set) var defaultBytes:[Byte] = ([Byte]() + "world".utf8)

  private(set) var defaultNestedEnum:TestAllTypesNestedEnum = .TestAllTypesNestedEnumBar
  private(set) var hasDefaultNestedEnum:Bool = false
  private(set) var defaultForeignEnum:ForeignEnum = .ForeignEnumForeignBar
  private(set) var hasDefaultForeignEnum:Bool = false
  private(set) var defaultImportEnum:ImportEnum = .ImportEnumImportBar
  private(set) var hasDefaultImportEnum:Bool = false
  private(set) var hasDefaultStringPiece:Bool = false
  private(set) var defaultStringPiece:String = "abc"

  private(set) var hasDefaultCord:Bool = false
  private(set) var defaultCord:String = "123"

  private(set) var repeatedInt32:[Int32] = [Int32]()
  private(set) var repeatedInt64:[Int64] = [Int64]()
  private(set) var repeatedUint32:[UInt32] = [UInt32]()
  private(set) var repeatedUint64:[UInt64] = [UInt64]()
  private(set) var repeatedSint32:[Int32] = [Int32]()
  private(set) var repeatedSint64:[Int64] = [Int64]()
  private(set) var repeatedFixed32:[UInt32] = [UInt32]()
  private(set) var repeatedFixed64:[UInt64] = [UInt64]()
  private(set) var repeatedSfixed32:[Int32] = [Int32]()
  private(set) var repeatedSfixed64:[Int64] = [Int64]()
  private(set) var repeatedFloat:[Float] = [Float]()
  private(set) var repeatedDouble:[Double] = [Double]()
  private(set) var repeatedBool:[Bool] = [Bool]()
  private(set) var repeatedString:[String] = [String]()
  private(set) var repeatedBytes:[[Byte]] = [[Byte]]()
  private(set) var repeatedGroup:[TestAllTypesRepeatedGroup]  = [TestAllTypesRepeatedGroup]()
  private(set) var repeatedNestedMessage:[TestAllTypesNestedMessage]  = [TestAllTypesNestedMessage]()
  private(set) var repeatedForeignMessage:[ForeignMessage]  = [ForeignMessage]()
  private(set) var repeatedImportMessage:[ImportMessage]  = [ImportMessage]()
  private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedNestedEnum:[TestAllTypesNestedEnum] = [TestAllTypesNestedEnum]()
  private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedForeignEnum:[ForeignEnum] = [ForeignEnum]()
  private var repeatedImportEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedImportEnum:[ImportEnum] = [ImportEnum]()
  private(set) var repeatedStringPiece:[String] = [String]()
  private(set) var repeatedCord:[String] = [String]()
  private(set) var repeatedLazyMessage:[TestAllTypesNestedMessage]  = [TestAllTypesNestedMessage]()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOptionalInt32 {
      output.writeInt32(1, value:optionalInt32)
    }
    if hasOptionalInt64 {
      output.writeInt64(2, value:optionalInt64)
    }
    if hasOptionalUint32 {
      output.writeUInt32(3, value:optionalUint32)
    }
    if hasOptionalUint64 {
      output.writeUInt64(4, value:optionalUint64)
    }
    if hasOptionalSint32 {
      output.writeSInt32(5, value:optionalSint32)
    }
    if hasOptionalSint64 {
      output.writeSInt64(6, value:optionalSint64)
    }
    if hasOptionalFixed32 {
      output.writeFixed32(7, value:optionalFixed32)
    }
    if hasOptionalFixed64 {
      output.writeFixed64(8, value:optionalFixed64)
    }
    if hasOptionalSfixed32 {
      output.writeSFixed32(9, value:optionalSfixed32)
    }
    if hasOptionalSfixed64 {
      output.writeSFixed64(10, value:optionalSfixed64)
    }
    if hasOptionalFloat {
      output.writeFloat(11, value:optionalFloat)
    }
    if hasOptionalDouble {
      output.writeDouble(12, value:optionalDouble)
    }
    if hasOptionalBool {
      output.writeBool(13, value:optionalBool)
    }
    if hasOptionalString {
      output.writeString(14, value:optionalString)
    }
    if hasOptionalBytes {
      output.writeData(15, value:optionalBytes)
    }
    if hasOptionalGroup {
      output.writeGroup(16, value:optionalGroup)
    }
    if hasOptionalNestedMessage {
      output.writeMessage(18, value:optionalNestedMessage)
    }
    if hasOptionalForeignMessage {
      output.writeMessage(19, value:optionalForeignMessage)
    }
    if hasOptionalImportMessage {
      output.writeMessage(20, value:optionalImportMessage)
    }
    if hasOptionalNestedEnum {
      output.writeEnum(21, value:optionalNestedEnum.toRaw())
    }
    if hasOptionalForeignEnum {
      output.writeEnum(22, value:optionalForeignEnum.toRaw())
    }
    if hasOptionalImportEnum {
      output.writeEnum(23, value:optionalImportEnum.toRaw())
    }
    if hasOptionalStringPiece {
      output.writeString(24, value:optionalStringPiece)
    }
    if hasOptionalCord {
      output.writeString(25, value:optionalCord)
    }
    if hasOptionalPublicImportMessage {
      output.writeMessage(26, value:optionalPublicImportMessage)
    }
    if hasOptionalLazyMessage {
      output.writeMessage(27, value:optionalLazyMessage)
    }
    if !repeatedInt32.isEmpty {
      for value in repeatedInt32 {
        output.writeInt32(31, value:value)
      }
    }
    if !repeatedInt64.isEmpty {
      for value in repeatedInt64 {
        output.writeInt64(32, value:value)
      }
    }
    if !repeatedUint32.isEmpty {
      for value in repeatedUint32 {
        output.writeUInt32(33, value:value)
      }
    }
    if !repeatedUint64.isEmpty {
      for value in repeatedUint64 {
        output.writeUInt64(34, value:value)
      }
    }
    if !repeatedSint32.isEmpty {
      for value in repeatedSint32 {
        output.writeSInt32(35, value:value)
      }
    }
    if !repeatedSint64.isEmpty {
      for value in repeatedSint64 {
        output.writeSInt64(36, value:value)
      }
    }
    if !repeatedFixed32.isEmpty {
      for value in repeatedFixed32 {
        output.writeFixed32(37, value:value)
      }
    }
    if !repeatedFixed64.isEmpty {
      for value in repeatedFixed64 {
        output.writeFixed64(38, value:value)
      }
    }
    if !repeatedSfixed32.isEmpty {
      for value in repeatedSfixed32 {
        output.writeSFixed32(39, value:value)
      }
    }
    if !repeatedSfixed64.isEmpty {
      for value in repeatedSfixed64 {
        output.writeSFixed64(40, value:value)
      }
    }
    if !repeatedFloat.isEmpty {
      for value in repeatedFloat {
        output.writeFloat(41, value:value)
      }
    }
    if !repeatedDouble.isEmpty {
      for value in repeatedDouble {
        output.writeDouble(42, value:value)
      }
    }
    if !repeatedBool.isEmpty {
      for value in repeatedBool {
        output.writeBool(43, value:value)
      }
    }
    if !repeatedString.isEmpty {
      for value in repeatedString {
        output.writeString(44, value:value)
      }
    }
    if !repeatedBytes.isEmpty {
      for value in repeatedBytes {
        output.writeData(45, value:value)
      }
    }
    for element in repeatedGroup {
        output.writeGroup(46, value:element)
    }
    for element in repeatedNestedMessage {
        output.writeMessage(48, value:element)
    }
    for element in repeatedForeignMessage {
        output.writeMessage(49, value:element)
    }
    for element in repeatedImportMessage {
        output.writeMessage(50, value:element)
    }
    for value in repeatedNestedEnum {
        output.writeEnum(51, value:value.toRaw())
    }
    for value in repeatedForeignEnum {
        output.writeEnum(52, value:value.toRaw())
    }
    for value in repeatedImportEnum {
        output.writeEnum(53, value:value.toRaw())
    }
    if !repeatedStringPiece.isEmpty {
      for value in repeatedStringPiece {
        output.writeString(54, value:value)
      }
    }
    if !repeatedCord.isEmpty {
      for value in repeatedCord {
        output.writeString(55, value:value)
      }
    }
    for element in repeatedLazyMessage {
        output.writeMessage(57, value:element)
    }
    if hasDefaultInt32 {
      output.writeInt32(61, value:defaultInt32)
    }
    if hasDefaultInt64 {
      output.writeInt64(62, value:defaultInt64)
    }
    if hasDefaultUint32 {
      output.writeUInt32(63, value:defaultUint32)
    }
    if hasDefaultUint64 {
      output.writeUInt64(64, value:defaultUint64)
    }
    if hasDefaultSint32 {
      output.writeSInt32(65, value:defaultSint32)
    }
    if hasDefaultSint64 {
      output.writeSInt64(66, value:defaultSint64)
    }
    if hasDefaultFixed32 {
      output.writeFixed32(67, value:defaultFixed32)
    }
    if hasDefaultFixed64 {
      output.writeFixed64(68, value:defaultFixed64)
    }
    if hasDefaultSfixed32 {
      output.writeSFixed32(69, value:defaultSfixed32)
    }
    if hasDefaultSfixed64 {
      output.writeSFixed64(70, value:defaultSfixed64)
    }
    if hasDefaultFloat {
      output.writeFloat(71, value:defaultFloat)
    }
    if hasDefaultDouble {
      output.writeDouble(72, value:defaultDouble)
    }
    if hasDefaultBool {
      output.writeBool(73, value:defaultBool)
    }
    if hasDefaultString {
      output.writeString(74, value:defaultString)
    }
    if hasDefaultBytes {
      output.writeData(75, value:defaultBytes)
    }
    if hasDefaultNestedEnum {
      output.writeEnum(81, value:defaultNestedEnum.toRaw())
    }
    if hasDefaultForeignEnum {
      output.writeEnum(82, value:defaultForeignEnum.toRaw())
    }
    if hasDefaultImportEnum {
      output.writeEnum(83, value:defaultImportEnum.toRaw())
    }
    if hasDefaultStringPiece {
      output.writeString(84, value:defaultStringPiece)
    }
    if hasDefaultCord {
      output.writeString(85, value:defaultCord)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasOptionalInt32 {
      size += WireFormat.computeInt32Size(1, value:optionalInt32)
    }
    if hasOptionalInt64 {
      size += WireFormat.computeInt64Size(2, value:optionalInt64)
    }
    if hasOptionalUint32 {
      size += WireFormat.computeUInt32Size(3, value:optionalUint32)
    }
    if hasOptionalUint64 {
      size += WireFormat.computeUInt64Size(4, value:optionalUint64)
    }
    if hasOptionalSint32 {
      size += WireFormat.computeSInt32Size(5, value:optionalSint32)
    }
    if hasOptionalSint64 {
      size += WireFormat.computeSInt64Size(6, value:optionalSint64)
    }
    if hasOptionalFixed32 {
      size += WireFormat.computeFixed32Size(7, value:optionalFixed32)
    }
    if hasOptionalFixed64 {
      size += WireFormat.computeFixed64Size(8, value:optionalFixed64)
    }
    if hasOptionalSfixed32 {
      size += WireFormat.computeSFixed32Size(9, value:optionalSfixed32)
    }
    if hasOptionalSfixed64 {
      size += WireFormat.computeSFixed64Size(10, value:optionalSfixed64)
    }
    if hasOptionalFloat {
      size += WireFormat.computeFloatSize(11, value:optionalFloat)
    }
    if hasOptionalDouble {
      size += WireFormat.computeDoubleSize(12, value:optionalDouble)
    }
    if hasOptionalBool {
      size += WireFormat.computeBoolSize(13, value:optionalBool)
    }
    if hasOptionalString {
      size += WireFormat.computeStringSize(14, value:optionalString)
    }
    if hasOptionalBytes {
      size += WireFormat.computeDataSize(15, value:optionalBytes)
    }
    if hasOptionalGroup {
      size += WireFormat.computeGroupSize(16, value:optionalGroup)
    }
    if hasOptionalNestedMessage {
      size += WireFormat.computeMessageSize(18, value:optionalNestedMessage)
    }
    if hasOptionalForeignMessage {
      size += WireFormat.computeMessageSize(19, value:optionalForeignMessage)
    }
    if hasOptionalImportMessage {
      size += WireFormat.computeMessageSize(20, value:optionalImportMessage)
    }
    if (hasOptionalNestedEnum) {
      size += WireFormat.computeEnumSize(21, value:optionalNestedEnum.toRaw())
    }
    if (hasOptionalForeignEnum) {
      size += WireFormat.computeEnumSize(22, value:optionalForeignEnum.toRaw())
    }
    if (hasOptionalImportEnum) {
      size += WireFormat.computeEnumSize(23, value:optionalImportEnum.toRaw())
    }
    if hasOptionalStringPiece {
      size += WireFormat.computeStringSize(24, value:optionalStringPiece)
    }
    if hasOptionalCord {
      size += WireFormat.computeStringSize(25, value:optionalCord)
    }
    if hasOptionalPublicImportMessage {
      size += WireFormat.computeMessageSize(26, value:optionalPublicImportMessage)
    }
    if hasOptionalLazyMessage {
      size += WireFormat.computeMessageSize(27, value:optionalLazyMessage)
    }
      var dataSizeRepeatedInt32:Int32 = 0
      for element in repeatedInt32 {
          dataSizeRepeatedInt32 += WireFormat.computeInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedInt32
      size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for element in repeatedInt64 {
          dataSizeRepeatedInt64 += WireFormat.computeInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedInt64
      size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for element in repeatedUint32 {
          dataSizeRepeatedUint32 += WireFormat.computeUInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedUint32
      size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for element in repeatedUint64 {
          dataSizeRepeatedUint64 += WireFormat.computeUInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedUint64
      size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for element in repeatedSint32 {
          dataSizeRepeatedSint32 += WireFormat.computeSInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedSint32
      size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for element in repeatedSint64 {
          dataSizeRepeatedSint64 += WireFormat.computeSInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedSint64
      size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      size += dataSizeRepeatedFixed32
      size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      size += dataSizeRepeatedFixed64
      size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      size += dataSizeRepeatedSfixed32
      size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      size += dataSizeRepeatedSfixed64
      size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      size += dataSizeRepeatedFloat
      size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      size += dataSizeRepeatedDouble
      size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      size += dataSizeRepeatedBool
      size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for element in repeatedString {
          dataSizeRepeatedString += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedString
      size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for element in repeatedBytes {
          dataSizeRepeatedBytes += WireFormat.computeDataSizeNoTag(element)
      }
      size += dataSizeRepeatedBytes
      size += 2 * Int32(repeatedBytes.count)
    for element in repeatedGroup {
        size += WireFormat.computeGroupSize(46, value:element)
    }
    for element in repeatedNestedMessage {
        size += WireFormat.computeMessageSize(48, value:element)
    }
    for element in repeatedForeignMessage {
        size += WireFormat.computeMessageSize(49, value:element)
    }
    for element in repeatedImportMessage {
        size += WireFormat.computeMessageSize(50, value:element)
    }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for value in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedNestedEnum
      size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for value in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedForeignEnum
      size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizerepeatedImportEnum:Int32 = 0
      for value in repeatedImportEnum {
          dataSizerepeatedImportEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedImportEnum
      size += (2 * Int32(repeatedImportEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for element in repeatedStringPiece {
          dataSizeRepeatedStringPiece += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedStringPiece
      size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for element in repeatedCord {
          dataSizeRepeatedCord += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedCord
      size += 2 * Int32(repeatedCord.count)
    for element in repeatedLazyMessage {
        size += WireFormat.computeMessageSize(57, value:element)
    }
    if hasDefaultInt32 {
      size += WireFormat.computeInt32Size(61, value:defaultInt32)
    }
    if hasDefaultInt64 {
      size += WireFormat.computeInt64Size(62, value:defaultInt64)
    }
    if hasDefaultUint32 {
      size += WireFormat.computeUInt32Size(63, value:defaultUint32)
    }
    if hasDefaultUint64 {
      size += WireFormat.computeUInt64Size(64, value:defaultUint64)
    }
    if hasDefaultSint32 {
      size += WireFormat.computeSInt32Size(65, value:defaultSint32)
    }
    if hasDefaultSint64 {
      size += WireFormat.computeSInt64Size(66, value:defaultSint64)
    }
    if hasDefaultFixed32 {
      size += WireFormat.computeFixed32Size(67, value:defaultFixed32)
    }
    if hasDefaultFixed64 {
      size += WireFormat.computeFixed64Size(68, value:defaultFixed64)
    }
    if hasDefaultSfixed32 {
      size += WireFormat.computeSFixed32Size(69, value:defaultSfixed32)
    }
    if hasDefaultSfixed64 {
      size += WireFormat.computeSFixed64Size(70, value:defaultSfixed64)
    }
    if hasDefaultFloat {
      size += WireFormat.computeFloatSize(71, value:defaultFloat)
    }
    if hasDefaultDouble {
      size += WireFormat.computeDoubleSize(72, value:defaultDouble)
    }
    if hasDefaultBool {
      size += WireFormat.computeBoolSize(73, value:defaultBool)
    }
    if hasDefaultString {
      size += WireFormat.computeStringSize(74, value:defaultString)
    }
    if hasDefaultBytes {
      size += WireFormat.computeDataSize(75, value:defaultBytes)
    }
    if (hasDefaultNestedEnum) {
      size += WireFormat.computeEnumSize(81, value:defaultNestedEnum.toRaw())
    }
    if (hasDefaultForeignEnum) {
      size += WireFormat.computeEnumSize(82, value:defaultForeignEnum.toRaw())
    }
    if (hasDefaultImportEnum) {
      size += WireFormat.computeEnumSize(83, value:defaultImportEnum.toRaw())
    }
    if hasDefaultStringPiece {
      size += WireFormat.computeStringSize(84, value:defaultStringPiece)
    }
    if hasDefaultCord {
      size += WireFormat.computeStringSize(85, value:defaultCord)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestAllTypes {
    return TestAllTypes.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypes {
    return TestAllTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestAllTypes {
    return TestAllTypes.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypes {
    return TestAllTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypes {
    return TestAllTypes.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypes {
    return TestAllTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestAllTypesBuilder {
    return TestAllTypesBuilder()
  }
  class func builderWithPrototype(prototype:TestAllTypes) -> TestAllTypesBuilder {
    return TestAllTypes.builder().mergeFrom(prototype)
  }
  func builder() -> TestAllTypesBuilder {
    return TestAllTypes.builder()
  }
  func toBuilder() -> TestAllTypesBuilder {
    return TestAllTypes.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasOptionalInt32 {
      output += "\(indent) optionalInt32: \(optionalInt32) \n"
    }
    if hasOptionalInt64 {
      output += "\(indent) optionalInt64: \(optionalInt64) \n"
    }
    if hasOptionalUint32 {
      output += "\(indent) optionalUint32: \(optionalUint32) \n"
    }
    if hasOptionalUint64 {
      output += "\(indent) optionalUint64: \(optionalUint64) \n"
    }
    if hasOptionalSint32 {
      output += "\(indent) optionalSint32: \(optionalSint32) \n"
    }
    if hasOptionalSint64 {
      output += "\(indent) optionalSint64: \(optionalSint64) \n"
    }
    if hasOptionalFixed32 {
      output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
    }
    if hasOptionalFixed64 {
      output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
    }
    if hasOptionalSfixed32 {
      output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
    }
    if hasOptionalSfixed64 {
      output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
    }
    if hasOptionalFloat {
      output += "\(indent) optionalFloat: \(optionalFloat) \n"
    }
    if hasOptionalDouble {
      output += "\(indent) optionalDouble: \(optionalDouble) \n"
    }
    if hasOptionalBool {
      output += "\(indent) optionalBool: \(optionalBool) \n"
    }
    if hasOptionalString {
      output += "\(indent) optionalString: \(optionalString) \n"
    }
    if hasOptionalBytes {
      output += "\(indent) optionalBytes: \(optionalBytes) \n"
    }
    if hasOptionalGroup {
      output += "\(indent) optionalGroup {\n"
      optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalNestedMessage {
      output += "\(indent) optionalNestedMessage {\n"
      optionalNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalForeignMessage {
      output += "\(indent) optionalForeignMessage {\n"
      optionalForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalImportMessage {
      output += "\(indent) optionalImportMessage {\n"
      optionalImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if (hasOptionalNestedEnum) {
      output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.toRaw())\n"
    }
    if (hasOptionalForeignEnum) {
      output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.toRaw())\n"
    }
    if (hasOptionalImportEnum) {
      output += "\(indent) optionalImportEnum: \(optionalImportEnum.toRaw())\n"
    }
    if hasOptionalStringPiece {
      output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
    }
    if hasOptionalCord {
      output += "\(indent) optionalCord: \(optionalCord) \n"
    }
    if hasOptionalPublicImportMessage {
      output += "\(indent) optionalPublicImportMessage {\n"
      optionalPublicImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalLazyMessage {
      output += "\(indent) optionalLazyMessage {\n"
      optionalLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    var repeatedInt32ElementIndex:Int = 0
    for element in repeatedInt32  {
        output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(element)\n"
        repeatedInt32ElementIndex++
    }
    var repeatedInt64ElementIndex:Int = 0
    for element in repeatedInt64  {
        output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(element)\n"
        repeatedInt64ElementIndex++
    }
    var repeatedUint32ElementIndex:Int = 0
    for element in repeatedUint32  {
        output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(element)\n"
        repeatedUint32ElementIndex++
    }
    var repeatedUint64ElementIndex:Int = 0
    for element in repeatedUint64  {
        output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(element)\n"
        repeatedUint64ElementIndex++
    }
    var repeatedSint32ElementIndex:Int = 0
    for element in repeatedSint32  {
        output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(element)\n"
        repeatedSint32ElementIndex++
    }
    var repeatedSint64ElementIndex:Int = 0
    for element in repeatedSint64  {
        output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(element)\n"
        repeatedSint64ElementIndex++
    }
    var repeatedFixed32ElementIndex:Int = 0
    for element in repeatedFixed32  {
        output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(element)\n"
        repeatedFixed32ElementIndex++
    }
    var repeatedFixed64ElementIndex:Int = 0
    for element in repeatedFixed64  {
        output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(element)\n"
        repeatedFixed64ElementIndex++
    }
    var repeatedSfixed32ElementIndex:Int = 0
    for element in repeatedSfixed32  {
        output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(element)\n"
        repeatedSfixed32ElementIndex++
    }
    var repeatedSfixed64ElementIndex:Int = 0
    for element in repeatedSfixed64  {
        output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(element)\n"
        repeatedSfixed64ElementIndex++
    }
    var repeatedFloatElementIndex:Int = 0
    for element in repeatedFloat  {
        output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(element)\n"
        repeatedFloatElementIndex++
    }
    var repeatedDoubleElementIndex:Int = 0
    for element in repeatedDouble  {
        output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(element)\n"
        repeatedDoubleElementIndex++
    }
    var repeatedBoolElementIndex:Int = 0
    for element in repeatedBool  {
        output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(element)\n"
        repeatedBoolElementIndex++
    }
    var repeatedStringElementIndex:Int = 0
    for element in repeatedString  {
        output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(element)\n"
        repeatedStringElementIndex++
    }
    var repeatedBytesElementIndex:Int = 0
    for element in repeatedBytes  {
        output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(element)\n"
        repeatedBytesElementIndex++
    }
    var repeatedGroupElementIndex:Int = 0
    for element in repeatedGroup {
        output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedGroupElementIndex++
    }
    var repeatedNestedMessageElementIndex:Int = 0
    for element in repeatedNestedMessage {
        output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedNestedMessageElementIndex++
    }
    var repeatedForeignMessageElementIndex:Int = 0
    for element in repeatedForeignMessage {
        output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedForeignMessageElementIndex++
    }
    var repeatedImportMessageElementIndex:Int = 0
    for element in repeatedImportMessage {
        output += "\(indent) repeatedImportMessage[\(repeatedImportMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedImportMessageElementIndex++
    }
    var repeatedNestedEnumElementIndex:Int = 0
    for element in repeatedNestedEnum {
        output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(element.toRaw())"
        repeatedNestedEnumElementIndex++
    }
    var repeatedForeignEnumElementIndex:Int = 0
    for element in repeatedForeignEnum {
        output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(element.toRaw())"
        repeatedForeignEnumElementIndex++
    }
    var repeatedImportEnumElementIndex:Int = 0
    for element in repeatedImportEnum {
        output += "\(indent) repeatedImportEnum[\(repeatedImportEnumElementIndex)]: \(element.toRaw())"
        repeatedImportEnumElementIndex++
    }
    var repeatedStringPieceElementIndex:Int = 0
    for element in repeatedStringPiece  {
        output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(element)\n"
        repeatedStringPieceElementIndex++
    }
    var repeatedCordElementIndex:Int = 0
    for element in repeatedCord  {
        output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(element)\n"
        repeatedCordElementIndex++
    }
    var repeatedLazyMessageElementIndex:Int = 0
    for element in repeatedLazyMessage {
        output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedLazyMessageElementIndex++
    }
    if hasDefaultInt32 {
      output += "\(indent) defaultInt32: \(defaultInt32) \n"
    }
    if hasDefaultInt64 {
      output += "\(indent) defaultInt64: \(defaultInt64) \n"
    }
    if hasDefaultUint32 {
      output += "\(indent) defaultUint32: \(defaultUint32) \n"
    }
    if hasDefaultUint64 {
      output += "\(indent) defaultUint64: \(defaultUint64) \n"
    }
    if hasDefaultSint32 {
      output += "\(indent) defaultSint32: \(defaultSint32) \n"
    }
    if hasDefaultSint64 {
      output += "\(indent) defaultSint64: \(defaultSint64) \n"
    }
    if hasDefaultFixed32 {
      output += "\(indent) defaultFixed32: \(defaultFixed32) \n"
    }
    if hasDefaultFixed64 {
      output += "\(indent) defaultFixed64: \(defaultFixed64) \n"
    }
    if hasDefaultSfixed32 {
      output += "\(indent) defaultSfixed32: \(defaultSfixed32) \n"
    }
    if hasDefaultSfixed64 {
      output += "\(indent) defaultSfixed64: \(defaultSfixed64) \n"
    }
    if hasDefaultFloat {
      output += "\(indent) defaultFloat: \(defaultFloat) \n"
    }
    if hasDefaultDouble {
      output += "\(indent) defaultDouble: \(defaultDouble) \n"
    }
    if hasDefaultBool {
      output += "\(indent) defaultBool: \(defaultBool) \n"
    }
    if hasDefaultString {
      output += "\(indent) defaultString: \(defaultString) \n"
    }
    if hasDefaultBytes {
      output += "\(indent) defaultBytes: \(defaultBytes) \n"
    }
    if (hasDefaultNestedEnum) {
      output += "\(indent) defaultNestedEnum: \(defaultNestedEnum.toRaw())\n"
    }
    if (hasDefaultForeignEnum) {
      output += "\(indent) defaultForeignEnum: \(defaultForeignEnum.toRaw())\n"
    }
    if (hasDefaultImportEnum) {
      output += "\(indent) defaultImportEnum: \(defaultImportEnum.toRaw())\n"
    }
    if hasDefaultStringPiece {
      output += "\(indent) defaultStringPiece: \(defaultStringPiece) \n"
    }
    if hasDefaultCord {
      output += "\(indent) defaultCord: \(defaultCord) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasOptionalInt32 {
           hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
        }
        if hasOptionalInt64 {
           hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
        }
        if hasOptionalUint32 {
           hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
        }
        if hasOptionalUint64 {
           hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
        }
        if hasOptionalSint32 {
           hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
        }
        if hasOptionalSint64 {
           hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
        }
        if hasOptionalFixed32 {
           hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
        }
        if hasOptionalFixed64 {
           hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
        }
        if hasOptionalSfixed32 {
           hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
        }
        if hasOptionalSfixed64 {
           hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
        }
        if hasOptionalFloat {
           hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
        }
        if hasOptionalDouble {
           hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
        }
        if hasOptionalBool {
           hashCode = (hashCode &* 31) &+ optionalBool.hashValue
        }
        if hasOptionalString {
           hashCode = (hashCode &* 31) &+ optionalString.hashValue
        }
        if hasOptionalBytes {
           hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
        }
        if hasOptionalGroup {
          hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
        }
        if hasOptionalNestedMessage {
          hashCode = (hashCode &* 31) &+ optionalNestedMessage.hashValue
        }
        if hasOptionalForeignMessage {
          hashCode = (hashCode &* 31) &+ optionalForeignMessage.hashValue
        }
        if hasOptionalImportMessage {
          hashCode = (hashCode &* 31) &+ optionalImportMessage.hashValue
        }
        if hasOptionalNestedEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.toRaw())
        }
        if hasOptionalForeignEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.toRaw())
        }
        if hasOptionalImportEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalImportEnum.toRaw())
        }
        if hasOptionalStringPiece {
           hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
        }
        if hasOptionalCord {
           hashCode = (hashCode &* 31) &+ optionalCord.hashValue
        }
        if hasOptionalPublicImportMessage {
          hashCode = (hashCode &* 31) &+ optionalPublicImportMessage.hashValue
        }
        if hasOptionalLazyMessage {
          hashCode = (hashCode &* 31) &+ optionalLazyMessage.hashValue
        }
        for element in repeatedInt32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedInt64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedUint32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedUint64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSint32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSint64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFixed32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFixed64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSfixed32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSfixed64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFloat {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedDouble {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedBool {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedString {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedBytes {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedGroup {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedNestedMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedForeignMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedImportMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedNestedEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedForeignEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedImportEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedStringPiece {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedCord {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedLazyMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        if hasDefaultInt32 {
           hashCode = (hashCode &* 31) &+ defaultInt32.hashValue
        }
        if hasDefaultInt64 {
           hashCode = (hashCode &* 31) &+ defaultInt64.hashValue
        }
        if hasDefaultUint32 {
           hashCode = (hashCode &* 31) &+ defaultUint32.hashValue
        }
        if hasDefaultUint64 {
           hashCode = (hashCode &* 31) &+ defaultUint64.hashValue
        }
        if hasDefaultSint32 {
           hashCode = (hashCode &* 31) &+ defaultSint32.hashValue
        }
        if hasDefaultSint64 {
           hashCode = (hashCode &* 31) &+ defaultSint64.hashValue
        }
        if hasDefaultFixed32 {
           hashCode = (hashCode &* 31) &+ defaultFixed32.hashValue
        }
        if hasDefaultFixed64 {
           hashCode = (hashCode &* 31) &+ defaultFixed64.hashValue
        }
        if hasDefaultSfixed32 {
           hashCode = (hashCode &* 31) &+ defaultSfixed32.hashValue
        }
        if hasDefaultSfixed64 {
           hashCode = (hashCode &* 31) &+ defaultSfixed64.hashValue
        }
        if hasDefaultFloat {
           hashCode = (hashCode &* 31) &+ defaultFloat.hashValue
        }
        if hasDefaultDouble {
           hashCode = (hashCode &* 31) &+ defaultDouble.hashValue
        }
        if hasDefaultBool {
           hashCode = (hashCode &* 31) &+ defaultBool.hashValue
        }
        if hasDefaultString {
           hashCode = (hashCode &* 31) &+ defaultString.hashValue
        }
        if hasDefaultBytes {
           hashCode = (hashCode &* 31) &+ defaultBytes.hashValue
        }
        if hasDefaultNestedEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultNestedEnum.toRaw())
        }
        if hasDefaultForeignEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultForeignEnum.toRaw())
        }
        if hasDefaultImportEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultImportEnum.toRaw())
        }
        if hasDefaultStringPiece {
           hashCode = (hashCode &* 31) &+ defaultStringPiece.hashValue
        }
        if hasDefaultCord {
           hashCode = (hashCode &* 31) &+ defaultCord.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  enum TestAllTypesNestedEnum:Int32 {
    case TestAllTypesNestedEnumFoo = 1
    case TestAllTypesNestedEnumBar = 2
    case TestAllTypesNestedEnumBaz = 3

    static func TestAllTypesNestedEnumIsValidValue(value:TestAllTypesNestedEnum) ->Bool {
      switch value {
        case .TestAllTypesNestedEnumFoo, .TestAllTypesNestedEnumBar, .TestAllTypesNestedEnumBaz:
          return true;
        default:
          return false;
      }
    }
  }

  func == (lhs: TestAllTypesNestedMessage, rhs: TestAllTypesNestedMessage) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class TestAllTypesNestedMessage : GeneratedMessage {
    private(set) var hasBb:Bool = false
    private(set) var bb:Int32 = 0

    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasBb {
        output.writeInt32(1, value:bb)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      if hasBb {
        size += WireFormat.computeInt32Size(1, value:bb)
      }
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesNestedMessage {
      return TestAllTypesNestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> TestAllTypesNestedMessageBuilder {
      return TestAllTypesNestedMessageBuilder()
    }
    class func builderWithPrototype(prototype:TestAllTypesNestedMessage) -> TestAllTypesNestedMessageBuilder {
      return TestAllTypesNestedMessage.builder().mergeFrom(prototype)
    }
    func builder() -> TestAllTypesNestedMessageBuilder {
      return TestAllTypesNestedMessage.builder()
    }
    func toBuilder() -> TestAllTypesNestedMessageBuilder {
      return TestAllTypesNestedMessage.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      if hasBb {
        output += "\(indent) bb: \(bb) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          if hasBb {
             hashCode = (hashCode &* 31) &+ bb.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class TestAllTypesNestedMessageBuilder : GeneratedMessageBuilder {
    private var result:TestAllTypesNestedMessage

    override init () {
       result = TestAllTypesNestedMessage()
    }
    var hasBb:Bool {
         get {
              return result.hasBb
         }
    }
    var bb:Int32 {
         get {
              return result.bb
         }
         set (value) {
             result.hasBb = true
             result.bb = value
         }
    }
    func clearBb() -> TestAllTypesNestedMessageBuilder{
         result.hasBb = false
         result.bb = 0
         return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> TestAllTypesNestedMessageBuilder {
      result = TestAllTypesNestedMessage()
      return self
    }
    override func clone() -> TestAllTypesNestedMessageBuilder {
      return TestAllTypesNestedMessage.builderWithPrototype(result)
    }
    func build() -> TestAllTypesNestedMessage {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> TestAllTypesNestedMessage {
      var returnMe:TestAllTypesNestedMessage = result
      return returnMe
    }
    func mergeFrom(other:TestAllTypesNestedMessage) -> TestAllTypesNestedMessageBuilder {
      if (other == TestAllTypesNestedMessage()) {
        return self
      }
      if other.hasBb {
           bb = other.bb
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesNestedMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesNestedMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 8 {
            bb = input.readInt32()
          }
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    func == (lhs: TestAllTypesOptionalGroup, rhs: TestAllTypesOptionalGroup) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    }
    class TestAllTypesOptionalGroup : GeneratedMessage {
      private(set) var hasA:Bool = false
      private(set) var a:Int32 = 0

      override init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasA {
          output.writeInt32(17, value:a)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
          return size
        }

        size = 0
        if hasA {
          size += WireFormat.computeInt32Size(17, value:a)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesOptionalGroup {
        return TestAllTypesOptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> TestAllTypesOptionalGroupBuilder {
        return TestAllTypesOptionalGroupBuilder()
      }
      class func builderWithPrototype(prototype:TestAllTypesOptionalGroup) -> TestAllTypesOptionalGroupBuilder {
        return TestAllTypesOptionalGroup.builder().mergeFrom(prototype)
      }
      func builder() -> TestAllTypesOptionalGroupBuilder {
        return TestAllTypesOptionalGroup.builder()
      }
      func toBuilder() -> TestAllTypesOptionalGroupBuilder {
        return TestAllTypesOptionalGroup.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        if hasA {
          output += "\(indent) a: \(a) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
       get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
          }
        }
      }

      class TestAllTypesOptionalGroupBuilder : GeneratedMessageBuilder {
      private var result:TestAllTypesOptionalGroup

      override init () {
         result = TestAllTypesOptionalGroup()
      }
      var hasA:Bool {
           get {
                return result.hasA
           }
      }
      var a:Int32 {
           get {
                return result.a
           }
           set (value) {
               result.hasA = true
               result.a = value
           }
      }
      func clearA() -> TestAllTypesOptionalGroupBuilder{
           result.hasA = false
           result.a = 0
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return result
           }
      }
      override func clear() -> TestAllTypesOptionalGroupBuilder {
        result = TestAllTypesOptionalGroup()
        return self
      }
      override func clone() -> TestAllTypesOptionalGroupBuilder {
        return TestAllTypesOptionalGroup.builderWithPrototype(result)
      }
      func build() -> TestAllTypesOptionalGroup {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> TestAllTypesOptionalGroup {
        var returnMe:TestAllTypesOptionalGroup = result
        return returnMe
      }
      func mergeFrom(other:TestAllTypesOptionalGroup) -> TestAllTypesOptionalGroupBuilder {
        if (other == TestAllTypesOptionalGroup()) {
          return self
        }
        if other.hasA {
             a = other.a
        }
          mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesOptionalGroupBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesOptionalGroupBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag:Int32 = input.readTag()
            if tag == 0 {
                 self.unknownFields = unknownFieldsBuilder.build()
                 return self}
            else if tag == 136 {
              a = input.readInt32()
            }
            else {
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                      unknownFields = unknownFieldsBuilder.build()
                      return self
                  }
            }
            }
         }
      }

      func == (lhs: TestAllTypesRepeatedGroup, rhs: TestAllTypesRepeatedGroup) -> Bool {
            if (lhs === rhs) {
              return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      }
      class TestAllTypesRepeatedGroup : GeneratedMessage {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = 0

        override init() {
             super.init()
        }
        override func isInitialized() -> Bool {
          return true
        }
        override func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(47, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override func serializedSize() -> Int32 {
          var size:Int32 = memoizedSerializedSize
          if size != -1 {
            return size
          }

          size = 0
          if hasA {
            size += WireFormat.computeInt32Size(47, value:a)
          }
          size += unknownFields.serializedSize()
          memoizedSerializedSize = size
          return size
        }
        class func parseFromData(data:[Byte]) -> TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromData(data).build()
        }
        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromInputStream(input:NSInputStream) -> TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromInputStream(input).build()
        }
        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromCodedInputStream(input).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesRepeatedGroup {
          return TestAllTypesRepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func builder() -> TestAllTypesRepeatedGroupBuilder {
          return TestAllTypesRepeatedGroupBuilder()
        }
        class func builderWithPrototype(prototype:TestAllTypesRepeatedGroup) -> TestAllTypesRepeatedGroupBuilder {
          return TestAllTypesRepeatedGroup.builder().mergeFrom(prototype)
        }
        func builder() -> TestAllTypesRepeatedGroupBuilder {
          return TestAllTypesRepeatedGroup.builder()
        }
        func toBuilder() -> TestAllTypesRepeatedGroupBuilder {
          return TestAllTypesRepeatedGroup.builderWithPrototype(self)
        }
        override func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override var hashValue:Int {
         get {
              var hashCode:Int = 7
              if hasA {
                 hashCode = (hashCode &* 31) &+ a.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
            }
          }
        }

        class TestAllTypesRepeatedGroupBuilder : GeneratedMessageBuilder {
        private var result:TestAllTypesRepeatedGroup

        override init () {
           result = TestAllTypesRepeatedGroup()
        }
        var hasA:Bool {
             get {
                  return result.hasA
             }
        }
        var a:Int32 {
             get {
                  return result.a
             }
             set (value) {
                 result.hasA = true
                 result.a = value
             }
        }
        func clearA() -> TestAllTypesRepeatedGroupBuilder{
             result.hasA = false
             result.a = 0
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> TestAllTypesRepeatedGroupBuilder {
          result = TestAllTypesRepeatedGroup()
          return self
        }
        override func clone() -> TestAllTypesRepeatedGroupBuilder {
          return TestAllTypesRepeatedGroup.builderWithPrototype(result)
        }
        func build() -> TestAllTypesRepeatedGroup {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> TestAllTypesRepeatedGroup {
          var returnMe:TestAllTypesRepeatedGroup = result
          return returnMe
        }
        func mergeFrom(other:TestAllTypesRepeatedGroup) -> TestAllTypesRepeatedGroupBuilder {
          if (other == TestAllTypesRepeatedGroup()) {
            return self
          }
          if other.hasA {
               a = other.a
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesRepeatedGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesRepeatedGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 376 {
                a = input.readInt32()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        class TestAllTypesBuilder : GeneratedMessageBuilder {
        private var result:TestAllTypes

        override init () {
           result = TestAllTypes()
        }
        var hasOptionalInt32:Bool {
             get {
                  return result.hasOptionalInt32
             }
        }
        var optionalInt32:Int32 {
             get {
                  return result.optionalInt32
             }
             set (value) {
                 result.hasOptionalInt32 = true
                 result.optionalInt32 = value
             }
        }
        func clearOptionalInt32() -> TestAllTypesBuilder{
             result.hasOptionalInt32 = false
             result.optionalInt32 = 0
             return self
        }
        var hasOptionalInt64:Bool {
             get {
                  return result.hasOptionalInt64
             }
        }
        var optionalInt64:Int64 {
             get {
                  return result.optionalInt64
             }
             set (value) {
                 result.hasOptionalInt64 = true
                 result.optionalInt64 = value
             }
        }
        func clearOptionalInt64() -> TestAllTypesBuilder{
             result.hasOptionalInt64 = false
             result.optionalInt64 = 0
             return self
        }
        var hasOptionalUint32:Bool {
             get {
                  return result.hasOptionalUint32
             }
        }
        var optionalUint32:UInt32 {
             get {
                  return result.optionalUint32
             }
             set (value) {
                 result.hasOptionalUint32 = true
                 result.optionalUint32 = value
             }
        }
        func clearOptionalUint32() -> TestAllTypesBuilder{
             result.hasOptionalUint32 = false
             result.optionalUint32 = 0
             return self
        }
        var hasOptionalUint64:Bool {
             get {
                  return result.hasOptionalUint64
             }
        }
        var optionalUint64:UInt64 {
             get {
                  return result.optionalUint64
             }
             set (value) {
                 result.hasOptionalUint64 = true
                 result.optionalUint64 = value
             }
        }
        func clearOptionalUint64() -> TestAllTypesBuilder{
             result.hasOptionalUint64 = false
             result.optionalUint64 = 0
             return self
        }
        var hasOptionalSint32:Bool {
             get {
                  return result.hasOptionalSint32
             }
        }
        var optionalSint32:Int32 {
             get {
                  return result.optionalSint32
             }
             set (value) {
                 result.hasOptionalSint32 = true
                 result.optionalSint32 = value
             }
        }
        func clearOptionalSint32() -> TestAllTypesBuilder{
             result.hasOptionalSint32 = false
             result.optionalSint32 = 0
             return self
        }
        var hasOptionalSint64:Bool {
             get {
                  return result.hasOptionalSint64
             }
        }
        var optionalSint64:Int64 {
             get {
                  return result.optionalSint64
             }
             set (value) {
                 result.hasOptionalSint64 = true
                 result.optionalSint64 = value
             }
        }
        func clearOptionalSint64() -> TestAllTypesBuilder{
             result.hasOptionalSint64 = false
             result.optionalSint64 = 0
             return self
        }
        var hasOptionalFixed32:Bool {
             get {
                  return result.hasOptionalFixed32
             }
        }
        var optionalFixed32:UInt32 {
             get {
                  return result.optionalFixed32
             }
             set (value) {
                 result.hasOptionalFixed32 = true
                 result.optionalFixed32 = value
             }
        }
        func clearOptionalFixed32() -> TestAllTypesBuilder{
             result.hasOptionalFixed32 = false
             result.optionalFixed32 = 0
             return self
        }
        var hasOptionalFixed64:Bool {
             get {
                  return result.hasOptionalFixed64
             }
        }
        var optionalFixed64:UInt64 {
             get {
                  return result.optionalFixed64
             }
             set (value) {
                 result.hasOptionalFixed64 = true
                 result.optionalFixed64 = value
             }
        }
        func clearOptionalFixed64() -> TestAllTypesBuilder{
             result.hasOptionalFixed64 = false
             result.optionalFixed64 = 0
             return self
        }
        var hasOptionalSfixed32:Bool {
             get {
                  return result.hasOptionalSfixed32
             }
        }
        var optionalSfixed32:Int32 {
             get {
                  return result.optionalSfixed32
             }
             set (value) {
                 result.hasOptionalSfixed32 = true
                 result.optionalSfixed32 = value
             }
        }
        func clearOptionalSfixed32() -> TestAllTypesBuilder{
             result.hasOptionalSfixed32 = false
             result.optionalSfixed32 = 0
             return self
        }
        var hasOptionalSfixed64:Bool {
             get {
                  return result.hasOptionalSfixed64
             }
        }
        var optionalSfixed64:Int64 {
             get {
                  return result.optionalSfixed64
             }
             set (value) {
                 result.hasOptionalSfixed64 = true
                 result.optionalSfixed64 = value
             }
        }
        func clearOptionalSfixed64() -> TestAllTypesBuilder{
             result.hasOptionalSfixed64 = false
             result.optionalSfixed64 = 0
             return self
        }
        var hasOptionalFloat:Bool {
             get {
                  return result.hasOptionalFloat
             }
        }
        var optionalFloat:Float {
             get {
                  return result.optionalFloat
             }
             set (value) {
                 result.hasOptionalFloat = true
                 result.optionalFloat = value
             }
        }
        func clearOptionalFloat() -> TestAllTypesBuilder{
             result.hasOptionalFloat = false
             result.optionalFloat = 0
             return self
        }
        var hasOptionalDouble:Bool {
             get {
                  return result.hasOptionalDouble
             }
        }
        var optionalDouble:Double {
             get {
                  return result.optionalDouble
             }
             set (value) {
                 result.hasOptionalDouble = true
                 result.optionalDouble = value
             }
        }
        func clearOptionalDouble() -> TestAllTypesBuilder{
             result.hasOptionalDouble = false
             result.optionalDouble = 0
             return self
        }
        var hasOptionalBool:Bool {
             get {
                  return result.hasOptionalBool
             }
        }
        var optionalBool:Bool {
             get {
                  return result.optionalBool
             }
             set (value) {
                 result.hasOptionalBool = true
                 result.optionalBool = value
             }
        }
        func clearOptionalBool() -> TestAllTypesBuilder{
             result.hasOptionalBool = false
             result.optionalBool = false
             return self
        }
        var hasOptionalString:Bool {
             get {
                  return result.hasOptionalString
             }
        }
        var optionalString:String {
             get {
                  return result.optionalString
             }
             set (value) {
                 result.hasOptionalString = true
                 result.optionalString = value
             }
        }
        func clearOptionalString() -> TestAllTypesBuilder{
             result.hasOptionalString = false
             result.optionalString = ""
             return self
        }
        var hasOptionalBytes:Bool {
             get {
                  return result.hasOptionalBytes
             }
        }
        var optionalBytes:[Byte] {
             get {
                  return result.optionalBytes
             }
             set (value) {
                 result.hasOptionalBytes = true
                 result.optionalBytes = value
             }
        }
        func clearOptionalBytes() -> TestAllTypesBuilder{
             result.hasOptionalBytes = false
             result.optionalBytes = [Byte]()
             return self
        }
        var hasOptionalGroup:Bool {
             get {
                 return result.hasOptionalGroup
             }
        }
        var optionalGroup:TestAllTypesOptionalGroup {
             get {
                 return result.optionalGroup     }
             set (value) {
                 result.hasOptionalGroup = true
                 result.optionalGroup = value
             }
        }
        func setOptionalGroupBuilder(builderForValue:TestAllTypesOptionalGroupBuilder) -> TestAllTypesBuilder {
          optionalGroup = builderForValue.build()
          return self
        }
        func mergeOptionalGroup(value:TestAllTypesOptionalGroup) -> TestAllTypesBuilder {
          if (result.hasOptionalGroup && result.optionalGroup != TestAllTypesOptionalGroup()) {
            result.optionalGroup = TestAllTypesOptionalGroup.builderWithPrototype(result.optionalGroup).mergeFrom(value).buildPartial()
          } else {
            result.optionalGroup = value
          }
          result.hasOptionalGroup = true
          return self
        }
        func clearOptionalGroup() -> TestAllTypesBuilder {
          result.hasOptionalGroup = false
          result.optionalGroup = TestAllTypesOptionalGroup()
          return self
        }
        var hasOptionalNestedMessage:Bool {
             get {
                 return result.hasOptionalNestedMessage
             }
        }
        var optionalNestedMessage:TestAllTypesNestedMessage {
             get {
                 return result.optionalNestedMessage     }
             set (value) {
                 result.hasOptionalNestedMessage = true
                 result.optionalNestedMessage = value
             }
        }
        func setOptionalNestedMessageBuilder(builderForValue:TestAllTypesNestedMessageBuilder) -> TestAllTypesBuilder {
          optionalNestedMessage = builderForValue.build()
          return self
        }
        func mergeOptionalNestedMessage(value:TestAllTypesNestedMessage) -> TestAllTypesBuilder {
          if (result.hasOptionalNestedMessage && result.optionalNestedMessage != TestAllTypesNestedMessage()) {
            result.optionalNestedMessage = TestAllTypesNestedMessage.builderWithPrototype(result.optionalNestedMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalNestedMessage = value
          }
          result.hasOptionalNestedMessage = true
          return self
        }
        func clearOptionalNestedMessage() -> TestAllTypesBuilder {
          result.hasOptionalNestedMessage = false
          result.optionalNestedMessage = TestAllTypesNestedMessage()
          return self
        }
        var hasOptionalForeignMessage:Bool {
             get {
                 return result.hasOptionalForeignMessage
             }
        }
        var optionalForeignMessage:ForeignMessage {
             get {
                 return result.optionalForeignMessage     }
             set (value) {
                 result.hasOptionalForeignMessage = true
                 result.optionalForeignMessage = value
             }
        }
        func setOptionalForeignMessageBuilder(builderForValue:ForeignMessageBuilder) -> TestAllTypesBuilder {
          optionalForeignMessage = builderForValue.build()
          return self
        }
        func mergeOptionalForeignMessage(value:ForeignMessage) -> TestAllTypesBuilder {
          if (result.hasOptionalForeignMessage && result.optionalForeignMessage != ForeignMessage()) {
            result.optionalForeignMessage = ForeignMessage.builderWithPrototype(result.optionalForeignMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalForeignMessage = value
          }
          result.hasOptionalForeignMessage = true
          return self
        }
        func clearOptionalForeignMessage() -> TestAllTypesBuilder {
          result.hasOptionalForeignMessage = false
          result.optionalForeignMessage = ForeignMessage()
          return self
        }
        var hasOptionalImportMessage:Bool {
             get {
                 return result.hasOptionalImportMessage
             }
        }
        var optionalImportMessage:ImportMessage {
             get {
                 return result.optionalImportMessage     }
             set (value) {
                 result.hasOptionalImportMessage = true
                 result.optionalImportMessage = value
             }
        }
        func setOptionalImportMessageBuilder(builderForValue:ImportMessageBuilder) -> TestAllTypesBuilder {
          optionalImportMessage = builderForValue.build()
          return self
        }
        func mergeOptionalImportMessage(value:ImportMessage) -> TestAllTypesBuilder {
          if (result.hasOptionalImportMessage && result.optionalImportMessage != ImportMessage()) {
            result.optionalImportMessage = ImportMessage.builderWithPrototype(result.optionalImportMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalImportMessage = value
          }
          result.hasOptionalImportMessage = true
          return self
        }
        func clearOptionalImportMessage() -> TestAllTypesBuilder {
          result.hasOptionalImportMessage = false
          result.optionalImportMessage = ImportMessage()
          return self
        }
          var hasOptionalNestedEnum:Bool{
              get {
                  return result.hasOptionalNestedEnum
              }
          }
          var optionalNestedEnum:TestAllTypesNestedEnum {
              get {
                  return result.optionalNestedEnum
              }
              set (value) {
                  result.hasOptionalNestedEnum = true
                  result.optionalNestedEnum = value
              }
          }
          func clearOptionalNestedEnum() -> TestAllTypesBuilder {
             result.hasOptionalNestedEnum = false
             result.optionalNestedEnum = .TestAllTypesNestedEnumFoo
             return self
          }
          var hasOptionalForeignEnum:Bool{
              get {
                  return result.hasOptionalForeignEnum
              }
          }
          var optionalForeignEnum:ForeignEnum {
              get {
                  return result.optionalForeignEnum
              }
              set (value) {
                  result.hasOptionalForeignEnum = true
                  result.optionalForeignEnum = value
              }
          }
          func clearOptionalForeignEnum() -> TestAllTypesBuilder {
             result.hasOptionalForeignEnum = false
             result.optionalForeignEnum = .ForeignEnumForeignFoo
             return self
          }
          var hasOptionalImportEnum:Bool{
              get {
                  return result.hasOptionalImportEnum
              }
          }
          var optionalImportEnum:ImportEnum {
              get {
                  return result.optionalImportEnum
              }
              set (value) {
                  result.hasOptionalImportEnum = true
                  result.optionalImportEnum = value
              }
          }
          func clearOptionalImportEnum() -> TestAllTypesBuilder {
             result.hasOptionalImportEnum = false
             result.optionalImportEnum = .ImportEnumImportFoo
             return self
          }
        var hasOptionalStringPiece:Bool {
             get {
                  return result.hasOptionalStringPiece
             }
        }
        var optionalStringPiece:String {
             get {
                  return result.optionalStringPiece
             }
             set (value) {
                 result.hasOptionalStringPiece = true
                 result.optionalStringPiece = value
             }
        }
        func clearOptionalStringPiece() -> TestAllTypesBuilder{
             result.hasOptionalStringPiece = false
             result.optionalStringPiece = ""
             return self
        }
        var hasOptionalCord:Bool {
             get {
                  return result.hasOptionalCord
             }
        }
        var optionalCord:String {
             get {
                  return result.optionalCord
             }
             set (value) {
                 result.hasOptionalCord = true
                 result.optionalCord = value
             }
        }
        func clearOptionalCord() -> TestAllTypesBuilder{
             result.hasOptionalCord = false
             result.optionalCord = ""
             return self
        }
        var hasOptionalPublicImportMessage:Bool {
             get {
                 return result.hasOptionalPublicImportMessage
             }
        }
        var optionalPublicImportMessage:PublicImportMessage {
             get {
                 return result.optionalPublicImportMessage     }
             set (value) {
                 result.hasOptionalPublicImportMessage = true
                 result.optionalPublicImportMessage = value
             }
        }
        func setOptionalPublicImportMessageBuilder(builderForValue:PublicImportMessageBuilder) -> TestAllTypesBuilder {
          optionalPublicImportMessage = builderForValue.build()
          return self
        }
        func mergeOptionalPublicImportMessage(value:PublicImportMessage) -> TestAllTypesBuilder {
          if (result.hasOptionalPublicImportMessage && result.optionalPublicImportMessage != PublicImportMessage()) {
            result.optionalPublicImportMessage = PublicImportMessage.builderWithPrototype(result.optionalPublicImportMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalPublicImportMessage = value
          }
          result.hasOptionalPublicImportMessage = true
          return self
        }
        func clearOptionalPublicImportMessage() -> TestAllTypesBuilder {
          result.hasOptionalPublicImportMessage = false
          result.optionalPublicImportMessage = PublicImportMessage()
          return self
        }
        var hasOptionalLazyMessage:Bool {
             get {
                 return result.hasOptionalLazyMessage
             }
        }
        var optionalLazyMessage:TestAllTypesNestedMessage {
             get {
                 return result.optionalLazyMessage     }
             set (value) {
                 result.hasOptionalLazyMessage = true
                 result.optionalLazyMessage = value
             }
        }
        func setOptionalLazyMessageBuilder(builderForValue:TestAllTypesNestedMessageBuilder) -> TestAllTypesBuilder {
          optionalLazyMessage = builderForValue.build()
          return self
        }
        func mergeOptionalLazyMessage(value:TestAllTypesNestedMessage) -> TestAllTypesBuilder {
          if (result.hasOptionalLazyMessage && result.optionalLazyMessage != TestAllTypesNestedMessage()) {
            result.optionalLazyMessage = TestAllTypesNestedMessage.builderWithPrototype(result.optionalLazyMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalLazyMessage = value
          }
          result.hasOptionalLazyMessage = true
          return self
        }
        func clearOptionalLazyMessage() -> TestAllTypesBuilder {
          result.hasOptionalLazyMessage = false
          result.optionalLazyMessage = TestAllTypesNestedMessage()
          return self
        }
        var repeatedInt32:[Int32] {
             get {
                 return result.repeatedInt32
             }
             set (array) {
                 result.repeatedInt32 = array
             }
        }
        func clearRepeatedInt32() -> TestAllTypesBuilder {
           result.repeatedInt32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedInt64:[Int64] {
             get {
                 return result.repeatedInt64
             }
             set (array) {
                 result.repeatedInt64 = array
             }
        }
        func clearRepeatedInt64() -> TestAllTypesBuilder {
           result.repeatedInt64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedUint32:[UInt32] {
             get {
                 return result.repeatedUint32
             }
             set (array) {
                 result.repeatedUint32 = array
             }
        }
        func clearRepeatedUint32() -> TestAllTypesBuilder {
           result.repeatedUint32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedUint64:[UInt64] {
             get {
                 return result.repeatedUint64
             }
             set (array) {
                 result.repeatedUint64 = array
             }
        }
        func clearRepeatedUint64() -> TestAllTypesBuilder {
           result.repeatedUint64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSint32:[Int32] {
             get {
                 return result.repeatedSint32
             }
             set (array) {
                 result.repeatedSint32 = array
             }
        }
        func clearRepeatedSint32() -> TestAllTypesBuilder {
           result.repeatedSint32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSint64:[Int64] {
             get {
                 return result.repeatedSint64
             }
             set (array) {
                 result.repeatedSint64 = array
             }
        }
        func clearRepeatedSint64() -> TestAllTypesBuilder {
           result.repeatedSint64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFixed32:[UInt32] {
             get {
                 return result.repeatedFixed32
             }
             set (array) {
                 result.repeatedFixed32 = array
             }
        }
        func clearRepeatedFixed32() -> TestAllTypesBuilder {
           result.repeatedFixed32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFixed64:[UInt64] {
             get {
                 return result.repeatedFixed64
             }
             set (array) {
                 result.repeatedFixed64 = array
             }
        }
        func clearRepeatedFixed64() -> TestAllTypesBuilder {
           result.repeatedFixed64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSfixed32:[Int32] {
             get {
                 return result.repeatedSfixed32
             }
             set (array) {
                 result.repeatedSfixed32 = array
             }
        }
        func clearRepeatedSfixed32() -> TestAllTypesBuilder {
           result.repeatedSfixed32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSfixed64:[Int64] {
             get {
                 return result.repeatedSfixed64
             }
             set (array) {
                 result.repeatedSfixed64 = array
             }
        }
        func clearRepeatedSfixed64() -> TestAllTypesBuilder {
           result.repeatedSfixed64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFloat:[Float] {
             get {
                 return result.repeatedFloat
             }
             set (array) {
                 result.repeatedFloat = array
             }
        }
        func clearRepeatedFloat() -> TestAllTypesBuilder {
           result.repeatedFloat.removeAll(keepCapacity: false)
           return self
        }
        var repeatedDouble:[Double] {
             get {
                 return result.repeatedDouble
             }
             set (array) {
                 result.repeatedDouble = array
             }
        }
        func clearRepeatedDouble() -> TestAllTypesBuilder {
           result.repeatedDouble.removeAll(keepCapacity: false)
           return self
        }
        var repeatedBool:[Bool] {
             get {
                 return result.repeatedBool
             }
             set (array) {
                 result.repeatedBool = array
             }
        }
        func clearRepeatedBool() -> TestAllTypesBuilder {
           result.repeatedBool.removeAll(keepCapacity: false)
           return self
        }
        var repeatedString:[String] {
             get {
                 return result.repeatedString
             }
             set (array) {
                 result.repeatedString = array
             }
        }
        func clearRepeatedString() -> TestAllTypesBuilder {
           result.repeatedString.removeAll(keepCapacity: false)
           return self
        }
        var repeatedBytes:[[Byte]] {
             get {
                 return result.repeatedBytes
             }
             set (array) {
                 result.repeatedBytes = array
             }
        }
        func clearRepeatedBytes() -> TestAllTypesBuilder {
           result.repeatedBytes.removeAll(keepCapacity: false)
           return self
        }
        var repeatedGroup:[TestAllTypesRepeatedGroup] {
             get {
                 return result.repeatedGroup
             }
             set (value) {
                 result.repeatedGroup = value
             }
        }
        func clearRepeatedGroup() -> TestAllTypesBuilder {
          result.repeatedGroup.removeAll(keepCapacity: false)
          return self
        }
        var repeatedNestedMessage:[TestAllTypesNestedMessage] {
             get {
                 return result.repeatedNestedMessage
             }
             set (value) {
                 result.repeatedNestedMessage = value
             }
        }
        func clearRepeatedNestedMessage() -> TestAllTypesBuilder {
          result.repeatedNestedMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedForeignMessage:[ForeignMessage] {
             get {
                 return result.repeatedForeignMessage
             }
             set (value) {
                 result.repeatedForeignMessage = value
             }
        }
        func clearRepeatedForeignMessage() -> TestAllTypesBuilder {
          result.repeatedForeignMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedImportMessage:[ImportMessage] {
             get {
                 return result.repeatedImportMessage
             }
             set (value) {
                 result.repeatedImportMessage = value
             }
        }
        func clearRepeatedImportMessage() -> TestAllTypesBuilder {
          result.repeatedImportMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedNestedEnum:[TestAllTypesNestedEnum] {
            get {
                return result.repeatedNestedEnum
            }
            set (value) {
                result.repeatedNestedEnum += value
            }
        }
        func clearRepeatedNestedEnum() -> TestAllTypesBuilder {
          result.repeatedNestedEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedForeignEnum:[ForeignEnum] {
            get {
                return result.repeatedForeignEnum
            }
            set (value) {
                result.repeatedForeignEnum += value
            }
        }
        func clearRepeatedForeignEnum() -> TestAllTypesBuilder {
          result.repeatedForeignEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedImportEnum:[ImportEnum] {
            get {
                return result.repeatedImportEnum
            }
            set (value) {
                result.repeatedImportEnum += value
            }
        }
        func clearRepeatedImportEnum() -> TestAllTypesBuilder {
          result.repeatedImportEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedStringPiece:[String] {
             get {
                 return result.repeatedStringPiece
             }
             set (array) {
                 result.repeatedStringPiece = array
             }
        }
        func clearRepeatedStringPiece() -> TestAllTypesBuilder {
           result.repeatedStringPiece.removeAll(keepCapacity: false)
           return self
        }
        var repeatedCord:[String] {
             get {
                 return result.repeatedCord
             }
             set (array) {
                 result.repeatedCord = array
             }
        }
        func clearRepeatedCord() -> TestAllTypesBuilder {
           result.repeatedCord.removeAll(keepCapacity: false)
           return self
        }
        var repeatedLazyMessage:[TestAllTypesNestedMessage] {
             get {
                 return result.repeatedLazyMessage
             }
             set (value) {
                 result.repeatedLazyMessage = value
             }
        }
        func clearRepeatedLazyMessage() -> TestAllTypesBuilder {
          result.repeatedLazyMessage.removeAll(keepCapacity: false)
          return self
        }
        var hasDefaultInt32:Bool {
             get {
                  return result.hasDefaultInt32
             }
        }
        var defaultInt32:Int32 {
             get {
                  return result.defaultInt32
             }
             set (value) {
                 result.hasDefaultInt32 = true
                 result.defaultInt32 = value
             }
        }
        func clearDefaultInt32() -> TestAllTypesBuilder{
             result.hasDefaultInt32 = false
             result.defaultInt32 = 41
             return self
        }
        var hasDefaultInt64:Bool {
             get {
                  return result.hasDefaultInt64
             }
        }
        var defaultInt64:Int64 {
             get {
                  return result.defaultInt64
             }
             set (value) {
                 result.hasDefaultInt64 = true
                 result.defaultInt64 = value
             }
        }
        func clearDefaultInt64() -> TestAllTypesBuilder{
             result.hasDefaultInt64 = false
             result.defaultInt64 = 42
             return self
        }
        var hasDefaultUint32:Bool {
             get {
                  return result.hasDefaultUint32
             }
        }
        var defaultUint32:UInt32 {
             get {
                  return result.defaultUint32
             }
             set (value) {
                 result.hasDefaultUint32 = true
                 result.defaultUint32 = value
             }
        }
        func clearDefaultUint32() -> TestAllTypesBuilder{
             result.hasDefaultUint32 = false
             result.defaultUint32 = 43
             return self
        }
        var hasDefaultUint64:Bool {
             get {
                  return result.hasDefaultUint64
             }
        }
        var defaultUint64:UInt64 {
             get {
                  return result.defaultUint64
             }
             set (value) {
                 result.hasDefaultUint64 = true
                 result.defaultUint64 = value
             }
        }
        func clearDefaultUint64() -> TestAllTypesBuilder{
             result.hasDefaultUint64 = false
             result.defaultUint64 = 44
             return self
        }
        var hasDefaultSint32:Bool {
             get {
                  return result.hasDefaultSint32
             }
        }
        var defaultSint32:Int32 {
             get {
                  return result.defaultSint32
             }
             set (value) {
                 result.hasDefaultSint32 = true
                 result.defaultSint32 = value
             }
        }
        func clearDefaultSint32() -> TestAllTypesBuilder{
             result.hasDefaultSint32 = false
             result.defaultSint32 = -45
             return self
        }
        var hasDefaultSint64:Bool {
             get {
                  return result.hasDefaultSint64
             }
        }
        var defaultSint64:Int64 {
             get {
                  return result.defaultSint64
             }
             set (value) {
                 result.hasDefaultSint64 = true
                 result.defaultSint64 = value
             }
        }
        func clearDefaultSint64() -> TestAllTypesBuilder{
             result.hasDefaultSint64 = false
             result.defaultSint64 = 46
             return self
        }
        var hasDefaultFixed32:Bool {
             get {
                  return result.hasDefaultFixed32
             }
        }
        var defaultFixed32:UInt32 {
             get {
                  return result.defaultFixed32
             }
             set (value) {
                 result.hasDefaultFixed32 = true
                 result.defaultFixed32 = value
             }
        }
        func clearDefaultFixed32() -> TestAllTypesBuilder{
             result.hasDefaultFixed32 = false
             result.defaultFixed32 = 47
             return self
        }
        var hasDefaultFixed64:Bool {
             get {
                  return result.hasDefaultFixed64
             }
        }
        var defaultFixed64:UInt64 {
             get {
                  return result.defaultFixed64
             }
             set (value) {
                 result.hasDefaultFixed64 = true
                 result.defaultFixed64 = value
             }
        }
        func clearDefaultFixed64() -> TestAllTypesBuilder{
             result.hasDefaultFixed64 = false
             result.defaultFixed64 = 48
             return self
        }
        var hasDefaultSfixed32:Bool {
             get {
                  return result.hasDefaultSfixed32
             }
        }
        var defaultSfixed32:Int32 {
             get {
                  return result.defaultSfixed32
             }
             set (value) {
                 result.hasDefaultSfixed32 = true
                 result.defaultSfixed32 = value
             }
        }
        func clearDefaultSfixed32() -> TestAllTypesBuilder{
             result.hasDefaultSfixed32 = false
             result.defaultSfixed32 = 49
             return self
        }
        var hasDefaultSfixed64:Bool {
             get {
                  return result.hasDefaultSfixed64
             }
        }
        var defaultSfixed64:Int64 {
             get {
                  return result.defaultSfixed64
             }
             set (value) {
                 result.hasDefaultSfixed64 = true
                 result.defaultSfixed64 = value
             }
        }
        func clearDefaultSfixed64() -> TestAllTypesBuilder{
             result.hasDefaultSfixed64 = false
             result.defaultSfixed64 = -50
             return self
        }
        var hasDefaultFloat:Bool {
             get {
                  return result.hasDefaultFloat
             }
        }
        var defaultFloat:Float {
             get {
                  return result.defaultFloat
             }
             set (value) {
                 result.hasDefaultFloat = true
                 result.defaultFloat = value
             }
        }
        func clearDefaultFloat() -> TestAllTypesBuilder{
             result.hasDefaultFloat = false
             result.defaultFloat = 51.5
             return self
        }
        var hasDefaultDouble:Bool {
             get {
                  return result.hasDefaultDouble
             }
        }
        var defaultDouble:Double {
             get {
                  return result.defaultDouble
             }
             set (value) {
                 result.hasDefaultDouble = true
                 result.defaultDouble = value
             }
        }
        func clearDefaultDouble() -> TestAllTypesBuilder{
             result.hasDefaultDouble = false
             result.defaultDouble = 52000
             return self
        }
        var hasDefaultBool:Bool {
             get {
                  return result.hasDefaultBool
             }
        }
        var defaultBool:Bool {
             get {
                  return result.defaultBool
             }
             set (value) {
                 result.hasDefaultBool = true
                 result.defaultBool = value
             }
        }
        func clearDefaultBool() -> TestAllTypesBuilder{
             result.hasDefaultBool = false
             result.defaultBool = true
             return self
        }
        var hasDefaultString:Bool {
             get {
                  return result.hasDefaultString
             }
        }
        var defaultString:String {
             get {
                  return result.defaultString
             }
             set (value) {
                 result.hasDefaultString = true
                 result.defaultString = value
             }
        }
        func clearDefaultString() -> TestAllTypesBuilder{
             result.hasDefaultString = false
             result.defaultString = "hello"
             return self
        }
        var hasDefaultBytes:Bool {
             get {
                  return result.hasDefaultBytes
             }
        }
        var defaultBytes:[Byte] {
             get {
                  return result.defaultBytes
             }
             set (value) {
                 result.hasDefaultBytes = true
                 result.defaultBytes = value
             }
        }
        func clearDefaultBytes() -> TestAllTypesBuilder{
             result.hasDefaultBytes = false
             result.defaultBytes = ([Byte]() + "world".utf8)
             return self
        }
          var hasDefaultNestedEnum:Bool{
              get {
                  return result.hasDefaultNestedEnum
              }
          }
          var defaultNestedEnum:TestAllTypesNestedEnum {
              get {
                  return result.defaultNestedEnum
              }
              set (value) {
                  result.hasDefaultNestedEnum = true
                  result.defaultNestedEnum = value
              }
          }
          func clearDefaultNestedEnum() -> TestAllTypesBuilder {
             result.hasDefaultNestedEnum = false
             result.defaultNestedEnum = .TestAllTypesNestedEnumBar
             return self
          }
          var hasDefaultForeignEnum:Bool{
              get {
                  return result.hasDefaultForeignEnum
              }
          }
          var defaultForeignEnum:ForeignEnum {
              get {
                  return result.defaultForeignEnum
              }
              set (value) {
                  result.hasDefaultForeignEnum = true
                  result.defaultForeignEnum = value
              }
          }
          func clearDefaultForeignEnum() -> TestAllTypesBuilder {
             result.hasDefaultForeignEnum = false
             result.defaultForeignEnum = .ForeignEnumForeignBar
             return self
          }
          var hasDefaultImportEnum:Bool{
              get {
                  return result.hasDefaultImportEnum
              }
          }
          var defaultImportEnum:ImportEnum {
              get {
                  return result.defaultImportEnum
              }
              set (value) {
                  result.hasDefaultImportEnum = true
                  result.defaultImportEnum = value
              }
          }
          func clearDefaultImportEnum() -> TestAllTypesBuilder {
             result.hasDefaultImportEnum = false
             result.defaultImportEnum = .ImportEnumImportBar
             return self
          }
        var hasDefaultStringPiece:Bool {
             get {
                  return result.hasDefaultStringPiece
             }
        }
        var defaultStringPiece:String {
             get {
                  return result.defaultStringPiece
             }
             set (value) {
                 result.hasDefaultStringPiece = true
                 result.defaultStringPiece = value
             }
        }
        func clearDefaultStringPiece() -> TestAllTypesBuilder{
             result.hasDefaultStringPiece = false
             result.defaultStringPiece = "abc"
             return self
        }
        var hasDefaultCord:Bool {
             get {
                  return result.hasDefaultCord
             }
        }
        var defaultCord:String {
             get {
                  return result.defaultCord
             }
             set (value) {
                 result.hasDefaultCord = true
                 result.defaultCord = value
             }
        }
        func clearDefaultCord() -> TestAllTypesBuilder{
             result.hasDefaultCord = false
             result.defaultCord = "123"
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> TestAllTypesBuilder {
          result = TestAllTypes()
          return self
        }
        override func clone() -> TestAllTypesBuilder {
          return TestAllTypes.builderWithPrototype(result)
        }
        func build() -> TestAllTypes {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> TestAllTypes {
          var returnMe:TestAllTypes = result
          return returnMe
        }
        func mergeFrom(other:TestAllTypes) -> TestAllTypesBuilder {
          if (other == TestAllTypes()) {
            return self
          }
          if other.hasOptionalInt32 {
               optionalInt32 = other.optionalInt32
          }
          if other.hasOptionalInt64 {
               optionalInt64 = other.optionalInt64
          }
          if other.hasOptionalUint32 {
               optionalUint32 = other.optionalUint32
          }
          if other.hasOptionalUint64 {
               optionalUint64 = other.optionalUint64
          }
          if other.hasOptionalSint32 {
               optionalSint32 = other.optionalSint32
          }
          if other.hasOptionalSint64 {
               optionalSint64 = other.optionalSint64
          }
          if other.hasOptionalFixed32 {
               optionalFixed32 = other.optionalFixed32
          }
          if other.hasOptionalFixed64 {
               optionalFixed64 = other.optionalFixed64
          }
          if other.hasOptionalSfixed32 {
               optionalSfixed32 = other.optionalSfixed32
          }
          if other.hasOptionalSfixed64 {
               optionalSfixed64 = other.optionalSfixed64
          }
          if other.hasOptionalFloat {
               optionalFloat = other.optionalFloat
          }
          if other.hasOptionalDouble {
               optionalDouble = other.optionalDouble
          }
          if other.hasOptionalBool {
               optionalBool = other.optionalBool
          }
          if other.hasOptionalString {
               optionalString = other.optionalString
          }
          if other.hasOptionalBytes {
               optionalBytes = other.optionalBytes
          }
          if (other.hasOptionalGroup) {
              mergeOptionalGroup(other.optionalGroup)
          }
          if (other.hasOptionalNestedMessage) {
              mergeOptionalNestedMessage(other.optionalNestedMessage)
          }
          if (other.hasOptionalForeignMessage) {
              mergeOptionalForeignMessage(other.optionalForeignMessage)
          }
          if (other.hasOptionalImportMessage) {
              mergeOptionalImportMessage(other.optionalImportMessage)
          }
          if other.hasOptionalNestedEnum {
               optionalNestedEnum = other.optionalNestedEnum
          }
          if other.hasOptionalForeignEnum {
               optionalForeignEnum = other.optionalForeignEnum
          }
          if other.hasOptionalImportEnum {
               optionalImportEnum = other.optionalImportEnum
          }
          if other.hasOptionalStringPiece {
               optionalStringPiece = other.optionalStringPiece
          }
          if other.hasOptionalCord {
               optionalCord = other.optionalCord
          }
          if (other.hasOptionalPublicImportMessage) {
              mergeOptionalPublicImportMessage(other.optionalPublicImportMessage)
          }
          if (other.hasOptionalLazyMessage) {
              mergeOptionalLazyMessage(other.optionalLazyMessage)
          }
          if !other.repeatedInt32.isEmpty {
              result.repeatedInt32 += other.repeatedInt32
          }
          if !other.repeatedInt64.isEmpty {
              result.repeatedInt64 += other.repeatedInt64
          }
          if !other.repeatedUint32.isEmpty {
              result.repeatedUint32 += other.repeatedUint32
          }
          if !other.repeatedUint64.isEmpty {
              result.repeatedUint64 += other.repeatedUint64
          }
          if !other.repeatedSint32.isEmpty {
              result.repeatedSint32 += other.repeatedSint32
          }
          if !other.repeatedSint64.isEmpty {
              result.repeatedSint64 += other.repeatedSint64
          }
          if !other.repeatedFixed32.isEmpty {
              result.repeatedFixed32 += other.repeatedFixed32
          }
          if !other.repeatedFixed64.isEmpty {
              result.repeatedFixed64 += other.repeatedFixed64
          }
          if !other.repeatedSfixed32.isEmpty {
              result.repeatedSfixed32 += other.repeatedSfixed32
          }
          if !other.repeatedSfixed64.isEmpty {
              result.repeatedSfixed64 += other.repeatedSfixed64
          }
          if !other.repeatedFloat.isEmpty {
              result.repeatedFloat += other.repeatedFloat
          }
          if !other.repeatedDouble.isEmpty {
              result.repeatedDouble += other.repeatedDouble
          }
          if !other.repeatedBool.isEmpty {
              result.repeatedBool += other.repeatedBool
          }
          if !other.repeatedString.isEmpty {
              result.repeatedString += other.repeatedString
          }
          if !other.repeatedBytes.isEmpty {
              result.repeatedBytes += other.repeatedBytes
          }
          if !other.repeatedGroup.isEmpty  {
             result.repeatedGroup += other.repeatedGroup
          }
          if !other.repeatedNestedMessage.isEmpty  {
             result.repeatedNestedMessage += other.repeatedNestedMessage
          }
          if !other.repeatedForeignMessage.isEmpty  {
             result.repeatedForeignMessage += other.repeatedForeignMessage
          }
          if !other.repeatedImportMessage.isEmpty  {
             result.repeatedImportMessage += other.repeatedImportMessage
          }
          if !other.repeatedNestedEnum.isEmpty {
             result.repeatedNestedEnum += other.repeatedNestedEnum
          }
          if !other.repeatedForeignEnum.isEmpty {
             result.repeatedForeignEnum += other.repeatedForeignEnum
          }
          if !other.repeatedImportEnum.isEmpty {
             result.repeatedImportEnum += other.repeatedImportEnum
          }
          if !other.repeatedStringPiece.isEmpty {
              result.repeatedStringPiece += other.repeatedStringPiece
          }
          if !other.repeatedCord.isEmpty {
              result.repeatedCord += other.repeatedCord
          }
          if !other.repeatedLazyMessage.isEmpty  {
             result.repeatedLazyMessage += other.repeatedLazyMessage
          }
          if other.hasDefaultInt32 {
               defaultInt32 = other.defaultInt32
          }
          if other.hasDefaultInt64 {
               defaultInt64 = other.defaultInt64
          }
          if other.hasDefaultUint32 {
               defaultUint32 = other.defaultUint32
          }
          if other.hasDefaultUint64 {
               defaultUint64 = other.defaultUint64
          }
          if other.hasDefaultSint32 {
               defaultSint32 = other.defaultSint32
          }
          if other.hasDefaultSint64 {
               defaultSint64 = other.defaultSint64
          }
          if other.hasDefaultFixed32 {
               defaultFixed32 = other.defaultFixed32
          }
          if other.hasDefaultFixed64 {
               defaultFixed64 = other.defaultFixed64
          }
          if other.hasDefaultSfixed32 {
               defaultSfixed32 = other.defaultSfixed32
          }
          if other.hasDefaultSfixed64 {
               defaultSfixed64 = other.defaultSfixed64
          }
          if other.hasDefaultFloat {
               defaultFloat = other.defaultFloat
          }
          if other.hasDefaultDouble {
               defaultDouble = other.defaultDouble
          }
          if other.hasDefaultBool {
               defaultBool = other.defaultBool
          }
          if other.hasDefaultString {
               defaultString = other.defaultString
          }
          if other.hasDefaultBytes {
               defaultBytes = other.defaultBytes
          }
          if other.hasDefaultNestedEnum {
               defaultNestedEnum = other.defaultNestedEnum
          }
          if other.hasDefaultForeignEnum {
               defaultForeignEnum = other.defaultForeignEnum
          }
          if other.hasDefaultImportEnum {
               defaultImportEnum = other.defaultImportEnum
          }
          if other.hasDefaultStringPiece {
               defaultStringPiece = other.defaultStringPiece
          }
          if other.hasDefaultCord {
               defaultCord = other.defaultCord
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 8 {
                optionalInt32 = input.readInt32()
              }
              else if tag == 16 {
                optionalInt64 = input.readInt64()
              }
              else if tag == 24 {
                optionalUint32 = input.readUInt32()
              }
              else if tag == 32 {
                optionalUint64 = input.readUInt64()
              }
              else if tag == 40 {
                optionalSint32 = input.readSInt32()
              }
              else if tag == 48 {
                optionalSint64 = input.readSInt64()
              }
              else if tag == 61 {
                optionalFixed32 = input.readFixed32()
              }
              else if tag == 65 {
                optionalFixed64 = input.readFixed64()
              }
              else if tag == 77 {
                optionalSfixed32 = input.readSFixed32()
              }
              else if tag == 81 {
                optionalSfixed64 = input.readSFixed64()
              }
              else if tag == 93 {
                optionalFloat = input.readFloat()
              }
              else if tag == 97 {
                optionalDouble = input.readDouble()
              }
              else if tag == 104 {
                optionalBool = input.readBool()
              }
              else if tag == 114 {
                optionalString = input.readString()
              }
              else if tag == 122 {
                optionalBytes = input.readData()
              }
              else if tag == 131 {
                var subBuilder:TestAllTypesOptionalGroupBuilder = TestAllTypesOptionalGroup.builder()
                if hasOptionalGroup {
                  subBuilder.mergeFrom(optionalGroup)
                }
                input.readGroup(16, builder:subBuilder, extensionRegistry:extensionRegistry)
                optionalGroup = subBuilder.buildPartial()
              }
              else if tag == 146 {
                var subBuilder:TestAllTypesNestedMessageBuilder = TestAllTypesNestedMessage.builder()
                if hasOptionalNestedMessage {
                  subBuilder.mergeFrom(optionalNestedMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalNestedMessage = subBuilder.buildPartial()
              }
              else if tag == 154 {
                var subBuilder:ForeignMessageBuilder = ForeignMessage.builder()
                if hasOptionalForeignMessage {
                  subBuilder.mergeFrom(optionalForeignMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalForeignMessage = subBuilder.buildPartial()
              }
              else if tag == 162 {
                var subBuilder:ImportMessageBuilder = ImportMessage.builder()
                if hasOptionalImportMessage {
                  subBuilder.mergeFrom(optionalImportMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalImportMessage = subBuilder.buildPartial()
              }
              else if tag == 168 {
                var value = input.readEnum()
                var enums:TestAllTypesNestedEnum = TestAllTypesNestedEnum.fromRaw(value)!
                if (TestAllTypesNestedEnum.TestAllTypesNestedEnumIsValidValue(enums)) {
                     optionalNestedEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(21, value:Int64(value))
                }
              }
              else if tag == 176 {
                var value = input.readEnum()
                var enums:ForeignEnum = ForeignEnum.fromRaw(value)!
                if (ForeignEnum.ForeignEnumIsValidValue(enums)) {
                     optionalForeignEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(22, value:Int64(value))
                }
              }
              else if tag == 184 {
                var value = input.readEnum()
                var enums:ImportEnum = ImportEnum.fromRaw(value)!
                if (ImportEnum.ImportEnumIsValidValue(enums)) {
                     optionalImportEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(23, value:Int64(value))
                }
              }
              else if tag == 194 {
                optionalStringPiece = input.readString()
              }
              else if tag == 202 {
                optionalCord = input.readString()
              }
              else if tag == 210 {
                var subBuilder:PublicImportMessageBuilder = PublicImportMessage.builder()
                if hasOptionalPublicImportMessage {
                  subBuilder.mergeFrom(optionalPublicImportMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalPublicImportMessage = subBuilder.buildPartial()
              }
              else if tag == 218 {
                var subBuilder:TestAllTypesNestedMessageBuilder = TestAllTypesNestedMessage.builder()
                if hasOptionalLazyMessage {
                  subBuilder.mergeFrom(optionalLazyMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalLazyMessage = subBuilder.buildPartial()
              }
              else if tag == 248 {
                repeatedInt32 += [input.readInt32()]
              }
              else if tag == 256 {
                repeatedInt64 += [input.readInt64()]
              }
              else if tag == 264 {
                repeatedUint32 += [input.readUInt32()]
              }
              else if tag == 272 {
                repeatedUint64 += [input.readUInt64()]
              }
              else if tag == 280 {
                repeatedSint32 += [input.readSInt32()]
              }
              else if tag == 288 {
                repeatedSint64 += [input.readSInt64()]
              }
              else if tag == 301 {
                repeatedFixed32 += [input.readFixed32()]
              }
              else if tag == 305 {
                repeatedFixed64 += [input.readFixed64()]
              }
              else if tag == 317 {
                repeatedSfixed32 += [input.readSFixed32()]
              }
              else if tag == 321 {
                repeatedSfixed64 += [input.readSFixed64()]
              }
              else if tag == 333 {
                repeatedFloat += [input.readFloat()]
              }
              else if tag == 337 {
                repeatedDouble += [input.readDouble()]
              }
              else if tag == 344 {
                repeatedBool += [input.readBool()]
              }
              else if tag == 354 {
                repeatedString += [input.readString()]
              }
              else if tag == 362 {
                repeatedBytes += [input.readData()]
              }
              else if tag == 371 {
                var subBuilder = TestAllTypesRepeatedGroup.builder()
                input.readGroup(46,builder:subBuilder,extensionRegistry:extensionRegistry)
                repeatedGroup += [subBuilder.buildPartial()]
              }
              else if tag == 386 {
                var subBuilder = TestAllTypesNestedMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedNestedMessage += [subBuilder.buildPartial()]
              }
              else if tag == 394 {
                var subBuilder = ForeignMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedForeignMessage += [subBuilder.buildPartial()]
              }
              else if tag == 402 {
                var subBuilder = ImportMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedImportMessage += [subBuilder.buildPartial()]
              }
              else if tag == 408 {
                var value:TestAllTypesNestedEnum = TestAllTypesNestedEnum.fromRaw(input.readEnum())!
                if TestAllTypesNestedEnum.TestAllTypesNestedEnumIsValidValue(value) {
                     result.repeatedNestedEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(51, value:Int64(value.toRaw()))
                }
              }
              else if tag == 416 {
                var value:ForeignEnum = ForeignEnum.fromRaw(input.readEnum())!
                if ForeignEnum.ForeignEnumIsValidValue(value) {
                     result.repeatedForeignEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(52, value:Int64(value.toRaw()))
                }
              }
              else if tag == 424 {
                var value:ImportEnum = ImportEnum.fromRaw(input.readEnum())!
                if ImportEnum.ImportEnumIsValidValue(value) {
                     result.repeatedImportEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(53, value:Int64(value.toRaw()))
                }
              }
              else if tag == 434 {
                repeatedStringPiece += [input.readString()]
              }
              else if tag == 442 {
                repeatedCord += [input.readString()]
              }
              else if tag == 458 {
                var subBuilder = TestAllTypesNestedMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedLazyMessage += [subBuilder.buildPartial()]
              }
              else if tag == 488 {
                defaultInt32 = input.readInt32()
              }
              else if tag == 496 {
                defaultInt64 = input.readInt64()
              }
              else if tag == 504 {
                defaultUint32 = input.readUInt32()
              }
              else if tag == 512 {
                defaultUint64 = input.readUInt64()
              }
              else if tag == 520 {
                defaultSint32 = input.readSInt32()
              }
              else if tag == 528 {
                defaultSint64 = input.readSInt64()
              }
              else if tag == 541 {
                defaultFixed32 = input.readFixed32()
              }
              else if tag == 545 {
                defaultFixed64 = input.readFixed64()
              }
              else if tag == 557 {
                defaultSfixed32 = input.readSFixed32()
              }
              else if tag == 561 {
                defaultSfixed64 = input.readSFixed64()
              }
              else if tag == 573 {
                defaultFloat = input.readFloat()
              }
              else if tag == 577 {
                defaultDouble = input.readDouble()
              }
              else if tag == 584 {
                defaultBool = input.readBool()
              }
              else if tag == 594 {
                defaultString = input.readString()
              }
              else if tag == 602 {
                defaultBytes = input.readData()
              }
              else if tag == 648 {
                var value = input.readEnum()
                var enums:TestAllTypesNestedEnum = TestAllTypesNestedEnum.fromRaw(value)!
                if (TestAllTypesNestedEnum.TestAllTypesNestedEnumIsValidValue(enums)) {
                     defaultNestedEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(81, value:Int64(value))
                }
              }
              else if tag == 656 {
                var value = input.readEnum()
                var enums:ForeignEnum = ForeignEnum.fromRaw(value)!
                if (ForeignEnum.ForeignEnumIsValidValue(enums)) {
                     defaultForeignEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(82, value:Int64(value))
                }
              }
              else if tag == 664 {
                var value = input.readEnum()
                var enums:ImportEnum = ImportEnum.fromRaw(value)!
                if (ImportEnum.ImportEnumIsValidValue(enums)) {
                     defaultImportEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(83, value:Int64(value))
                }
              }
              else if tag == 674 {
                defaultStringPiece = input.readString()
              }
              else if tag == 682 {
                defaultCord = input.readString()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        func == (lhs: TestDeprecatedFields, rhs: TestDeprecatedFields) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              fieldCheck = fieldCheck && (lhs.hasDeprecatedInt32 == rhs.hasDeprecatedInt32) && (!lhs.hasDeprecatedInt32 || lhs.deprecatedInt32 == rhs.deprecatedInt32)
               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        }
        class TestDeprecatedFields : GeneratedMessage {
          private(set) var hasDeprecatedInt32:Bool = false
          private(set) var deprecatedInt32:Int32 = 0

          override init() {
               super.init()
          }
          override func isInitialized() -> Bool {
            return true
          }
          override func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasDeprecatedInt32 {
              output.writeInt32(1, value:deprecatedInt32)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
              return size
            }

            size = 0
            if hasDeprecatedInt32 {
              size += WireFormat.computeInt32Size(1, value:deprecatedInt32)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          class func parseFromData(data:[Byte]) -> TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromData(data).build()
          }
          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromInputStream(input:NSInputStream) -> TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromInputStream(input).build()
          }
          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream) -> TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromCodedInputStream(input).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDeprecatedFields {
            return TestDeprecatedFields.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func builder() -> TestDeprecatedFieldsBuilder {
            return TestDeprecatedFieldsBuilder()
          }
          class func builderWithPrototype(prototype:TestDeprecatedFields) -> TestDeprecatedFieldsBuilder {
            return TestDeprecatedFields.builder().mergeFrom(prototype)
          }
          func builder() -> TestDeprecatedFieldsBuilder {
            return TestDeprecatedFields.builder()
          }
          func toBuilder() -> TestDeprecatedFieldsBuilder {
            return TestDeprecatedFields.builderWithPrototype(self)
          }
          override func writeDescriptionTo(inout output:String, indent:String) {
            if hasDeprecatedInt32 {
              output += "\(indent) deprecatedInt32: \(deprecatedInt32) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override var hashValue:Int {
           get {
                var hashCode:Int = 7
                if hasDeprecatedInt32 {
                   hashCode = (hashCode &* 31) &+ deprecatedInt32.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
              }
            }
          }

          class TestDeprecatedFieldsBuilder : GeneratedMessageBuilder {
          private var result:TestDeprecatedFields

          override init () {
             result = TestDeprecatedFields()
          }
          var hasDeprecatedInt32:Bool {
               get {
                    return result.hasDeprecatedInt32
               }
          }
          var deprecatedInt32:Int32 {
               get {
                    return result.deprecatedInt32
               }
               set (value) {
                   result.hasDeprecatedInt32 = true
                   result.deprecatedInt32 = value
               }
          }
          func clearDeprecatedInt32() -> TestDeprecatedFieldsBuilder{
               result.hasDeprecatedInt32 = false
               result.deprecatedInt32 = 0
               return self
          }
          override var internalGetResult:GeneratedMessage {
               get {
                  return result
               }
          }
          override func clear() -> TestDeprecatedFieldsBuilder {
            result = TestDeprecatedFields()
            return self
          }
          override func clone() -> TestDeprecatedFieldsBuilder {
            return TestDeprecatedFields.builderWithPrototype(result)
          }
          func build() -> TestDeprecatedFields {
               checkInitialized()
               return buildPartial()
          }
          func buildPartial() -> TestDeprecatedFields {
            var returnMe:TestDeprecatedFields = result
            return returnMe
          }
          func mergeFrom(other:TestDeprecatedFields) -> TestDeprecatedFieldsBuilder {
            if (other == TestDeprecatedFields()) {
              return self
            }
            if other.hasDeprecatedInt32 {
                 deprecatedInt32 = other.deprecatedInt32
            }
              mergeUnknownFields(other.unknownFields)
            return self
          }
          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDeprecatedFieldsBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDeprecatedFieldsBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag:Int32 = input.readTag()
                if tag == 0 {
                     self.unknownFields = unknownFieldsBuilder.build()
                     return self}
                else if tag == 8 {
                  deprecatedInt32 = input.readInt32()
                }
                else {
                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                          unknownFields = unknownFieldsBuilder.build()
                          return self
                      }
                }
                }
             }
          }

          func == (lhs: ForeignMessage, rhs: ForeignMessage) -> Bool {
                if (lhs === rhs) {
                  return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          }
          class ForeignMessage : GeneratedMessage {
            private(set) var hasC:Bool = false
            private(set) var c:Int32 = 0

            override init() {
                 super.init()
            }
            override func isInitialized() -> Bool {
              return true
            }
            override func writeToCodedOutputStream(output:CodedOutputStream) {
              if hasC {
                output.writeInt32(1, value:c)
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override func serializedSize() -> Int32 {
              var size:Int32 = memoizedSerializedSize
              if size != -1 {
                return size
              }

              size = 0
              if hasC {
                size += WireFormat.computeInt32Size(1, value:c)
              }
              size += unknownFields.serializedSize()
              memoizedSerializedSize = size
              return size
            }
            class func parseFromData(data:[Byte]) -> ForeignMessage {
              return ForeignMessage.builder().mergeFromData(data).build()
            }
            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ForeignMessage {
              return ForeignMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromInputStream(input:NSInputStream) -> ForeignMessage {
              return ForeignMessage.builder().mergeFromInputStream(input).build()
            }
            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ForeignMessage {
              return ForeignMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream) -> ForeignMessage {
              return ForeignMessage.builder().mergeFromCodedInputStream(input).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ForeignMessage {
              return ForeignMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func builder() -> ForeignMessageBuilder {
              return ForeignMessageBuilder()
            }
            class func builderWithPrototype(prototype:ForeignMessage) -> ForeignMessageBuilder {
              return ForeignMessage.builder().mergeFrom(prototype)
            }
            func builder() -> ForeignMessageBuilder {
              return ForeignMessage.builder()
            }
            func toBuilder() -> ForeignMessageBuilder {
              return ForeignMessage.builderWithPrototype(self)
            }
            override func writeDescriptionTo(inout output:String, indent:String) {
              if hasC {
                output += "\(indent) c: \(c) \n"
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override var hashValue:Int {
             get {
                  var hashCode:Int = 7
                  if hasC {
                     hashCode = (hashCode &* 31) &+ c.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
                }
              }
            }

            class ForeignMessageBuilder : GeneratedMessageBuilder {
            private var result:ForeignMessage

            override init () {
               result = ForeignMessage()
            }
            var hasC:Bool {
                 get {
                      return result.hasC
                 }
            }
            var c:Int32 {
                 get {
                      return result.c
                 }
                 set (value) {
                     result.hasC = true
                     result.c = value
                 }
            }
            func clearC() -> ForeignMessageBuilder{
                 result.hasC = false
                 result.c = 0
                 return self
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> ForeignMessageBuilder {
              result = ForeignMessage()
              return self
            }
            override func clone() -> ForeignMessageBuilder {
              return ForeignMessage.builderWithPrototype(result)
            }
            func build() -> ForeignMessage {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> ForeignMessage {
              var returnMe:ForeignMessage = result
              return returnMe
            }
            func mergeFrom(other:ForeignMessage) -> ForeignMessageBuilder {
              if (other == ForeignMessage()) {
                return self
              }
              if other.hasC {
                   c = other.c
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->ForeignMessageBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ForeignMessageBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else if tag == 8 {
                    c = input.readInt32()
                  }
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }

            func == (lhs: TestAllExtensions, rhs: TestAllExtensions) -> Bool {
                  if (lhs === rhs) {
                    return true
                  }
                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            }
            class TestAllExtensions : ExtendableMessage {
              override init() {
                   super.init()
              }
              override func isInitialized() -> Bool {
                if !extensionsAreInitialized() {
                  return false
                }
                return true
              }
              override func writeToCodedOutputStream(output:CodedOutputStream) {
                writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
                unknownFields.writeToCodedOutputStream(output)
              }
              override func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                  return size
                }

                size = 0
                size += extensionsSerializedSize()
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              class func parseFromData(data:[Byte]) -> TestAllExtensions {
                return TestAllExtensions.builder().mergeFromData(data).build()
              }
              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllExtensions {
                return TestAllExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromInputStream(input:NSInputStream) -> TestAllExtensions {
                return TestAllExtensions.builder().mergeFromInputStream(input).build()
              }
              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllExtensions {
                return TestAllExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllExtensions {
                return TestAllExtensions.builder().mergeFromCodedInputStream(input).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllExtensions {
                return TestAllExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func builder() -> TestAllExtensionsBuilder {
                return TestAllExtensionsBuilder()
              }
              class func builderWithPrototype(prototype:TestAllExtensions) -> TestAllExtensionsBuilder {
                return TestAllExtensions.builder().mergeFrom(prototype)
              }
              func builder() -> TestAllExtensionsBuilder {
                return TestAllExtensions.builder()
              }
              func toBuilder() -> TestAllExtensionsBuilder {
                return TestAllExtensions.builderWithPrototype(self)
              }
              override func writeDescriptionTo(inout output:String, indent:String) {
                writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override var hashValue:Int {
               get {
                    var hashCode:Int = 7
                    hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                  }
                }
              }

              class TestAllExtensionsBuilder : ExtendableMessageBuilder {
              private var result:TestAllExtensions

              override init () {
                 result = TestAllExtensions()
              }
              override var internalGetResult:ExtendableMessage {
                   get {
                       return result
                   }
              }
              override func clear() -> TestAllExtensionsBuilder {
                result = TestAllExtensions()
                return self
              }
              override func clone() -> TestAllExtensionsBuilder {
                return TestAllExtensions.builderWithPrototype(result)
              }
              func build() -> TestAllExtensions {
                   checkInitialized()
                   return buildPartial()
              }
              func buildPartial() -> TestAllExtensions {
                var returnMe:TestAllExtensions = result
                return returnMe
              }
              func mergeFrom(other:TestAllExtensions) -> TestAllExtensionsBuilder {
                if (other == TestAllExtensions()) {
                  return self
                }
                mergeExtensionFields(other)
                  mergeUnknownFields(other.unknownFields)
                return self
              }
              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllExtensionsBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllExtensionsBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag:Int32 = input.readTag()
                    if tag == 0 {
                         self.unknownFields = unknownFieldsBuilder.build()
                         return self}
                    else {
                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                              unknownFields = unknownFieldsBuilder.build()
                              return self
                          }
                    }
                    }
                 }
              }

              func == (lhs: OptionalGroup_extension, rhs: OptionalGroup_extension) -> Bool {
                    if (lhs === rhs) {
                      return true
                    }
                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                    fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
              }
              class OptionalGroup_extension : GeneratedMessage {
                private(set) var hasA:Bool = false
                private(set) var a:Int32 = 0

                override init() {
                     super.init()
                }
                override func isInitialized() -> Bool {
                  return true
                }
                override func writeToCodedOutputStream(output:CodedOutputStream) {
                  if hasA {
                    output.writeInt32(17, value:a)
                  }
                  unknownFields.writeToCodedOutputStream(output)
                }
                override func serializedSize() -> Int32 {
                  var size:Int32 = memoizedSerializedSize
                  if size != -1 {
                    return size
                  }

                  size = 0
                  if hasA {
                    size += WireFormat.computeInt32Size(17, value:a)
                  }
                  size += unknownFields.serializedSize()
                  memoizedSerializedSize = size
                  return size
                }
                class func parseFromData(data:[Byte]) -> OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromData(data).build()
                }
                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromInputStream(input:NSInputStream) -> OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromInputStream(input).build()
                }
                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream) -> OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromCodedInputStream(input).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OptionalGroup_extension {
                  return OptionalGroup_extension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func builder() -> OptionalGroup_extensionBuilder {
                  return OptionalGroup_extensionBuilder()
                }
                class func builderWithPrototype(prototype:OptionalGroup_extension) -> OptionalGroup_extensionBuilder {
                  return OptionalGroup_extension.builder().mergeFrom(prototype)
                }
                func builder() -> OptionalGroup_extensionBuilder {
                  return OptionalGroup_extension.builder()
                }
                func toBuilder() -> OptionalGroup_extensionBuilder {
                  return OptionalGroup_extension.builderWithPrototype(self)
                }
                override func writeDescriptionTo(inout output:String, indent:String) {
                  if hasA {
                    output += "\(indent) a: \(a) \n"
                  }
                  unknownFields.writeDescriptionTo(&output, indent:indent)
                }
                override var hashValue:Int {
                 get {
                      var hashCode:Int = 7
                      if hasA {
                         hashCode = (hashCode &* 31) &+ a.hashValue
                      }
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                    }
                  }
                }

                class OptionalGroup_extensionBuilder : GeneratedMessageBuilder {
                private var result:OptionalGroup_extension

                override init () {
                   result = OptionalGroup_extension()
                }
                var hasA:Bool {
                     get {
                          return result.hasA
                     }
                }
                var a:Int32 {
                     get {
                          return result.a
                     }
                     set (value) {
                         result.hasA = true
                         result.a = value
                     }
                }
                func clearA() -> OptionalGroup_extensionBuilder{
                     result.hasA = false
                     result.a = 0
                     return self
                }
                override var internalGetResult:GeneratedMessage {
                     get {
                        return result
                     }
                }
                override func clear() -> OptionalGroup_extensionBuilder {
                  result = OptionalGroup_extension()
                  return self
                }
                override func clone() -> OptionalGroup_extensionBuilder {
                  return OptionalGroup_extension.builderWithPrototype(result)
                }
                func build() -> OptionalGroup_extension {
                     checkInitialized()
                     return buildPartial()
                }
                func buildPartial() -> OptionalGroup_extension {
                  var returnMe:OptionalGroup_extension = result
                  return returnMe
                }
                func mergeFrom(other:OptionalGroup_extension) -> OptionalGroup_extensionBuilder {
                  if (other == OptionalGroup_extension()) {
                    return self
                  }
                  if other.hasA {
                       a = other.a
                  }
                    mergeUnknownFields(other.unknownFields)
                  return self
                }
                override func mergeFromCodedInputStream(input:CodedInputStream) ->OptionalGroup_extensionBuilder {
                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                }
                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OptionalGroup_extensionBuilder {
                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                  while (true) {
                    var tag:Int32 = input.readTag()
                      if tag == 0 {
                           self.unknownFields = unknownFieldsBuilder.build()
                           return self}
                      else if tag == 136 {
                        a = input.readInt32()
                      }
                      else {
                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                unknownFields = unknownFieldsBuilder.build()
                                return self
                            }
                      }
                      }
                   }
                }

                func == (lhs: RepeatedGroup_extension, rhs: RepeatedGroup_extension) -> Bool {
                      if (lhs === rhs) {
                        return true
                      }
                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                      fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                }
                class RepeatedGroup_extension : GeneratedMessage {
                  private(set) var hasA:Bool = false
                  private(set) var a:Int32 = 0

                  override init() {
                       super.init()
                  }
                  override func isInitialized() -> Bool {
                    return true
                  }
                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                    if hasA {
                      output.writeInt32(47, value:a)
                    }
                    unknownFields.writeToCodedOutputStream(output)
                  }
                  override func serializedSize() -> Int32 {
                    var size:Int32 = memoizedSerializedSize
                    if size != -1 {
                      return size
                    }

                    size = 0
                    if hasA {
                      size += WireFormat.computeInt32Size(47, value:a)
                    }
                    size += unknownFields.serializedSize()
                    memoizedSerializedSize = size
                    return size
                  }
                  class func parseFromData(data:[Byte]) -> RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromData(data).build()
                  }
                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromInputStream(input:NSInputStream) -> RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromInputStream(input).build()
                  }
                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream) -> RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromCodedInputStream(input).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extension {
                    return RepeatedGroup_extension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func builder() -> RepeatedGroup_extensionBuilder {
                    return RepeatedGroup_extensionBuilder()
                  }
                  class func builderWithPrototype(prototype:RepeatedGroup_extension) -> RepeatedGroup_extensionBuilder {
                    return RepeatedGroup_extension.builder().mergeFrom(prototype)
                  }
                  func builder() -> RepeatedGroup_extensionBuilder {
                    return RepeatedGroup_extension.builder()
                  }
                  func toBuilder() -> RepeatedGroup_extensionBuilder {
                    return RepeatedGroup_extension.builderWithPrototype(self)
                  }
                  override func writeDescriptionTo(inout output:String, indent:String) {
                    if hasA {
                      output += "\(indent) a: \(a) \n"
                    }
                    unknownFields.writeDescriptionTo(&output, indent:indent)
                  }
                  override var hashValue:Int {
                   get {
                        var hashCode:Int = 7
                        if hasA {
                           hashCode = (hashCode &* 31) &+ a.hashValue
                        }
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                      }
                    }
                  }

                  class RepeatedGroup_extensionBuilder : GeneratedMessageBuilder {
                  private var result:RepeatedGroup_extension

                  override init () {
                     result = RepeatedGroup_extension()
                  }
                  var hasA:Bool {
                       get {
                            return result.hasA
                       }
                  }
                  var a:Int32 {
                       get {
                            return result.a
                       }
                       set (value) {
                           result.hasA = true
                           result.a = value
                       }
                  }
                  func clearA() -> RepeatedGroup_extensionBuilder{
                       result.hasA = false
                       result.a = 0
                       return self
                  }
                  override var internalGetResult:GeneratedMessage {
                       get {
                          return result
                       }
                  }
                  override func clear() -> RepeatedGroup_extensionBuilder {
                    result = RepeatedGroup_extension()
                    return self
                  }
                  override func clone() -> RepeatedGroup_extensionBuilder {
                    return RepeatedGroup_extension.builderWithPrototype(result)
                  }
                  func build() -> RepeatedGroup_extension {
                       checkInitialized()
                       return buildPartial()
                  }
                  func buildPartial() -> RepeatedGroup_extension {
                    var returnMe:RepeatedGroup_extension = result
                    return returnMe
                  }
                  func mergeFrom(other:RepeatedGroup_extension) -> RepeatedGroup_extensionBuilder {
                    if (other == RepeatedGroup_extension()) {
                      return self
                    }
                    if other.hasA {
                         a = other.a
                    }
                      mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream) ->RepeatedGroup_extensionBuilder {
                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extensionBuilder {
                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      var tag:Int32 = input.readTag()
                        if tag == 0 {
                             self.unknownFields = unknownFieldsBuilder.build()
                             return self}
                        else if tag == 376 {
                          a = input.readInt32()
                        }
                        else {
                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                  unknownFields = unknownFieldsBuilder.build()
                                  return self
                              }
                        }
                        }
                     }
                  }

                  func == (lhs: TestNestedExtension, rhs: TestNestedExtension) -> Bool {
                        if (lhs === rhs) {
                          return true
                        }
                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                        return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                  }
                  class TestNestedExtension : GeneratedMessage {
                    var test:ExtensionField {
                         get {
                             return TestNestedExtension_test
                         }
                    }
                    override init() {
                         super.init()
                    }
                    override func isInitialized() -> Bool {
                      return true
                    }
                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                      unknownFields.writeToCodedOutputStream(output)
                    }
                    override func serializedSize() -> Int32 {
                      var size:Int32 = memoizedSerializedSize
                      if size != -1 {
                        return size
                      }

                      size = 0
                      size += unknownFields.serializedSize()
                      memoizedSerializedSize = size
                      return size
                    }
                    class func parseFromData(data:[Byte]) -> TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromData(data).build()
                    }
                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromInputStream(input:NSInputStream) -> TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromInputStream(input).build()
                    }
                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromCodedInputStream(input).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedExtension {
                      return TestNestedExtension.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func builder() -> TestNestedExtensionBuilder {
                      return TestNestedExtensionBuilder()
                    }
                    class func builderWithPrototype(prototype:TestNestedExtension) -> TestNestedExtensionBuilder {
                      return TestNestedExtension.builder().mergeFrom(prototype)
                    }
                    func builder() -> TestNestedExtensionBuilder {
                      return TestNestedExtension.builder()
                    }
                    func toBuilder() -> TestNestedExtensionBuilder {
                      return TestNestedExtension.builderWithPrototype(self)
                    }
                    override func writeDescriptionTo(inout output:String, indent:String) {
                      unknownFields.writeDescriptionTo(&output, indent:indent)
                    }
                    override var hashValue:Int {
                     get {
                          var hashCode:Int = 7
                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                          return hashCode
                        }
                      }
                    }

                    class TestNestedExtensionBuilder : GeneratedMessageBuilder {
                    private var result:TestNestedExtension

                    override init () {
                       result = TestNestedExtension()
                    }
                    override var internalGetResult:GeneratedMessage {
                         get {
                            return result
                         }
                    }
                    override func clear() -> TestNestedExtensionBuilder {
                      result = TestNestedExtension()
                      return self
                    }
                    override func clone() -> TestNestedExtensionBuilder {
                      return TestNestedExtension.builderWithPrototype(result)
                    }
                    func build() -> TestNestedExtension {
                         checkInitialized()
                         return buildPartial()
                    }
                    func buildPartial() -> TestNestedExtension {
                      var returnMe:TestNestedExtension = result
                      return returnMe
                    }
                    func mergeFrom(other:TestNestedExtension) -> TestNestedExtensionBuilder {
                      if (other == TestNestedExtension()) {
                        return self
                      }
                        mergeUnknownFields(other.unknownFields)
                      return self
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestNestedExtensionBuilder {
                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedExtensionBuilder {
                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                      while (true) {
                        var tag:Int32 = input.readTag()
                          if tag == 0 {
                               self.unknownFields = unknownFieldsBuilder.build()
                               return self}
                          else {
                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                    unknownFields = unknownFieldsBuilder.build()
                                    return self
                                }
                          }
                          }
                       }
                    }

                    func == (lhs: TestRequired, rhs: TestRequired) -> Bool {
                          if (lhs === rhs) {
                            return true
                          }
                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                          fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                           fieldCheck = fieldCheck && (lhs.hasDummy2 == rhs.hasDummy2) && (!lhs.hasDummy2 || lhs.dummy2 == rhs.dummy2)
                           fieldCheck = fieldCheck && (lhs.hasB == rhs.hasB) && (!lhs.hasB || lhs.b == rhs.b)
                           fieldCheck = fieldCheck && (lhs.hasDummy4 == rhs.hasDummy4) && (!lhs.hasDummy4 || lhs.dummy4 == rhs.dummy4)
                           fieldCheck = fieldCheck && (lhs.hasDummy5 == rhs.hasDummy5) && (!lhs.hasDummy5 || lhs.dummy5 == rhs.dummy5)
                           fieldCheck = fieldCheck && (lhs.hasDummy6 == rhs.hasDummy6) && (!lhs.hasDummy6 || lhs.dummy6 == rhs.dummy6)
                           fieldCheck = fieldCheck && (lhs.hasDummy7 == rhs.hasDummy7) && (!lhs.hasDummy7 || lhs.dummy7 == rhs.dummy7)
                           fieldCheck = fieldCheck && (lhs.hasDummy8 == rhs.hasDummy8) && (!lhs.hasDummy8 || lhs.dummy8 == rhs.dummy8)
                           fieldCheck = fieldCheck && (lhs.hasDummy9 == rhs.hasDummy9) && (!lhs.hasDummy9 || lhs.dummy9 == rhs.dummy9)
                           fieldCheck = fieldCheck && (lhs.hasDummy10 == rhs.hasDummy10) && (!lhs.hasDummy10 || lhs.dummy10 == rhs.dummy10)
                           fieldCheck = fieldCheck && (lhs.hasDummy11 == rhs.hasDummy11) && (!lhs.hasDummy11 || lhs.dummy11 == rhs.dummy11)
                           fieldCheck = fieldCheck && (lhs.hasDummy12 == rhs.hasDummy12) && (!lhs.hasDummy12 || lhs.dummy12 == rhs.dummy12)
                           fieldCheck = fieldCheck && (lhs.hasDummy13 == rhs.hasDummy13) && (!lhs.hasDummy13 || lhs.dummy13 == rhs.dummy13)
                           fieldCheck = fieldCheck && (lhs.hasDummy14 == rhs.hasDummy14) && (!lhs.hasDummy14 || lhs.dummy14 == rhs.dummy14)
                           fieldCheck = fieldCheck && (lhs.hasDummy15 == rhs.hasDummy15) && (!lhs.hasDummy15 || lhs.dummy15 == rhs.dummy15)
                           fieldCheck = fieldCheck && (lhs.hasDummy16 == rhs.hasDummy16) && (!lhs.hasDummy16 || lhs.dummy16 == rhs.dummy16)
                           fieldCheck = fieldCheck && (lhs.hasDummy17 == rhs.hasDummy17) && (!lhs.hasDummy17 || lhs.dummy17 == rhs.dummy17)
                           fieldCheck = fieldCheck && (lhs.hasDummy18 == rhs.hasDummy18) && (!lhs.hasDummy18 || lhs.dummy18 == rhs.dummy18)
                           fieldCheck = fieldCheck && (lhs.hasDummy19 == rhs.hasDummy19) && (!lhs.hasDummy19 || lhs.dummy19 == rhs.dummy19)
                           fieldCheck = fieldCheck && (lhs.hasDummy20 == rhs.hasDummy20) && (!lhs.hasDummy20 || lhs.dummy20 == rhs.dummy20)
                           fieldCheck = fieldCheck && (lhs.hasDummy21 == rhs.hasDummy21) && (!lhs.hasDummy21 || lhs.dummy21 == rhs.dummy21)
                           fieldCheck = fieldCheck && (lhs.hasDummy22 == rhs.hasDummy22) && (!lhs.hasDummy22 || lhs.dummy22 == rhs.dummy22)
                           fieldCheck = fieldCheck && (lhs.hasDummy23 == rhs.hasDummy23) && (!lhs.hasDummy23 || lhs.dummy23 == rhs.dummy23)
                           fieldCheck = fieldCheck && (lhs.hasDummy24 == rhs.hasDummy24) && (!lhs.hasDummy24 || lhs.dummy24 == rhs.dummy24)
                           fieldCheck = fieldCheck && (lhs.hasDummy25 == rhs.hasDummy25) && (!lhs.hasDummy25 || lhs.dummy25 == rhs.dummy25)
                           fieldCheck = fieldCheck && (lhs.hasDummy26 == rhs.hasDummy26) && (!lhs.hasDummy26 || lhs.dummy26 == rhs.dummy26)
                           fieldCheck = fieldCheck && (lhs.hasDummy27 == rhs.hasDummy27) && (!lhs.hasDummy27 || lhs.dummy27 == rhs.dummy27)
                           fieldCheck = fieldCheck && (lhs.hasDummy28 == rhs.hasDummy28) && (!lhs.hasDummy28 || lhs.dummy28 == rhs.dummy28)
                           fieldCheck = fieldCheck && (lhs.hasDummy29 == rhs.hasDummy29) && (!lhs.hasDummy29 || lhs.dummy29 == rhs.dummy29)
                           fieldCheck = fieldCheck && (lhs.hasDummy30 == rhs.hasDummy30) && (!lhs.hasDummy30 || lhs.dummy30 == rhs.dummy30)
                           fieldCheck = fieldCheck && (lhs.hasDummy31 == rhs.hasDummy31) && (!lhs.hasDummy31 || lhs.dummy31 == rhs.dummy31)
                           fieldCheck = fieldCheck && (lhs.hasDummy32 == rhs.hasDummy32) && (!lhs.hasDummy32 || lhs.dummy32 == rhs.dummy32)
                           fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                    }
                    class TestRequired : GeneratedMessage {
                      private(set) var hasA:Bool = false
                      private(set) var a:Int32 = 0

                      private(set) var hasDummy2:Bool = false
                      private(set) var dummy2:Int32 = 0

                      private(set) var hasB:Bool = false
                      private(set) var b:Int32 = 0

                      private(set) var hasDummy4:Bool = false
                      private(set) var dummy4:Int32 = 0

                      private(set) var hasDummy5:Bool = false
                      private(set) var dummy5:Int32 = 0

                      private(set) var hasDummy6:Bool = false
                      private(set) var dummy6:Int32 = 0

                      private(set) var hasDummy7:Bool = false
                      private(set) var dummy7:Int32 = 0

                      private(set) var hasDummy8:Bool = false
                      private(set) var dummy8:Int32 = 0

                      private(set) var hasDummy9:Bool = false
                      private(set) var dummy9:Int32 = 0

                      private(set) var hasDummy10:Bool = false
                      private(set) var dummy10:Int32 = 0

                      private(set) var hasDummy11:Bool = false
                      private(set) var dummy11:Int32 = 0

                      private(set) var hasDummy12:Bool = false
                      private(set) var dummy12:Int32 = 0

                      private(set) var hasDummy13:Bool = false
                      private(set) var dummy13:Int32 = 0

                      private(set) var hasDummy14:Bool = false
                      private(set) var dummy14:Int32 = 0

                      private(set) var hasDummy15:Bool = false
                      private(set) var dummy15:Int32 = 0

                      private(set) var hasDummy16:Bool = false
                      private(set) var dummy16:Int32 = 0

                      private(set) var hasDummy17:Bool = false
                      private(set) var dummy17:Int32 = 0

                      private(set) var hasDummy18:Bool = false
                      private(set) var dummy18:Int32 = 0

                      private(set) var hasDummy19:Bool = false
                      private(set) var dummy19:Int32 = 0

                      private(set) var hasDummy20:Bool = false
                      private(set) var dummy20:Int32 = 0

                      private(set) var hasDummy21:Bool = false
                      private(set) var dummy21:Int32 = 0

                      private(set) var hasDummy22:Bool = false
                      private(set) var dummy22:Int32 = 0

                      private(set) var hasDummy23:Bool = false
                      private(set) var dummy23:Int32 = 0

                      private(set) var hasDummy24:Bool = false
                      private(set) var dummy24:Int32 = 0

                      private(set) var hasDummy25:Bool = false
                      private(set) var dummy25:Int32 = 0

                      private(set) var hasDummy26:Bool = false
                      private(set) var dummy26:Int32 = 0

                      private(set) var hasDummy27:Bool = false
                      private(set) var dummy27:Int32 = 0

                      private(set) var hasDummy28:Bool = false
                      private(set) var dummy28:Int32 = 0

                      private(set) var hasDummy29:Bool = false
                      private(set) var dummy29:Int32 = 0

                      private(set) var hasDummy30:Bool = false
                      private(set) var dummy30:Int32 = 0

                      private(set) var hasDummy31:Bool = false
                      private(set) var dummy31:Int32 = 0

                      private(set) var hasDummy32:Bool = false
                      private(set) var dummy32:Int32 = 0

                      private(set) var hasC:Bool = false
                      private(set) var c:Int32 = 0

                      var single:ExtensionField {
                           get {
                               return TestRequired_single
                           }
                      }
                      var multi:ExtensionField {
                           get {
                               return TestRequired_multi
                           }
                      }
                      override init() {
                           super.init()
                      }
                      override func isInitialized() -> Bool {
                        if !hasA {
                          return false
                        }
                        if !hasB {
                          return false
                        }
                        if !hasC {
                          return false
                        }
                        return true
                      }
                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                        if hasA {
                          output.writeInt32(1, value:a)
                        }
                        if hasDummy2 {
                          output.writeInt32(2, value:dummy2)
                        }
                        if hasB {
                          output.writeInt32(3, value:b)
                        }
                        if hasDummy4 {
                          output.writeInt32(4, value:dummy4)
                        }
                        if hasDummy5 {
                          output.writeInt32(5, value:dummy5)
                        }
                        if hasDummy6 {
                          output.writeInt32(6, value:dummy6)
                        }
                        if hasDummy7 {
                          output.writeInt32(7, value:dummy7)
                        }
                        if hasDummy8 {
                          output.writeInt32(8, value:dummy8)
                        }
                        if hasDummy9 {
                          output.writeInt32(9, value:dummy9)
                        }
                        if hasDummy10 {
                          output.writeInt32(10, value:dummy10)
                        }
                        if hasDummy11 {
                          output.writeInt32(11, value:dummy11)
                        }
                        if hasDummy12 {
                          output.writeInt32(12, value:dummy12)
                        }
                        if hasDummy13 {
                          output.writeInt32(13, value:dummy13)
                        }
                        if hasDummy14 {
                          output.writeInt32(14, value:dummy14)
                        }
                        if hasDummy15 {
                          output.writeInt32(15, value:dummy15)
                        }
                        if hasDummy16 {
                          output.writeInt32(16, value:dummy16)
                        }
                        if hasDummy17 {
                          output.writeInt32(17, value:dummy17)
                        }
                        if hasDummy18 {
                          output.writeInt32(18, value:dummy18)
                        }
                        if hasDummy19 {
                          output.writeInt32(19, value:dummy19)
                        }
                        if hasDummy20 {
                          output.writeInt32(20, value:dummy20)
                        }
                        if hasDummy21 {
                          output.writeInt32(21, value:dummy21)
                        }
                        if hasDummy22 {
                          output.writeInt32(22, value:dummy22)
                        }
                        if hasDummy23 {
                          output.writeInt32(23, value:dummy23)
                        }
                        if hasDummy24 {
                          output.writeInt32(24, value:dummy24)
                        }
                        if hasDummy25 {
                          output.writeInt32(25, value:dummy25)
                        }
                        if hasDummy26 {
                          output.writeInt32(26, value:dummy26)
                        }
                        if hasDummy27 {
                          output.writeInt32(27, value:dummy27)
                        }
                        if hasDummy28 {
                          output.writeInt32(28, value:dummy28)
                        }
                        if hasDummy29 {
                          output.writeInt32(29, value:dummy29)
                        }
                        if hasDummy30 {
                          output.writeInt32(30, value:dummy30)
                        }
                        if hasDummy31 {
                          output.writeInt32(31, value:dummy31)
                        }
                        if hasDummy32 {
                          output.writeInt32(32, value:dummy32)
                        }
                        if hasC {
                          output.writeInt32(33, value:c)
                        }
                        unknownFields.writeToCodedOutputStream(output)
                      }
                      override func serializedSize() -> Int32 {
                        var size:Int32 = memoizedSerializedSize
                        if size != -1 {
                          return size
                        }

                        size = 0
                        if hasA {
                          size += WireFormat.computeInt32Size(1, value:a)
                        }
                        if hasDummy2 {
                          size += WireFormat.computeInt32Size(2, value:dummy2)
                        }
                        if hasB {
                          size += WireFormat.computeInt32Size(3, value:b)
                        }
                        if hasDummy4 {
                          size += WireFormat.computeInt32Size(4, value:dummy4)
                        }
                        if hasDummy5 {
                          size += WireFormat.computeInt32Size(5, value:dummy5)
                        }
                        if hasDummy6 {
                          size += WireFormat.computeInt32Size(6, value:dummy6)
                        }
                        if hasDummy7 {
                          size += WireFormat.computeInt32Size(7, value:dummy7)
                        }
                        if hasDummy8 {
                          size += WireFormat.computeInt32Size(8, value:dummy8)
                        }
                        if hasDummy9 {
                          size += WireFormat.computeInt32Size(9, value:dummy9)
                        }
                        if hasDummy10 {
                          size += WireFormat.computeInt32Size(10, value:dummy10)
                        }
                        if hasDummy11 {
                          size += WireFormat.computeInt32Size(11, value:dummy11)
                        }
                        if hasDummy12 {
                          size += WireFormat.computeInt32Size(12, value:dummy12)
                        }
                        if hasDummy13 {
                          size += WireFormat.computeInt32Size(13, value:dummy13)
                        }
                        if hasDummy14 {
                          size += WireFormat.computeInt32Size(14, value:dummy14)
                        }
                        if hasDummy15 {
                          size += WireFormat.computeInt32Size(15, value:dummy15)
                        }
                        if hasDummy16 {
                          size += WireFormat.computeInt32Size(16, value:dummy16)
                        }
                        if hasDummy17 {
                          size += WireFormat.computeInt32Size(17, value:dummy17)
                        }
                        if hasDummy18 {
                          size += WireFormat.computeInt32Size(18, value:dummy18)
                        }
                        if hasDummy19 {
                          size += WireFormat.computeInt32Size(19, value:dummy19)
                        }
                        if hasDummy20 {
                          size += WireFormat.computeInt32Size(20, value:dummy20)
                        }
                        if hasDummy21 {
                          size += WireFormat.computeInt32Size(21, value:dummy21)
                        }
                        if hasDummy22 {
                          size += WireFormat.computeInt32Size(22, value:dummy22)
                        }
                        if hasDummy23 {
                          size += WireFormat.computeInt32Size(23, value:dummy23)
                        }
                        if hasDummy24 {
                          size += WireFormat.computeInt32Size(24, value:dummy24)
                        }
                        if hasDummy25 {
                          size += WireFormat.computeInt32Size(25, value:dummy25)
                        }
                        if hasDummy26 {
                          size += WireFormat.computeInt32Size(26, value:dummy26)
                        }
                        if hasDummy27 {
                          size += WireFormat.computeInt32Size(27, value:dummy27)
                        }
                        if hasDummy28 {
                          size += WireFormat.computeInt32Size(28, value:dummy28)
                        }
                        if hasDummy29 {
                          size += WireFormat.computeInt32Size(29, value:dummy29)
                        }
                        if hasDummy30 {
                          size += WireFormat.computeInt32Size(30, value:dummy30)
                        }
                        if hasDummy31 {
                          size += WireFormat.computeInt32Size(31, value:dummy31)
                        }
                        if hasDummy32 {
                          size += WireFormat.computeInt32Size(32, value:dummy32)
                        }
                        if hasC {
                          size += WireFormat.computeInt32Size(33, value:c)
                        }
                        size += unknownFields.serializedSize()
                        memoizedSerializedSize = size
                        return size
                      }
                      class func parseFromData(data:[Byte]) -> TestRequired {
                        return TestRequired.builder().mergeFromData(data).build()
                      }
                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestRequired {
                        return TestRequired.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromInputStream(input:NSInputStream) -> TestRequired {
                        return TestRequired.builder().mergeFromInputStream(input).build()
                      }
                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestRequired {
                        return TestRequired.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream) -> TestRequired {
                        return TestRequired.builder().mergeFromCodedInputStream(input).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRequired {
                        return TestRequired.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func builder() -> TestRequiredBuilder {
                        return TestRequiredBuilder()
                      }
                      class func builderWithPrototype(prototype:TestRequired) -> TestRequiredBuilder {
                        return TestRequired.builder().mergeFrom(prototype)
                      }
                      func builder() -> TestRequiredBuilder {
                        return TestRequired.builder()
                      }
                      func toBuilder() -> TestRequiredBuilder {
                        return TestRequired.builderWithPrototype(self)
                      }
                      override func writeDescriptionTo(inout output:String, indent:String) {
                        if hasA {
                          output += "\(indent) a: \(a) \n"
                        }
                        if hasDummy2 {
                          output += "\(indent) dummy2: \(dummy2) \n"
                        }
                        if hasB {
                          output += "\(indent) b: \(b) \n"
                        }
                        if hasDummy4 {
                          output += "\(indent) dummy4: \(dummy4) \n"
                        }
                        if hasDummy5 {
                          output += "\(indent) dummy5: \(dummy5) \n"
                        }
                        if hasDummy6 {
                          output += "\(indent) dummy6: \(dummy6) \n"
                        }
                        if hasDummy7 {
                          output += "\(indent) dummy7: \(dummy7) \n"
                        }
                        if hasDummy8 {
                          output += "\(indent) dummy8: \(dummy8) \n"
                        }
                        if hasDummy9 {
                          output += "\(indent) dummy9: \(dummy9) \n"
                        }
                        if hasDummy10 {
                          output += "\(indent) dummy10: \(dummy10) \n"
                        }
                        if hasDummy11 {
                          output += "\(indent) dummy11: \(dummy11) \n"
                        }
                        if hasDummy12 {
                          output += "\(indent) dummy12: \(dummy12) \n"
                        }
                        if hasDummy13 {
                          output += "\(indent) dummy13: \(dummy13) \n"
                        }
                        if hasDummy14 {
                          output += "\(indent) dummy14: \(dummy14) \n"
                        }
                        if hasDummy15 {
                          output += "\(indent) dummy15: \(dummy15) \n"
                        }
                        if hasDummy16 {
                          output += "\(indent) dummy16: \(dummy16) \n"
                        }
                        if hasDummy17 {
                          output += "\(indent) dummy17: \(dummy17) \n"
                        }
                        if hasDummy18 {
                          output += "\(indent) dummy18: \(dummy18) \n"
                        }
                        if hasDummy19 {
                          output += "\(indent) dummy19: \(dummy19) \n"
                        }
                        if hasDummy20 {
                          output += "\(indent) dummy20: \(dummy20) \n"
                        }
                        if hasDummy21 {
                          output += "\(indent) dummy21: \(dummy21) \n"
                        }
                        if hasDummy22 {
                          output += "\(indent) dummy22: \(dummy22) \n"
                        }
                        if hasDummy23 {
                          output += "\(indent) dummy23: \(dummy23) \n"
                        }
                        if hasDummy24 {
                          output += "\(indent) dummy24: \(dummy24) \n"
                        }
                        if hasDummy25 {
                          output += "\(indent) dummy25: \(dummy25) \n"
                        }
                        if hasDummy26 {
                          output += "\(indent) dummy26: \(dummy26) \n"
                        }
                        if hasDummy27 {
                          output += "\(indent) dummy27: \(dummy27) \n"
                        }
                        if hasDummy28 {
                          output += "\(indent) dummy28: \(dummy28) \n"
                        }
                        if hasDummy29 {
                          output += "\(indent) dummy29: \(dummy29) \n"
                        }
                        if hasDummy30 {
                          output += "\(indent) dummy30: \(dummy30) \n"
                        }
                        if hasDummy31 {
                          output += "\(indent) dummy31: \(dummy31) \n"
                        }
                        if hasDummy32 {
                          output += "\(indent) dummy32: \(dummy32) \n"
                        }
                        if hasC {
                          output += "\(indent) c: \(c) \n"
                        }
                        unknownFields.writeDescriptionTo(&output, indent:indent)
                      }
                      override var hashValue:Int {
                       get {
                            var hashCode:Int = 7
                            if hasA {
                               hashCode = (hashCode &* 31) &+ a.hashValue
                            }
                            if hasDummy2 {
                               hashCode = (hashCode &* 31) &+ dummy2.hashValue
                            }
                            if hasB {
                               hashCode = (hashCode &* 31) &+ b.hashValue
                            }
                            if hasDummy4 {
                               hashCode = (hashCode &* 31) &+ dummy4.hashValue
                            }
                            if hasDummy5 {
                               hashCode = (hashCode &* 31) &+ dummy5.hashValue
                            }
                            if hasDummy6 {
                               hashCode = (hashCode &* 31) &+ dummy6.hashValue
                            }
                            if hasDummy7 {
                               hashCode = (hashCode &* 31) &+ dummy7.hashValue
                            }
                            if hasDummy8 {
                               hashCode = (hashCode &* 31) &+ dummy8.hashValue
                            }
                            if hasDummy9 {
                               hashCode = (hashCode &* 31) &+ dummy9.hashValue
                            }
                            if hasDummy10 {
                               hashCode = (hashCode &* 31) &+ dummy10.hashValue
                            }
                            if hasDummy11 {
                               hashCode = (hashCode &* 31) &+ dummy11.hashValue
                            }
                            if hasDummy12 {
                               hashCode = (hashCode &* 31) &+ dummy12.hashValue
                            }
                            if hasDummy13 {
                               hashCode = (hashCode &* 31) &+ dummy13.hashValue
                            }
                            if hasDummy14 {
                               hashCode = (hashCode &* 31) &+ dummy14.hashValue
                            }
                            if hasDummy15 {
                               hashCode = (hashCode &* 31) &+ dummy15.hashValue
                            }
                            if hasDummy16 {
                               hashCode = (hashCode &* 31) &+ dummy16.hashValue
                            }
                            if hasDummy17 {
                               hashCode = (hashCode &* 31) &+ dummy17.hashValue
                            }
                            if hasDummy18 {
                               hashCode = (hashCode &* 31) &+ dummy18.hashValue
                            }
                            if hasDummy19 {
                               hashCode = (hashCode &* 31) &+ dummy19.hashValue
                            }
                            if hasDummy20 {
                               hashCode = (hashCode &* 31) &+ dummy20.hashValue
                            }
                            if hasDummy21 {
                               hashCode = (hashCode &* 31) &+ dummy21.hashValue
                            }
                            if hasDummy22 {
                               hashCode = (hashCode &* 31) &+ dummy22.hashValue
                            }
                            if hasDummy23 {
                               hashCode = (hashCode &* 31) &+ dummy23.hashValue
                            }
                            if hasDummy24 {
                               hashCode = (hashCode &* 31) &+ dummy24.hashValue
                            }
                            if hasDummy25 {
                               hashCode = (hashCode &* 31) &+ dummy25.hashValue
                            }
                            if hasDummy26 {
                               hashCode = (hashCode &* 31) &+ dummy26.hashValue
                            }
                            if hasDummy27 {
                               hashCode = (hashCode &* 31) &+ dummy27.hashValue
                            }
                            if hasDummy28 {
                               hashCode = (hashCode &* 31) &+ dummy28.hashValue
                            }
                            if hasDummy29 {
                               hashCode = (hashCode &* 31) &+ dummy29.hashValue
                            }
                            if hasDummy30 {
                               hashCode = (hashCode &* 31) &+ dummy30.hashValue
                            }
                            if hasDummy31 {
                               hashCode = (hashCode &* 31) &+ dummy31.hashValue
                            }
                            if hasDummy32 {
                               hashCode = (hashCode &* 31) &+ dummy32.hashValue
                            }
                            if hasC {
                               hashCode = (hashCode &* 31) &+ c.hashValue
                            }
                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                            return hashCode
                          }
                        }
                      }

                      class TestRequiredBuilder : GeneratedMessageBuilder {
                      private var result:TestRequired

                      override init () {
                         result = TestRequired()
                      }
                      var hasA:Bool {
                           get {
                                return result.hasA
                           }
                      }
                      var a:Int32 {
                           get {
                                return result.a
                           }
                           set (value) {
                               result.hasA = true
                               result.a = value
                           }
                      }
                      func clearA() -> TestRequiredBuilder{
                           result.hasA = false
                           result.a = 0
                           return self
                      }
                      var hasDummy2:Bool {
                           get {
                                return result.hasDummy2
                           }
                      }
                      var dummy2:Int32 {
                           get {
                                return result.dummy2
                           }
                           set (value) {
                               result.hasDummy2 = true
                               result.dummy2 = value
                           }
                      }
                      func clearDummy2() -> TestRequiredBuilder{
                           result.hasDummy2 = false
                           result.dummy2 = 0
                           return self
                      }
                      var hasB:Bool {
                           get {
                                return result.hasB
                           }
                      }
                      var b:Int32 {
                           get {
                                return result.b
                           }
                           set (value) {
                               result.hasB = true
                               result.b = value
                           }
                      }
                      func clearB() -> TestRequiredBuilder{
                           result.hasB = false
                           result.b = 0
                           return self
                      }
                      var hasDummy4:Bool {
                           get {
                                return result.hasDummy4
                           }
                      }
                      var dummy4:Int32 {
                           get {
                                return result.dummy4
                           }
                           set (value) {
                               result.hasDummy4 = true
                               result.dummy4 = value
                           }
                      }
                      func clearDummy4() -> TestRequiredBuilder{
                           result.hasDummy4 = false
                           result.dummy4 = 0
                           return self
                      }
                      var hasDummy5:Bool {
                           get {
                                return result.hasDummy5
                           }
                      }
                      var dummy5:Int32 {
                           get {
                                return result.dummy5
                           }
                           set (value) {
                               result.hasDummy5 = true
                               result.dummy5 = value
                           }
                      }
                      func clearDummy5() -> TestRequiredBuilder{
                           result.hasDummy5 = false
                           result.dummy5 = 0
                           return self
                      }
                      var hasDummy6:Bool {
                           get {
                                return result.hasDummy6
                           }
                      }
                      var dummy6:Int32 {
                           get {
                                return result.dummy6
                           }
                           set (value) {
                               result.hasDummy6 = true
                               result.dummy6 = value
                           }
                      }
                      func clearDummy6() -> TestRequiredBuilder{
                           result.hasDummy6 = false
                           result.dummy6 = 0
                           return self
                      }
                      var hasDummy7:Bool {
                           get {
                                return result.hasDummy7
                           }
                      }
                      var dummy7:Int32 {
                           get {
                                return result.dummy7
                           }
                           set (value) {
                               result.hasDummy7 = true
                               result.dummy7 = value
                           }
                      }
                      func clearDummy7() -> TestRequiredBuilder{
                           result.hasDummy7 = false
                           result.dummy7 = 0
                           return self
                      }
                      var hasDummy8:Bool {
                           get {
                                return result.hasDummy8
                           }
                      }
                      var dummy8:Int32 {
                           get {
                                return result.dummy8
                           }
                           set (value) {
                               result.hasDummy8 = true
                               result.dummy8 = value
                           }
                      }
                      func clearDummy8() -> TestRequiredBuilder{
                           result.hasDummy8 = false
                           result.dummy8 = 0
                           return self
                      }
                      var hasDummy9:Bool {
                           get {
                                return result.hasDummy9
                           }
                      }
                      var dummy9:Int32 {
                           get {
                                return result.dummy9
                           }
                           set (value) {
                               result.hasDummy9 = true
                               result.dummy9 = value
                           }
                      }
                      func clearDummy9() -> TestRequiredBuilder{
                           result.hasDummy9 = false
                           result.dummy9 = 0
                           return self
                      }
                      var hasDummy10:Bool {
                           get {
                                return result.hasDummy10
                           }
                      }
                      var dummy10:Int32 {
                           get {
                                return result.dummy10
                           }
                           set (value) {
                               result.hasDummy10 = true
                               result.dummy10 = value
                           }
                      }
                      func clearDummy10() -> TestRequiredBuilder{
                           result.hasDummy10 = false
                           result.dummy10 = 0
                           return self
                      }
                      var hasDummy11:Bool {
                           get {
                                return result.hasDummy11
                           }
                      }
                      var dummy11:Int32 {
                           get {
                                return result.dummy11
                           }
                           set (value) {
                               result.hasDummy11 = true
                               result.dummy11 = value
                           }
                      }
                      func clearDummy11() -> TestRequiredBuilder{
                           result.hasDummy11 = false
                           result.dummy11 = 0
                           return self
                      }
                      var hasDummy12:Bool {
                           get {
                                return result.hasDummy12
                           }
                      }
                      var dummy12:Int32 {
                           get {
                                return result.dummy12
                           }
                           set (value) {
                               result.hasDummy12 = true
                               result.dummy12 = value
                           }
                      }
                      func clearDummy12() -> TestRequiredBuilder{
                           result.hasDummy12 = false
                           result.dummy12 = 0
                           return self
                      }
                      var hasDummy13:Bool {
                           get {
                                return result.hasDummy13
                           }
                      }
                      var dummy13:Int32 {
                           get {
                                return result.dummy13
                           }
                           set (value) {
                               result.hasDummy13 = true
                               result.dummy13 = value
                           }
                      }
                      func clearDummy13() -> TestRequiredBuilder{
                           result.hasDummy13 = false
                           result.dummy13 = 0
                           return self
                      }
                      var hasDummy14:Bool {
                           get {
                                return result.hasDummy14
                           }
                      }
                      var dummy14:Int32 {
                           get {
                                return result.dummy14
                           }
                           set (value) {
                               result.hasDummy14 = true
                               result.dummy14 = value
                           }
                      }
                      func clearDummy14() -> TestRequiredBuilder{
                           result.hasDummy14 = false
                           result.dummy14 = 0
                           return self
                      }
                      var hasDummy15:Bool {
                           get {
                                return result.hasDummy15
                           }
                      }
                      var dummy15:Int32 {
                           get {
                                return result.dummy15
                           }
                           set (value) {
                               result.hasDummy15 = true
                               result.dummy15 = value
                           }
                      }
                      func clearDummy15() -> TestRequiredBuilder{
                           result.hasDummy15 = false
                           result.dummy15 = 0
                           return self
                      }
                      var hasDummy16:Bool {
                           get {
                                return result.hasDummy16
                           }
                      }
                      var dummy16:Int32 {
                           get {
                                return result.dummy16
                           }
                           set (value) {
                               result.hasDummy16 = true
                               result.dummy16 = value
                           }
                      }
                      func clearDummy16() -> TestRequiredBuilder{
                           result.hasDummy16 = false
                           result.dummy16 = 0
                           return self
                      }
                      var hasDummy17:Bool {
                           get {
                                return result.hasDummy17
                           }
                      }
                      var dummy17:Int32 {
                           get {
                                return result.dummy17
                           }
                           set (value) {
                               result.hasDummy17 = true
                               result.dummy17 = value
                           }
                      }
                      func clearDummy17() -> TestRequiredBuilder{
                           result.hasDummy17 = false
                           result.dummy17 = 0
                           return self
                      }
                      var hasDummy18:Bool {
                           get {
                                return result.hasDummy18
                           }
                      }
                      var dummy18:Int32 {
                           get {
                                return result.dummy18
                           }
                           set (value) {
                               result.hasDummy18 = true
                               result.dummy18 = value
                           }
                      }
                      func clearDummy18() -> TestRequiredBuilder{
                           result.hasDummy18 = false
                           result.dummy18 = 0
                           return self
                      }
                      var hasDummy19:Bool {
                           get {
                                return result.hasDummy19
                           }
                      }
                      var dummy19:Int32 {
                           get {
                                return result.dummy19
                           }
                           set (value) {
                               result.hasDummy19 = true
                               result.dummy19 = value
                           }
                      }
                      func clearDummy19() -> TestRequiredBuilder{
                           result.hasDummy19 = false
                           result.dummy19 = 0
                           return self
                      }
                      var hasDummy20:Bool {
                           get {
                                return result.hasDummy20
                           }
                      }
                      var dummy20:Int32 {
                           get {
                                return result.dummy20
                           }
                           set (value) {
                               result.hasDummy20 = true
                               result.dummy20 = value
                           }
                      }
                      func clearDummy20() -> TestRequiredBuilder{
                           result.hasDummy20 = false
                           result.dummy20 = 0
                           return self
                      }
                      var hasDummy21:Bool {
                           get {
                                return result.hasDummy21
                           }
                      }
                      var dummy21:Int32 {
                           get {
                                return result.dummy21
                           }
                           set (value) {
                               result.hasDummy21 = true
                               result.dummy21 = value
                           }
                      }
                      func clearDummy21() -> TestRequiredBuilder{
                           result.hasDummy21 = false
                           result.dummy21 = 0
                           return self
                      }
                      var hasDummy22:Bool {
                           get {
                                return result.hasDummy22
                           }
                      }
                      var dummy22:Int32 {
                           get {
                                return result.dummy22
                           }
                           set (value) {
                               result.hasDummy22 = true
                               result.dummy22 = value
                           }
                      }
                      func clearDummy22() -> TestRequiredBuilder{
                           result.hasDummy22 = false
                           result.dummy22 = 0
                           return self
                      }
                      var hasDummy23:Bool {
                           get {
                                return result.hasDummy23
                           }
                      }
                      var dummy23:Int32 {
                           get {
                                return result.dummy23
                           }
                           set (value) {
                               result.hasDummy23 = true
                               result.dummy23 = value
                           }
                      }
                      func clearDummy23() -> TestRequiredBuilder{
                           result.hasDummy23 = false
                           result.dummy23 = 0
                           return self
                      }
                      var hasDummy24:Bool {
                           get {
                                return result.hasDummy24
                           }
                      }
                      var dummy24:Int32 {
                           get {
                                return result.dummy24
                           }
                           set (value) {
                               result.hasDummy24 = true
                               result.dummy24 = value
                           }
                      }
                      func clearDummy24() -> TestRequiredBuilder{
                           result.hasDummy24 = false
                           result.dummy24 = 0
                           return self
                      }
                      var hasDummy25:Bool {
                           get {
                                return result.hasDummy25
                           }
                      }
                      var dummy25:Int32 {
                           get {
                                return result.dummy25
                           }
                           set (value) {
                               result.hasDummy25 = true
                               result.dummy25 = value
                           }
                      }
                      func clearDummy25() -> TestRequiredBuilder{
                           result.hasDummy25 = false
                           result.dummy25 = 0
                           return self
                      }
                      var hasDummy26:Bool {
                           get {
                                return result.hasDummy26
                           }
                      }
                      var dummy26:Int32 {
                           get {
                                return result.dummy26
                           }
                           set (value) {
                               result.hasDummy26 = true
                               result.dummy26 = value
                           }
                      }
                      func clearDummy26() -> TestRequiredBuilder{
                           result.hasDummy26 = false
                           result.dummy26 = 0
                           return self
                      }
                      var hasDummy27:Bool {
                           get {
                                return result.hasDummy27
                           }
                      }
                      var dummy27:Int32 {
                           get {
                                return result.dummy27
                           }
                           set (value) {
                               result.hasDummy27 = true
                               result.dummy27 = value
                           }
                      }
                      func clearDummy27() -> TestRequiredBuilder{
                           result.hasDummy27 = false
                           result.dummy27 = 0
                           return self
                      }
                      var hasDummy28:Bool {
                           get {
                                return result.hasDummy28
                           }
                      }
                      var dummy28:Int32 {
                           get {
                                return result.dummy28
                           }
                           set (value) {
                               result.hasDummy28 = true
                               result.dummy28 = value
                           }
                      }
                      func clearDummy28() -> TestRequiredBuilder{
                           result.hasDummy28 = false
                           result.dummy28 = 0
                           return self
                      }
                      var hasDummy29:Bool {
                           get {
                                return result.hasDummy29
                           }
                      }
                      var dummy29:Int32 {
                           get {
                                return result.dummy29
                           }
                           set (value) {
                               result.hasDummy29 = true
                               result.dummy29 = value
                           }
                      }
                      func clearDummy29() -> TestRequiredBuilder{
                           result.hasDummy29 = false
                           result.dummy29 = 0
                           return self
                      }
                      var hasDummy30:Bool {
                           get {
                                return result.hasDummy30
                           }
                      }
                      var dummy30:Int32 {
                           get {
                                return result.dummy30
                           }
                           set (value) {
                               result.hasDummy30 = true
                               result.dummy30 = value
                           }
                      }
                      func clearDummy30() -> TestRequiredBuilder{
                           result.hasDummy30 = false
                           result.dummy30 = 0
                           return self
                      }
                      var hasDummy31:Bool {
                           get {
                                return result.hasDummy31
                           }
                      }
                      var dummy31:Int32 {
                           get {
                                return result.dummy31
                           }
                           set (value) {
                               result.hasDummy31 = true
                               result.dummy31 = value
                           }
                      }
                      func clearDummy31() -> TestRequiredBuilder{
                           result.hasDummy31 = false
                           result.dummy31 = 0
                           return self
                      }
                      var hasDummy32:Bool {
                           get {
                                return result.hasDummy32
                           }
                      }
                      var dummy32:Int32 {
                           get {
                                return result.dummy32
                           }
                           set (value) {
                               result.hasDummy32 = true
                               result.dummy32 = value
                           }
                      }
                      func clearDummy32() -> TestRequiredBuilder{
                           result.hasDummy32 = false
                           result.dummy32 = 0
                           return self
                      }
                      var hasC:Bool {
                           get {
                                return result.hasC
                           }
                      }
                      var c:Int32 {
                           get {
                                return result.c
                           }
                           set (value) {
                               result.hasC = true
                               result.c = value
                           }
                      }
                      func clearC() -> TestRequiredBuilder{
                           result.hasC = false
                           result.c = 0
                           return self
                      }
                      override var internalGetResult:GeneratedMessage {
                           get {
                              return result
                           }
                      }
                      override func clear() -> TestRequiredBuilder {
                        result = TestRequired()
                        return self
                      }
                      override func clone() -> TestRequiredBuilder {
                        return TestRequired.builderWithPrototype(result)
                      }
                      func build() -> TestRequired {
                           checkInitialized()
                           return buildPartial()
                      }
                      func buildPartial() -> TestRequired {
                        var returnMe:TestRequired = result
                        return returnMe
                      }
                      func mergeFrom(other:TestRequired) -> TestRequiredBuilder {
                        if (other == TestRequired()) {
                          return self
                        }
                        if other.hasA {
                             a = other.a
                        }
                        if other.hasDummy2 {
                             dummy2 = other.dummy2
                        }
                        if other.hasB {
                             b = other.b
                        }
                        if other.hasDummy4 {
                             dummy4 = other.dummy4
                        }
                        if other.hasDummy5 {
                             dummy5 = other.dummy5
                        }
                        if other.hasDummy6 {
                             dummy6 = other.dummy6
                        }
                        if other.hasDummy7 {
                             dummy7 = other.dummy7
                        }
                        if other.hasDummy8 {
                             dummy8 = other.dummy8
                        }
                        if other.hasDummy9 {
                             dummy9 = other.dummy9
                        }
                        if other.hasDummy10 {
                             dummy10 = other.dummy10
                        }
                        if other.hasDummy11 {
                             dummy11 = other.dummy11
                        }
                        if other.hasDummy12 {
                             dummy12 = other.dummy12
                        }
                        if other.hasDummy13 {
                             dummy13 = other.dummy13
                        }
                        if other.hasDummy14 {
                             dummy14 = other.dummy14
                        }
                        if other.hasDummy15 {
                             dummy15 = other.dummy15
                        }
                        if other.hasDummy16 {
                             dummy16 = other.dummy16
                        }
                        if other.hasDummy17 {
                             dummy17 = other.dummy17
                        }
                        if other.hasDummy18 {
                             dummy18 = other.dummy18
                        }
                        if other.hasDummy19 {
                             dummy19 = other.dummy19
                        }
                        if other.hasDummy20 {
                             dummy20 = other.dummy20
                        }
                        if other.hasDummy21 {
                             dummy21 = other.dummy21
                        }
                        if other.hasDummy22 {
                             dummy22 = other.dummy22
                        }
                        if other.hasDummy23 {
                             dummy23 = other.dummy23
                        }
                        if other.hasDummy24 {
                             dummy24 = other.dummy24
                        }
                        if other.hasDummy25 {
                             dummy25 = other.dummy25
                        }
                        if other.hasDummy26 {
                             dummy26 = other.dummy26
                        }
                        if other.hasDummy27 {
                             dummy27 = other.dummy27
                        }
                        if other.hasDummy28 {
                             dummy28 = other.dummy28
                        }
                        if other.hasDummy29 {
                             dummy29 = other.dummy29
                        }
                        if other.hasDummy30 {
                             dummy30 = other.dummy30
                        }
                        if other.hasDummy31 {
                             dummy31 = other.dummy31
                        }
                        if other.hasDummy32 {
                             dummy32 = other.dummy32
                        }
                        if other.hasC {
                             c = other.c
                        }
                          mergeUnknownFields(other.unknownFields)
                        return self
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestRequiredBuilder {
                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRequiredBuilder {
                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                        while (true) {
                          var tag:Int32 = input.readTag()
                            if tag == 0 {
                                 self.unknownFields = unknownFieldsBuilder.build()
                                 return self}
                            else if tag == 8 {
                              a = input.readInt32()
                            }
                            else if tag == 16 {
                              dummy2 = input.readInt32()
                            }
                            else if tag == 24 {
                              b = input.readInt32()
                            }
                            else if tag == 32 {
                              dummy4 = input.readInt32()
                            }
                            else if tag == 40 {
                              dummy5 = input.readInt32()
                            }
                            else if tag == 48 {
                              dummy6 = input.readInt32()
                            }
                            else if tag == 56 {
                              dummy7 = input.readInt32()
                            }
                            else if tag == 64 {
                              dummy8 = input.readInt32()
                            }
                            else if tag == 72 {
                              dummy9 = input.readInt32()
                            }
                            else if tag == 80 {
                              dummy10 = input.readInt32()
                            }
                            else if tag == 88 {
                              dummy11 = input.readInt32()
                            }
                            else if tag == 96 {
                              dummy12 = input.readInt32()
                            }
                            else if tag == 104 {
                              dummy13 = input.readInt32()
                            }
                            else if tag == 112 {
                              dummy14 = input.readInt32()
                            }
                            else if tag == 120 {
                              dummy15 = input.readInt32()
                            }
                            else if tag == 128 {
                              dummy16 = input.readInt32()
                            }
                            else if tag == 136 {
                              dummy17 = input.readInt32()
                            }
                            else if tag == 144 {
                              dummy18 = input.readInt32()
                            }
                            else if tag == 152 {
                              dummy19 = input.readInt32()
                            }
                            else if tag == 160 {
                              dummy20 = input.readInt32()
                            }
                            else if tag == 168 {
                              dummy21 = input.readInt32()
                            }
                            else if tag == 176 {
                              dummy22 = input.readInt32()
                            }
                            else if tag == 184 {
                              dummy23 = input.readInt32()
                            }
                            else if tag == 192 {
                              dummy24 = input.readInt32()
                            }
                            else if tag == 200 {
                              dummy25 = input.readInt32()
                            }
                            else if tag == 208 {
                              dummy26 = input.readInt32()
                            }
                            else if tag == 216 {
                              dummy27 = input.readInt32()
                            }
                            else if tag == 224 {
                              dummy28 = input.readInt32()
                            }
                            else if tag == 232 {
                              dummy29 = input.readInt32()
                            }
                            else if tag == 240 {
                              dummy30 = input.readInt32()
                            }
                            else if tag == 248 {
                              dummy31 = input.readInt32()
                            }
                            else if tag == 256 {
                              dummy32 = input.readInt32()
                            }
                            else if tag == 264 {
                              c = input.readInt32()
                            }
                            else {
                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                      unknownFields = unknownFieldsBuilder.build()
                                      return self
                                  }
                            }
                            }
                         }
                      }

                      func == (lhs: TestRequiredForeign, rhs: TestRequiredForeign) -> Bool {
                            if (lhs === rhs) {
                              return true
                            }
                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                            fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
                             fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
                             fieldCheck = fieldCheck && (lhs.hasDummy == rhs.hasDummy) && (!lhs.hasDummy || lhs.dummy == rhs.dummy)
                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                      }
                      class TestRequiredForeign : GeneratedMessage {
                        private(set) var hasOptionalMessage:Bool = false
                        private(set) var optionalMessage:TestRequired = TestRequired()
                        private(set) var hasDummy:Bool = false
                        private(set) var dummy:Int32 = 0

                        private(set) var repeatedMessage:[TestRequired]  = [TestRequired]()
                        override init() {
                             super.init()
                        }
                        override func isInitialized() -> Bool {
                          if hasOptionalMessage {
                            if !optionalMessage.isInitialized() {
                              return false
                            }
                          }
                          var isInitrepeatedMessage:Bool = true
                          for element in repeatedMessage {
                              if (!element.isInitialized()) {
                                  isInitrepeatedMessage = false
                                  break 
                              }
                          }
                          if !isInitrepeatedMessage {
                           return isInitrepeatedMessage
                           }
                          return true
                        }
                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                          if hasOptionalMessage {
                            output.writeMessage(1, value:optionalMessage)
                          }
                          for element in repeatedMessage {
                              output.writeMessage(2, value:element)
                          }
                          if hasDummy {
                            output.writeInt32(3, value:dummy)
                          }
                          unknownFields.writeToCodedOutputStream(output)
                        }
                        override func serializedSize() -> Int32 {
                          var size:Int32 = memoizedSerializedSize
                          if size != -1 {
                            return size
                          }

                          size = 0
                          if hasOptionalMessage {
                            size += WireFormat.computeMessageSize(1, value:optionalMessage)
                          }
                          for element in repeatedMessage {
                              size += WireFormat.computeMessageSize(2, value:element)
                          }
                          if hasDummy {
                            size += WireFormat.computeInt32Size(3, value:dummy)
                          }
                          size += unknownFields.serializedSize()
                          memoizedSerializedSize = size
                          return size
                        }
                        class func parseFromData(data:[Byte]) -> TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromData(data).build()
                        }
                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromInputStream(input:NSInputStream) -> TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromInputStream(input).build()
                        }
                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromCodedInputStream(input).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRequiredForeign {
                          return TestRequiredForeign.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func builder() -> TestRequiredForeignBuilder {
                          return TestRequiredForeignBuilder()
                        }
                        class func builderWithPrototype(prototype:TestRequiredForeign) -> TestRequiredForeignBuilder {
                          return TestRequiredForeign.builder().mergeFrom(prototype)
                        }
                        func builder() -> TestRequiredForeignBuilder {
                          return TestRequiredForeign.builder()
                        }
                        func toBuilder() -> TestRequiredForeignBuilder {
                          return TestRequiredForeign.builderWithPrototype(self)
                        }
                        override func writeDescriptionTo(inout output:String, indent:String) {
                          if hasOptionalMessage {
                            output += "\(indent) optionalMessage {\n"
                            optionalMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
                            output += "\(indent) }\n"
                          }
                          var repeatedMessageElementIndex:Int = 0
                          for element in repeatedMessage {
                              output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
                              element.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent)}\n"
                              repeatedMessageElementIndex++
                          }
                          if hasDummy {
                            output += "\(indent) dummy: \(dummy) \n"
                          }
                          unknownFields.writeDescriptionTo(&output, indent:indent)
                        }
                        override var hashValue:Int {
                         get {
                              var hashCode:Int = 7
                              if hasOptionalMessage {
                                hashCode = (hashCode &* 31) &+ optionalMessage.hashValue
                              }
                              for element in repeatedMessage {
                                  hashCode = (hashCode &* 31) &+ element.hashValue
                              }
                              if hasDummy {
                                 hashCode = (hashCode &* 31) &+ dummy.hashValue
                              }
                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                              return hashCode
                            }
                          }
                        }

                        class TestRequiredForeignBuilder : GeneratedMessageBuilder {
                        private var result:TestRequiredForeign

                        override init () {
                           result = TestRequiredForeign()
                        }
                        var hasOptionalMessage:Bool {
                             get {
                                 return result.hasOptionalMessage
                             }
                        }
                        var optionalMessage:TestRequired {
                             get {
                                 return result.optionalMessage     }
                             set (value) {
                                 result.hasOptionalMessage = true
                                 result.optionalMessage = value
                             }
                        }
                        func setOptionalMessageBuilder(builderForValue:TestRequiredBuilder) -> TestRequiredForeignBuilder {
                          optionalMessage = builderForValue.build()
                          return self
                        }
                        func mergeOptionalMessage(value:TestRequired) -> TestRequiredForeignBuilder {
                          if (result.hasOptionalMessage && result.optionalMessage != TestRequired()) {
                            result.optionalMessage = TestRequired.builderWithPrototype(result.optionalMessage).mergeFrom(value).buildPartial()
                          } else {
                            result.optionalMessage = value
                          }
                          result.hasOptionalMessage = true
                          return self
                        }
                        func clearOptionalMessage() -> TestRequiredForeignBuilder {
                          result.hasOptionalMessage = false
                          result.optionalMessage = TestRequired()
                          return self
                        }
                        var repeatedMessage:[TestRequired] {
                             get {
                                 return result.repeatedMessage
                             }
                             set (value) {
                                 result.repeatedMessage = value
                             }
                        }
                        func clearRepeatedMessage() -> TestRequiredForeignBuilder {
                          result.repeatedMessage.removeAll(keepCapacity: false)
                          return self
                        }
                        var hasDummy:Bool {
                             get {
                                  return result.hasDummy
                             }
                        }
                        var dummy:Int32 {
                             get {
                                  return result.dummy
                             }
                             set (value) {
                                 result.hasDummy = true
                                 result.dummy = value
                             }
                        }
                        func clearDummy() -> TestRequiredForeignBuilder{
                             result.hasDummy = false
                             result.dummy = 0
                             return self
                        }
                        override var internalGetResult:GeneratedMessage {
                             get {
                                return result
                             }
                        }
                        override func clear() -> TestRequiredForeignBuilder {
                          result = TestRequiredForeign()
                          return self
                        }
                        override func clone() -> TestRequiredForeignBuilder {
                          return TestRequiredForeign.builderWithPrototype(result)
                        }
                        func build() -> TestRequiredForeign {
                             checkInitialized()
                             return buildPartial()
                        }
                        func buildPartial() -> TestRequiredForeign {
                          var returnMe:TestRequiredForeign = result
                          return returnMe
                        }
                        func mergeFrom(other:TestRequiredForeign) -> TestRequiredForeignBuilder {
                          if (other == TestRequiredForeign()) {
                            return self
                          }
                          if (other.hasOptionalMessage) {
                              mergeOptionalMessage(other.optionalMessage)
                          }
                          if !other.repeatedMessage.isEmpty  {
                             result.repeatedMessage += other.repeatedMessage
                          }
                          if other.hasDummy {
                               dummy = other.dummy
                          }
                            mergeUnknownFields(other.unknownFields)
                          return self
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestRequiredForeignBuilder {
                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRequiredForeignBuilder {
                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                          while (true) {
                            var tag:Int32 = input.readTag()
                              if tag == 0 {
                                   self.unknownFields = unknownFieldsBuilder.build()
                                   return self}
                              else if tag == 10 {
                                var subBuilder:TestRequiredBuilder = TestRequired.builder()
                                if hasOptionalMessage {
                                  subBuilder.mergeFrom(optionalMessage)
                                }
                                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                optionalMessage = subBuilder.buildPartial()
                              }
                              else if tag == 18 {
                                var subBuilder = TestRequired.builder()
                                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                repeatedMessage += [subBuilder.buildPartial()]
                              }
                              else if tag == 24 {
                                dummy = input.readInt32()
                              }
                              else {
                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                        unknownFields = unknownFieldsBuilder.build()
                                        return self
                                    }
                              }
                              }
                           }
                        }

                        func == (lhs: TestForeignNested, rhs: TestForeignNested) -> Bool {
                              if (lhs === rhs) {
                                return true
                              }
                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                              fieldCheck = fieldCheck && (lhs.hasForeignNested == rhs.hasForeignNested) && (!lhs.hasForeignNested || lhs.foreignNested == rhs.foreignNested)
                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                        }
                        class TestForeignNested : GeneratedMessage {
                          private(set) var hasForeignNested:Bool = false
                          private(set) var foreignNested:TestAllTypesNestedMessage = TestAllTypesNestedMessage()
                          override init() {
                               super.init()
                          }
                          override func isInitialized() -> Bool {
                            return true
                          }
                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                            if hasForeignNested {
                              output.writeMessage(1, value:foreignNested)
                            }
                            unknownFields.writeToCodedOutputStream(output)
                          }
                          override func serializedSize() -> Int32 {
                            var size:Int32 = memoizedSerializedSize
                            if size != -1 {
                              return size
                            }

                            size = 0
                            if hasForeignNested {
                              size += WireFormat.computeMessageSize(1, value:foreignNested)
                            }
                            size += unknownFields.serializedSize()
                            memoizedSerializedSize = size
                            return size
                          }
                          class func parseFromData(data:[Byte]) -> TestForeignNested {
                            return TestForeignNested.builder().mergeFromData(data).build()
                          }
                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestForeignNested {
                            return TestForeignNested.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromInputStream(input:NSInputStream) -> TestForeignNested {
                            return TestForeignNested.builder().mergeFromInputStream(input).build()
                          }
                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestForeignNested {
                            return TestForeignNested.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestForeignNested {
                            return TestForeignNested.builder().mergeFromCodedInputStream(input).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestForeignNested {
                            return TestForeignNested.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func builder() -> TestForeignNestedBuilder {
                            return TestForeignNestedBuilder()
                          }
                          class func builderWithPrototype(prototype:TestForeignNested) -> TestForeignNestedBuilder {
                            return TestForeignNested.builder().mergeFrom(prototype)
                          }
                          func builder() -> TestForeignNestedBuilder {
                            return TestForeignNested.builder()
                          }
                          func toBuilder() -> TestForeignNestedBuilder {
                            return TestForeignNested.builderWithPrototype(self)
                          }
                          override func writeDescriptionTo(inout output:String, indent:String) {
                            if hasForeignNested {
                              output += "\(indent) foreignNested {\n"
                              foreignNested.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent) }\n"
                            }
                            unknownFields.writeDescriptionTo(&output, indent:indent)
                          }
                          override var hashValue:Int {
                           get {
                                var hashCode:Int = 7
                                if hasForeignNested {
                                  hashCode = (hashCode &* 31) &+ foreignNested.hashValue
                                }
                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                return hashCode
                              }
                            }
                          }

                          class TestForeignNestedBuilder : GeneratedMessageBuilder {
                          private var result:TestForeignNested

                          override init () {
                             result = TestForeignNested()
                          }
                          var hasForeignNested:Bool {
                               get {
                                   return result.hasForeignNested
                               }
                          }
                          var foreignNested:TestAllTypesNestedMessage {
                               get {
                                   return result.foreignNested     }
                               set (value) {
                                   result.hasForeignNested = true
                                   result.foreignNested = value
                               }
                          }
                          func setForeignNestedBuilder(builderForValue:TestAllTypesNestedMessageBuilder) -> TestForeignNestedBuilder {
                            foreignNested = builderForValue.build()
                            return self
                          }
                          func mergeForeignNested(value:TestAllTypesNestedMessage) -> TestForeignNestedBuilder {
                            if (result.hasForeignNested && result.foreignNested != TestAllTypesNestedMessage()) {
                              result.foreignNested = TestAllTypesNestedMessage.builderWithPrototype(result.foreignNested).mergeFrom(value).buildPartial()
                            } else {
                              result.foreignNested = value
                            }
                            result.hasForeignNested = true
                            return self
                          }
                          func clearForeignNested() -> TestForeignNestedBuilder {
                            result.hasForeignNested = false
                            result.foreignNested = TestAllTypesNestedMessage()
                            return self
                          }
                          override var internalGetResult:GeneratedMessage {
                               get {
                                  return result
                               }
                          }
                          override func clear() -> TestForeignNestedBuilder {
                            result = TestForeignNested()
                            return self
                          }
                          override func clone() -> TestForeignNestedBuilder {
                            return TestForeignNested.builderWithPrototype(result)
                          }
                          func build() -> TestForeignNested {
                               checkInitialized()
                               return buildPartial()
                          }
                          func buildPartial() -> TestForeignNested {
                            var returnMe:TestForeignNested = result
                            return returnMe
                          }
                          func mergeFrom(other:TestForeignNested) -> TestForeignNestedBuilder {
                            if (other == TestForeignNested()) {
                              return self
                            }
                            if (other.hasForeignNested) {
                                mergeForeignNested(other.foreignNested)
                            }
                              mergeUnknownFields(other.unknownFields)
                            return self
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestForeignNestedBuilder {
                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestForeignNestedBuilder {
                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                            while (true) {
                              var tag:Int32 = input.readTag()
                                if tag == 0 {
                                     self.unknownFields = unknownFieldsBuilder.build()
                                     return self}
                                else if tag == 10 {
                                  var subBuilder:TestAllTypesNestedMessageBuilder = TestAllTypesNestedMessage.builder()
                                  if hasForeignNested {
                                    subBuilder.mergeFrom(foreignNested)
                                  }
                                  input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                  foreignNested = subBuilder.buildPartial()
                                }
                                else {
                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                          unknownFields = unknownFieldsBuilder.build()
                                          return self
                                      }
                                }
                                }
                             }
                          }

                          func == (lhs: TestEmptyMessage, rhs: TestEmptyMessage) -> Bool {
                                if (lhs === rhs) {
                                  return true
                                }
                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                          }
                          class TestEmptyMessage : GeneratedMessage {
                            override init() {
                                 super.init()
                            }
                            override func isInitialized() -> Bool {
                              return true
                            }
                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                              unknownFields.writeToCodedOutputStream(output)
                            }
                            override func serializedSize() -> Int32 {
                              var size:Int32 = memoizedSerializedSize
                              if size != -1 {
                                return size
                              }

                              size = 0
                              size += unknownFields.serializedSize()
                              memoizedSerializedSize = size
                              return size
                            }
                            class func parseFromData(data:[Byte]) -> TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromData(data).build()
                            }
                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromInputStream(input:NSInputStream) -> TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromInputStream(input).build()
                            }
                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromCodedInputStream(input).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmptyMessage {
                              return TestEmptyMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func builder() -> TestEmptyMessageBuilder {
                              return TestEmptyMessageBuilder()
                            }
                            class func builderWithPrototype(prototype:TestEmptyMessage) -> TestEmptyMessageBuilder {
                              return TestEmptyMessage.builder().mergeFrom(prototype)
                            }
                            func builder() -> TestEmptyMessageBuilder {
                              return TestEmptyMessage.builder()
                            }
                            func toBuilder() -> TestEmptyMessageBuilder {
                              return TestEmptyMessage.builderWithPrototype(self)
                            }
                            override func writeDescriptionTo(inout output:String, indent:String) {
                              unknownFields.writeDescriptionTo(&output, indent:indent)
                            }
                            override var hashValue:Int {
                             get {
                                  var hashCode:Int = 7
                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                  return hashCode
                                }
                              }
                            }

                            class TestEmptyMessageBuilder : GeneratedMessageBuilder {
                            private var result:TestEmptyMessage

                            override init () {
                               result = TestEmptyMessage()
                            }
                            override var internalGetResult:GeneratedMessage {
                                 get {
                                    return result
                                 }
                            }
                            override func clear() -> TestEmptyMessageBuilder {
                              result = TestEmptyMessage()
                              return self
                            }
                            override func clone() -> TestEmptyMessageBuilder {
                              return TestEmptyMessage.builderWithPrototype(result)
                            }
                            func build() -> TestEmptyMessage {
                                 checkInitialized()
                                 return buildPartial()
                            }
                            func buildPartial() -> TestEmptyMessage {
                              var returnMe:TestEmptyMessage = result
                              return returnMe
                            }
                            func mergeFrom(other:TestEmptyMessage) -> TestEmptyMessageBuilder {
                              if (other == TestEmptyMessage()) {
                                return self
                              }
                                mergeUnknownFields(other.unknownFields)
                              return self
                            }
                            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestEmptyMessageBuilder {
                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                            }
                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmptyMessageBuilder {
                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                              while (true) {
                                var tag:Int32 = input.readTag()
                                  if tag == 0 {
                                       self.unknownFields = unknownFieldsBuilder.build()
                                       return self}
                                  else {
                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                            unknownFields = unknownFieldsBuilder.build()
                                            return self
                                        }
                                  }
                                  }
                               }
                            }

                            func == (lhs: TestEmptyMessageWithExtensions, rhs: TestEmptyMessageWithExtensions) -> Bool {
                                  if (lhs === rhs) {
                                    return true
                                  }
                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                            }
                            class TestEmptyMessageWithExtensions : ExtendableMessage {
                              override init() {
                                   super.init()
                              }
                              override func isInitialized() -> Bool {
                                if !extensionsAreInitialized() {
                                  return false
                                }
                                return true
                              }
                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
                                unknownFields.writeToCodedOutputStream(output)
                              }
                              override func serializedSize() -> Int32 {
                                var size:Int32 = memoizedSerializedSize
                                if size != -1 {
                                  return size
                                }

                                size = 0
                                size += extensionsSerializedSize()
                                size += unknownFields.serializedSize()
                                memoizedSerializedSize = size
                                return size
                              }
                              class func parseFromData(data:[Byte]) -> TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromData(data).build()
                              }
                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromInputStream(input:NSInputStream) -> TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromInputStream(input).build()
                              }
                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream) -> TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromCodedInputStream(input).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmptyMessageWithExtensions {
                                return TestEmptyMessageWithExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func builder() -> TestEmptyMessageWithExtensionsBuilder {
                                return TestEmptyMessageWithExtensionsBuilder()
                              }
                              class func builderWithPrototype(prototype:TestEmptyMessageWithExtensions) -> TestEmptyMessageWithExtensionsBuilder {
                                return TestEmptyMessageWithExtensions.builder().mergeFrom(prototype)
                              }
                              func builder() -> TestEmptyMessageWithExtensionsBuilder {
                                return TestEmptyMessageWithExtensions.builder()
                              }
                              func toBuilder() -> TestEmptyMessageWithExtensionsBuilder {
                                return TestEmptyMessageWithExtensions.builderWithPrototype(self)
                              }
                              override func writeDescriptionTo(inout output:String, indent:String) {
                                writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
                                unknownFields.writeDescriptionTo(&output, indent:indent)
                              }
                              override var hashValue:Int {
                               get {
                                    var hashCode:Int = 7
                                    hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                    return hashCode
                                  }
                                }
                              }

                              class TestEmptyMessageWithExtensionsBuilder : ExtendableMessageBuilder {
                              private var result:TestEmptyMessageWithExtensions

                              override init () {
                                 result = TestEmptyMessageWithExtensions()
                              }
                              override var internalGetResult:ExtendableMessage {
                                   get {
                                       return result
                                   }
                              }
                              override func clear() -> TestEmptyMessageWithExtensionsBuilder {
                                result = TestEmptyMessageWithExtensions()
                                return self
                              }
                              override func clone() -> TestEmptyMessageWithExtensionsBuilder {
                                return TestEmptyMessageWithExtensions.builderWithPrototype(result)
                              }
                              func build() -> TestEmptyMessageWithExtensions {
                                   checkInitialized()
                                   return buildPartial()
                              }
                              func buildPartial() -> TestEmptyMessageWithExtensions {
                                var returnMe:TestEmptyMessageWithExtensions = result
                                return returnMe
                              }
                              func mergeFrom(other:TestEmptyMessageWithExtensions) -> TestEmptyMessageWithExtensionsBuilder {
                                if (other == TestEmptyMessageWithExtensions()) {
                                  return self
                                }
                                mergeExtensionFields(other)
                                  mergeUnknownFields(other.unknownFields)
                                return self
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestEmptyMessageWithExtensionsBuilder {
                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmptyMessageWithExtensionsBuilder {
                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                while (true) {
                                  var tag:Int32 = input.readTag()
                                    if tag == 0 {
                                         self.unknownFields = unknownFieldsBuilder.build()
                                         return self}
                                    else {
                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                              unknownFields = unknownFieldsBuilder.build()
                                              return self
                                          }
                                    }
                                    }
                                 }
                              }

                              func == (lhs: TestMultipleExtensionRanges, rhs: TestMultipleExtensionRanges) -> Bool {
                                    if (lhs === rhs) {
                                      return true
                                    }
                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                    fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(42), endExclusive:Int32(43))
                                     fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4143), endExclusive:Int32(4244))
                                     fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(65536), endExclusive:Int32(536870912))
                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                              }
                              class TestMultipleExtensionRanges : ExtendableMessage {
                                override init() {
                                     super.init()
                                }
                                override func isInitialized() -> Bool {
                                  if !extensionsAreInitialized() {
                                    return false
                                  }
                                  return true
                                }
                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                  writeExtensionsToCodedOutputStream(output, startInclusive:Int32(42), endExclusive:Int32(43))
                                  writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4143), endExclusive:Int32(4244))
                                  writeExtensionsToCodedOutputStream(output, startInclusive:Int32(65536), endExclusive:Int32(536870912))
                                  unknownFields.writeToCodedOutputStream(output)
                                }
                                override func serializedSize() -> Int32 {
                                  var size:Int32 = memoizedSerializedSize
                                  if size != -1 {
                                    return size
                                  }

                                  size = 0
                                  size += extensionsSerializedSize()
                                  size += unknownFields.serializedSize()
                                  memoizedSerializedSize = size
                                  return size
                                }
                                class func parseFromData(data:[Byte]) -> TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromData(data).build()
                                }
                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromInputStream(input:NSInputStream) -> TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromInputStream(input).build()
                                }
                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream) -> TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromCodedInputStream(input).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMultipleExtensionRanges {
                                  return TestMultipleExtensionRanges.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func builder() -> TestMultipleExtensionRangesBuilder {
                                  return TestMultipleExtensionRangesBuilder()
                                }
                                class func builderWithPrototype(prototype:TestMultipleExtensionRanges) -> TestMultipleExtensionRangesBuilder {
                                  return TestMultipleExtensionRanges.builder().mergeFrom(prototype)
                                }
                                func builder() -> TestMultipleExtensionRangesBuilder {
                                  return TestMultipleExtensionRanges.builder()
                                }
                                func toBuilder() -> TestMultipleExtensionRangesBuilder {
                                  return TestMultipleExtensionRanges.builderWithPrototype(self)
                                }
                                override func writeDescriptionTo(inout output:String, indent:String) {
                                  writeExtensionDescription(&output, startInclusive:Int32(42), endExclusive:Int32(43), indent:indent)
                                  writeExtensionDescription(&output, startInclusive:Int32(4143), endExclusive:Int32(4244), indent:indent)
                                  writeExtensionDescription(&output, startInclusive:Int32(65536), endExclusive:Int32(536870912), indent:indent)
                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                }
                                override var hashValue:Int {
                                 get {
                                      var hashCode:Int = 7
                                      hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(42), endExclusive:Int32(43)))
                                      hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4143), endExclusive:Int32(4244)))
                                      hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(65536), endExclusive:Int32(536870912)))
                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                      return hashCode
                                    }
                                  }
                                }

                                class TestMultipleExtensionRangesBuilder : ExtendableMessageBuilder {
                                private var result:TestMultipleExtensionRanges

                                override init () {
                                   result = TestMultipleExtensionRanges()
                                }
                                override var internalGetResult:ExtendableMessage {
                                     get {
                                         return result
                                     }
                                }
                                override func clear() -> TestMultipleExtensionRangesBuilder {
                                  result = TestMultipleExtensionRanges()
                                  return self
                                }
                                override func clone() -> TestMultipleExtensionRangesBuilder {
                                  return TestMultipleExtensionRanges.builderWithPrototype(result)
                                }
                                func build() -> TestMultipleExtensionRanges {
                                     checkInitialized()
                                     return buildPartial()
                                }
                                func buildPartial() -> TestMultipleExtensionRanges {
                                  var returnMe:TestMultipleExtensionRanges = result
                                  return returnMe
                                }
                                func mergeFrom(other:TestMultipleExtensionRanges) -> TestMultipleExtensionRangesBuilder {
                                  if (other == TestMultipleExtensionRanges()) {
                                    return self
                                  }
                                  mergeExtensionFields(other)
                                    mergeUnknownFields(other.unknownFields)
                                  return self
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMultipleExtensionRangesBuilder {
                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMultipleExtensionRangesBuilder {
                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                  while (true) {
                                    var tag:Int32 = input.readTag()
                                      if tag == 0 {
                                           self.unknownFields = unknownFieldsBuilder.build()
                                           return self}
                                      else {
                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                unknownFields = unknownFieldsBuilder.build()
                                                return self
                                            }
                                      }
                                      }
                                   }
                                }

                                func == (lhs: TestReallyLargeTagNumber, rhs: TestReallyLargeTagNumber) -> Bool {
                                      if (lhs === rhs) {
                                        return true
                                      }
                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                      fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                       fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                }
                                class TestReallyLargeTagNumber : GeneratedMessage {
                                  private(set) var hasA:Bool = false
                                  private(set) var a:Int32 = 0

                                  private(set) var hasBb:Bool = false
                                  private(set) var bb:Int32 = 0

                                  override init() {
                                       super.init()
                                  }
                                  override func isInitialized() -> Bool {
                                    return true
                                  }
                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                    if hasA {
                                      output.writeInt32(1, value:a)
                                    }
                                    if hasBb {
                                      output.writeInt32(268435455, value:bb)
                                    }
                                    unknownFields.writeToCodedOutputStream(output)
                                  }
                                  override func serializedSize() -> Int32 {
                                    var size:Int32 = memoizedSerializedSize
                                    if size != -1 {
                                      return size
                                    }

                                    size = 0
                                    if hasA {
                                      size += WireFormat.computeInt32Size(1, value:a)
                                    }
                                    if hasBb {
                                      size += WireFormat.computeInt32Size(268435455, value:bb)
                                    }
                                    size += unknownFields.serializedSize()
                                    memoizedSerializedSize = size
                                    return size
                                  }
                                  class func parseFromData(data:[Byte]) -> TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromData(data).build()
                                  }
                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream) -> TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromInputStream(input).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream) -> TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromCodedInputStream(input).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestReallyLargeTagNumber {
                                    return TestReallyLargeTagNumber.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func builder() -> TestReallyLargeTagNumberBuilder {
                                    return TestReallyLargeTagNumberBuilder()
                                  }
                                  class func builderWithPrototype(prototype:TestReallyLargeTagNumber) -> TestReallyLargeTagNumberBuilder {
                                    return TestReallyLargeTagNumber.builder().mergeFrom(prototype)
                                  }
                                  func builder() -> TestReallyLargeTagNumberBuilder {
                                    return TestReallyLargeTagNumber.builder()
                                  }
                                  func toBuilder() -> TestReallyLargeTagNumberBuilder {
                                    return TestReallyLargeTagNumber.builderWithPrototype(self)
                                  }
                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                    if hasA {
                                      output += "\(indent) a: \(a) \n"
                                    }
                                    if hasBb {
                                      output += "\(indent) bb: \(bb) \n"
                                    }
                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                  }
                                  override var hashValue:Int {
                                   get {
                                        var hashCode:Int = 7
                                        if hasA {
                                           hashCode = (hashCode &* 31) &+ a.hashValue
                                        }
                                        if hasBb {
                                           hashCode = (hashCode &* 31) &+ bb.hashValue
                                        }
                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                        return hashCode
                                      }
                                    }
                                  }

                                  class TestReallyLargeTagNumberBuilder : GeneratedMessageBuilder {
                                  private var result:TestReallyLargeTagNumber

                                  override init () {
                                     result = TestReallyLargeTagNumber()
                                  }
                                  var hasA:Bool {
                                       get {
                                            return result.hasA
                                       }
                                  }
                                  var a:Int32 {
                                       get {
                                            return result.a
                                       }
                                       set (value) {
                                           result.hasA = true
                                           result.a = value
                                       }
                                  }
                                  func clearA() -> TestReallyLargeTagNumberBuilder{
                                       result.hasA = false
                                       result.a = 0
                                       return self
                                  }
                                  var hasBb:Bool {
                                       get {
                                            return result.hasBb
                                       }
                                  }
                                  var bb:Int32 {
                                       get {
                                            return result.bb
                                       }
                                       set (value) {
                                           result.hasBb = true
                                           result.bb = value
                                       }
                                  }
                                  func clearBb() -> TestReallyLargeTagNumberBuilder{
                                       result.hasBb = false
                                       result.bb = 0
                                       return self
                                  }
                                  override var internalGetResult:GeneratedMessage {
                                       get {
                                          return result
                                       }
                                  }
                                  override func clear() -> TestReallyLargeTagNumberBuilder {
                                    result = TestReallyLargeTagNumber()
                                    return self
                                  }
                                  override func clone() -> TestReallyLargeTagNumberBuilder {
                                    return TestReallyLargeTagNumber.builderWithPrototype(result)
                                  }
                                  func build() -> TestReallyLargeTagNumber {
                                       checkInitialized()
                                       return buildPartial()
                                  }
                                  func buildPartial() -> TestReallyLargeTagNumber {
                                    var returnMe:TestReallyLargeTagNumber = result
                                    return returnMe
                                  }
                                  func mergeFrom(other:TestReallyLargeTagNumber) -> TestReallyLargeTagNumberBuilder {
                                    if (other == TestReallyLargeTagNumber()) {
                                      return self
                                    }
                                    if other.hasA {
                                         a = other.a
                                    }
                                    if other.hasBb {
                                         bb = other.bb
                                    }
                                      mergeUnknownFields(other.unknownFields)
                                    return self
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestReallyLargeTagNumberBuilder {
                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestReallyLargeTagNumberBuilder {
                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                    while (true) {
                                      var tag:Int32 = input.readTag()
                                        if tag == 0 {
                                             self.unknownFields = unknownFieldsBuilder.build()
                                             return self}
                                        else if tag == 8 {
                                          a = input.readInt32()
                                        }
                                        else if tag == 2147483640 {
                                          bb = input.readInt32()
                                        }
                                        else {
                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                  unknownFields = unknownFieldsBuilder.build()
                                                  return self
                                              }
                                        }
                                        }
                                     }
                                  }

                                  func == (lhs: TestRecursiveMessage, rhs: TestRecursiveMessage) -> Bool {
                                        if (lhs === rhs) {
                                          return true
                                        }
                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                        fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                         fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                  }
                                  class TestRecursiveMessage : GeneratedMessage {
                                    private(set) var hasA:Bool = false
                                    private(set) var a:TestRecursiveMessage = TestRecursiveMessage()
                                    private(set) var hasI:Bool = false
                                    private(set) var i:Int32 = 0

                                    override init() {
                                         super.init()
                                    }
                                    override func isInitialized() -> Bool {
                                      return true
                                    }
                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                      if hasA {
                                        output.writeMessage(1, value:a)
                                      }
                                      if hasI {
                                        output.writeInt32(2, value:i)
                                      }
                                      unknownFields.writeToCodedOutputStream(output)
                                    }
                                    override func serializedSize() -> Int32 {
                                      var size:Int32 = memoizedSerializedSize
                                      if size != -1 {
                                        return size
                                      }

                                      size = 0
                                      if hasA {
                                        size += WireFormat.computeMessageSize(1, value:a)
                                      }
                                      if hasI {
                                        size += WireFormat.computeInt32Size(2, value:i)
                                      }
                                      size += unknownFields.serializedSize()
                                      memoizedSerializedSize = size
                                      return size
                                    }
                                    class func parseFromData(data:[Byte]) -> TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromData(data).build()
                                    }
                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream) -> TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromInputStream(input).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromCodedInputStream(input).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRecursiveMessage {
                                      return TestRecursiveMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func builder() -> TestRecursiveMessageBuilder {
                                      return TestRecursiveMessageBuilder()
                                    }
                                    class func builderWithPrototype(prototype:TestRecursiveMessage) -> TestRecursiveMessageBuilder {
                                      return TestRecursiveMessage.builder().mergeFrom(prototype)
                                    }
                                    func builder() -> TestRecursiveMessageBuilder {
                                      return TestRecursiveMessage.builder()
                                    }
                                    func toBuilder() -> TestRecursiveMessageBuilder {
                                      return TestRecursiveMessage.builderWithPrototype(self)
                                    }
                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                      if hasA {
                                        output += "\(indent) a {\n"
                                        a.writeDescriptionTo(&output, indent:"\(indent)  ")
                                        output += "\(indent) }\n"
                                      }
                                      if hasI {
                                        output += "\(indent) i: \(i) \n"
                                      }
                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                    }
                                    override var hashValue:Int {
                                     get {
                                          var hashCode:Int = 7
                                          if hasA {
                                            hashCode = (hashCode &* 31) &+ a.hashValue
                                          }
                                          if hasI {
                                             hashCode = (hashCode &* 31) &+ i.hashValue
                                          }
                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                          return hashCode
                                        }
                                      }
                                    }

                                    class TestRecursiveMessageBuilder : GeneratedMessageBuilder {
                                    private var result:TestRecursiveMessage

                                    override init () {
                                       result = TestRecursiveMessage()
                                    }
                                    var hasA:Bool {
                                         get {
                                             return result.hasA
                                         }
                                    }
                                    var a:TestRecursiveMessage {
                                         get {
                                             return result.a     }
                                         set (value) {
                                             result.hasA = true
                                             result.a = value
                                         }
                                    }
                                    func setABuilder(builderForValue:TestRecursiveMessageBuilder) -> TestRecursiveMessageBuilder {
                                      a = builderForValue.build()
                                      return self
                                    }
                                    func mergeA(value:TestRecursiveMessage) -> TestRecursiveMessageBuilder {
                                      if (result.hasA && result.a != TestRecursiveMessage()) {
                                        result.a = TestRecursiveMessage.builderWithPrototype(result.a).mergeFrom(value).buildPartial()
                                      } else {
                                        result.a = value
                                      }
                                      result.hasA = true
                                      return self
                                    }
                                    func clearA() -> TestRecursiveMessageBuilder {
                                      result.hasA = false
                                      result.a = TestRecursiveMessage()
                                      return self
                                    }
                                    var hasI:Bool {
                                         get {
                                              return result.hasI
                                         }
                                    }
                                    var i:Int32 {
                                         get {
                                              return result.i
                                         }
                                         set (value) {
                                             result.hasI = true
                                             result.i = value
                                         }
                                    }
                                    func clearI() -> TestRecursiveMessageBuilder{
                                         result.hasI = false
                                         result.i = 0
                                         return self
                                    }
                                    override var internalGetResult:GeneratedMessage {
                                         get {
                                            return result
                                         }
                                    }
                                    override func clear() -> TestRecursiveMessageBuilder {
                                      result = TestRecursiveMessage()
                                      return self
                                    }
                                    override func clone() -> TestRecursiveMessageBuilder {
                                      return TestRecursiveMessage.builderWithPrototype(result)
                                    }
                                    func build() -> TestRecursiveMessage {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> TestRecursiveMessage {
                                      var returnMe:TestRecursiveMessage = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:TestRecursiveMessage) -> TestRecursiveMessageBuilder {
                                      if (other == TestRecursiveMessage()) {
                                        return self
                                      }
                                      if (other.hasA) {
                                          mergeA(other.a)
                                      }
                                      if other.hasI {
                                           i = other.i
                                      }
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestRecursiveMessageBuilder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRecursiveMessageBuilder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 10 {
                                            var subBuilder:TestRecursiveMessageBuilder = TestRecursiveMessage.builder()
                                            if hasA {
                                              subBuilder.mergeFrom(a)
                                            }
                                            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                            a = subBuilder.buildPartial()
                                          }
                                          else if tag == 16 {
                                            i = input.readInt32()
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }

                                    func == (lhs: TestMutualRecursionA, rhs: TestMutualRecursionA) -> Bool {
                                          if (lhs === rhs) {
                                            return true
                                          }
                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                          fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
                                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                    }
                                    class TestMutualRecursionA : GeneratedMessage {
                                      private(set) var hasBb:Bool = false
                                      private(set) var bb:TestMutualRecursionB = TestMutualRecursionB()
                                      override init() {
                                           super.init()
                                      }
                                      override func isInitialized() -> Bool {
                                        return true
                                      }
                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                        if hasBb {
                                          output.writeMessage(1, value:bb)
                                        }
                                        unknownFields.writeToCodedOutputStream(output)
                                      }
                                      override func serializedSize() -> Int32 {
                                        var size:Int32 = memoizedSerializedSize
                                        if size != -1 {
                                          return size
                                        }

                                        size = 0
                                        if hasBb {
                                          size += WireFormat.computeMessageSize(1, value:bb)
                                        }
                                        size += unknownFields.serializedSize()
                                        memoizedSerializedSize = size
                                        return size
                                      }
                                      class func parseFromData(data:[Byte]) -> TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromData(data).build()
                                      }
                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream) -> TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromInputStream(input).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream) -> TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromCodedInputStream(input).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMutualRecursionA {
                                        return TestMutualRecursionA.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func builder() -> TestMutualRecursionABuilder {
                                        return TestMutualRecursionABuilder()
                                      }
                                      class func builderWithPrototype(prototype:TestMutualRecursionA) -> TestMutualRecursionABuilder {
                                        return TestMutualRecursionA.builder().mergeFrom(prototype)
                                      }
                                      func builder() -> TestMutualRecursionABuilder {
                                        return TestMutualRecursionA.builder()
                                      }
                                      func toBuilder() -> TestMutualRecursionABuilder {
                                        return TestMutualRecursionA.builderWithPrototype(self)
                                      }
                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                        if hasBb {
                                          output += "\(indent) bb {\n"
                                          bb.writeDescriptionTo(&output, indent:"\(indent)  ")
                                          output += "\(indent) }\n"
                                        }
                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                      }
                                      override var hashValue:Int {
                                       get {
                                            var hashCode:Int = 7
                                            if hasBb {
                                              hashCode = (hashCode &* 31) &+ bb.hashValue
                                            }
                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                            return hashCode
                                          }
                                        }
                                      }

                                      class TestMutualRecursionABuilder : GeneratedMessageBuilder {
                                      private var result:TestMutualRecursionA

                                      override init () {
                                         result = TestMutualRecursionA()
                                      }
                                      var hasBb:Bool {
                                           get {
                                               return result.hasBb
                                           }
                                      }
                                      var bb:TestMutualRecursionB {
                                           get {
                                               return result.bb     }
                                           set (value) {
                                               result.hasBb = true
                                               result.bb = value
                                           }
                                      }
                                      func setBbBuilder(builderForValue:TestMutualRecursionBBuilder) -> TestMutualRecursionABuilder {
                                        bb = builderForValue.build()
                                        return self
                                      }
                                      func mergeBb(value:TestMutualRecursionB) -> TestMutualRecursionABuilder {
                                        if (result.hasBb && result.bb != TestMutualRecursionB()) {
                                          result.bb = TestMutualRecursionB.builderWithPrototype(result.bb).mergeFrom(value).buildPartial()
                                        } else {
                                          result.bb = value
                                        }
                                        result.hasBb = true
                                        return self
                                      }
                                      func clearBb() -> TestMutualRecursionABuilder {
                                        result.hasBb = false
                                        result.bb = TestMutualRecursionB()
                                        return self
                                      }
                                      override var internalGetResult:GeneratedMessage {
                                           get {
                                              return result
                                           }
                                      }
                                      override func clear() -> TestMutualRecursionABuilder {
                                        result = TestMutualRecursionA()
                                        return self
                                      }
                                      override func clone() -> TestMutualRecursionABuilder {
                                        return TestMutualRecursionA.builderWithPrototype(result)
                                      }
                                      func build() -> TestMutualRecursionA {
                                           checkInitialized()
                                           return buildPartial()
                                      }
                                      func buildPartial() -> TestMutualRecursionA {
                                        var returnMe:TestMutualRecursionA = result
                                        return returnMe
                                      }
                                      func mergeFrom(other:TestMutualRecursionA) -> TestMutualRecursionABuilder {
                                        if (other == TestMutualRecursionA()) {
                                          return self
                                        }
                                        if (other.hasBb) {
                                            mergeBb(other.bb)
                                        }
                                          mergeUnknownFields(other.unknownFields)
                                        return self
                                      }
                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMutualRecursionABuilder {
                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                      }
                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMutualRecursionABuilder {
                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                        while (true) {
                                          var tag:Int32 = input.readTag()
                                            if tag == 0 {
                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                 return self}
                                            else if tag == 10 {
                                              var subBuilder:TestMutualRecursionBBuilder = TestMutualRecursionB.builder()
                                              if hasBb {
                                                subBuilder.mergeFrom(bb)
                                              }
                                              input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                              bb = subBuilder.buildPartial()
                                            }
                                            else {
                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                      unknownFields = unknownFieldsBuilder.build()
                                                      return self
                                                  }
                                            }
                                            }
                                         }
                                      }

                                      func == (lhs: TestMutualRecursionB, rhs: TestMutualRecursionB) -> Bool {
                                            if (lhs === rhs) {
                                              return true
                                            }
                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                            fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                             fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                      }
                                      class TestMutualRecursionB : GeneratedMessage {
                                        private(set) var hasA:Bool = false
                                        private(set) var a:TestMutualRecursionA = TestMutualRecursionA()
                                        private(set) var hasOptionalInt32:Bool = false
                                        private(set) var optionalInt32:Int32 = 0

                                        override init() {
                                             super.init()
                                        }
                                        override func isInitialized() -> Bool {
                                          return true
                                        }
                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                          if hasA {
                                            output.writeMessage(1, value:a)
                                          }
                                          if hasOptionalInt32 {
                                            output.writeInt32(2, value:optionalInt32)
                                          }
                                          unknownFields.writeToCodedOutputStream(output)
                                        }
                                        override func serializedSize() -> Int32 {
                                          var size:Int32 = memoizedSerializedSize
                                          if size != -1 {
                                            return size
                                          }

                                          size = 0
                                          if hasA {
                                            size += WireFormat.computeMessageSize(1, value:a)
                                          }
                                          if hasOptionalInt32 {
                                            size += WireFormat.computeInt32Size(2, value:optionalInt32)
                                          }
                                          size += unknownFields.serializedSize()
                                          memoizedSerializedSize = size
                                          return size
                                        }
                                        class func parseFromData(data:[Byte]) -> TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromData(data).build()
                                        }
                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream) -> TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromInputStream(input).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromCodedInputStream(input).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMutualRecursionB {
                                          return TestMutualRecursionB.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func builder() -> TestMutualRecursionBBuilder {
                                          return TestMutualRecursionBBuilder()
                                        }
                                        class func builderWithPrototype(prototype:TestMutualRecursionB) -> TestMutualRecursionBBuilder {
                                          return TestMutualRecursionB.builder().mergeFrom(prototype)
                                        }
                                        func builder() -> TestMutualRecursionBBuilder {
                                          return TestMutualRecursionB.builder()
                                        }
                                        func toBuilder() -> TestMutualRecursionBBuilder {
                                          return TestMutualRecursionB.builderWithPrototype(self)
                                        }
                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                          if hasA {
                                            output += "\(indent) a {\n"
                                            a.writeDescriptionTo(&output, indent:"\(indent)  ")
                                            output += "\(indent) }\n"
                                          }
                                          if hasOptionalInt32 {
                                            output += "\(indent) optionalInt32: \(optionalInt32) \n"
                                          }
                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                        }
                                        override var hashValue:Int {
                                         get {
                                              var hashCode:Int = 7
                                              if hasA {
                                                hashCode = (hashCode &* 31) &+ a.hashValue
                                              }
                                              if hasOptionalInt32 {
                                                 hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
                                              }
                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                              return hashCode
                                            }
                                          }
                                        }

                                        class TestMutualRecursionBBuilder : GeneratedMessageBuilder {
                                        private var result:TestMutualRecursionB

                                        override init () {
                                           result = TestMutualRecursionB()
                                        }
                                        var hasA:Bool {
                                             get {
                                                 return result.hasA
                                             }
                                        }
                                        var a:TestMutualRecursionA {
                                             get {
                                                 return result.a     }
                                             set (value) {
                                                 result.hasA = true
                                                 result.a = value
                                             }
                                        }
                                        func setABuilder(builderForValue:TestMutualRecursionABuilder) -> TestMutualRecursionBBuilder {
                                          a = builderForValue.build()
                                          return self
                                        }
                                        func mergeA(value:TestMutualRecursionA) -> TestMutualRecursionBBuilder {
                                          if (result.hasA && result.a != TestMutualRecursionA()) {
                                            result.a = TestMutualRecursionA.builderWithPrototype(result.a).mergeFrom(value).buildPartial()
                                          } else {
                                            result.a = value
                                          }
                                          result.hasA = true
                                          return self
                                        }
                                        func clearA() -> TestMutualRecursionBBuilder {
                                          result.hasA = false
                                          result.a = TestMutualRecursionA()
                                          return self
                                        }
                                        var hasOptionalInt32:Bool {
                                             get {
                                                  return result.hasOptionalInt32
                                             }
                                        }
                                        var optionalInt32:Int32 {
                                             get {
                                                  return result.optionalInt32
                                             }
                                             set (value) {
                                                 result.hasOptionalInt32 = true
                                                 result.optionalInt32 = value
                                             }
                                        }
                                        func clearOptionalInt32() -> TestMutualRecursionBBuilder{
                                             result.hasOptionalInt32 = false
                                             result.optionalInt32 = 0
                                             return self
                                        }
                                        override var internalGetResult:GeneratedMessage {
                                             get {
                                                return result
                                             }
                                        }
                                        override func clear() -> TestMutualRecursionBBuilder {
                                          result = TestMutualRecursionB()
                                          return self
                                        }
                                        override func clone() -> TestMutualRecursionBBuilder {
                                          return TestMutualRecursionB.builderWithPrototype(result)
                                        }
                                        func build() -> TestMutualRecursionB {
                                             checkInitialized()
                                             return buildPartial()
                                        }
                                        func buildPartial() -> TestMutualRecursionB {
                                          var returnMe:TestMutualRecursionB = result
                                          return returnMe
                                        }
                                        func mergeFrom(other:TestMutualRecursionB) -> TestMutualRecursionBBuilder {
                                          if (other == TestMutualRecursionB()) {
                                            return self
                                          }
                                          if (other.hasA) {
                                              mergeA(other.a)
                                          }
                                          if other.hasOptionalInt32 {
                                               optionalInt32 = other.optionalInt32
                                          }
                                            mergeUnknownFields(other.unknownFields)
                                          return self
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMutualRecursionBBuilder {
                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMutualRecursionBBuilder {
                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                          while (true) {
                                            var tag:Int32 = input.readTag()
                                              if tag == 0 {
                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                   return self}
                                              else if tag == 10 {
                                                var subBuilder:TestMutualRecursionABuilder = TestMutualRecursionA.builder()
                                                if hasA {
                                                  subBuilder.mergeFrom(a)
                                                }
                                                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                a = subBuilder.buildPartial()
                                              }
                                              else if tag == 16 {
                                                optionalInt32 = input.readInt32()
                                              }
                                              else {
                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                        unknownFields = unknownFieldsBuilder.build()
                                                        return self
                                                    }
                                              }
                                              }
                                           }
                                        }

                                        func == (lhs: TestDupFieldNumber, rhs: TestDupFieldNumber) -> Bool {
                                              if (lhs === rhs) {
                                                return true
                                              }
                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                              fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                               fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
                                               fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
                                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                        }
                                        class TestDupFieldNumber : GeneratedMessage {
                                          private(set) var hasA:Bool = false
                                          private(set) var a:Int32 = 0

                                          private(set) var hasFoo:Bool = false
                                          private(set) var foo:TestDupFieldNumberFoo = TestDupFieldNumberFoo()
                                          private(set) var hasBar:Bool = false
                                          private(set) var bar:TestDupFieldNumberBar = TestDupFieldNumberBar()
                                          override init() {
                                               super.init()
                                          }
                                          override func isInitialized() -> Bool {
                                            return true
                                          }
                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                            if hasA {
                                              output.writeInt32(1, value:a)
                                            }
                                            if hasFoo {
                                              output.writeGroup(2, value:foo)
                                            }
                                            if hasBar {
                                              output.writeGroup(3, value:bar)
                                            }
                                            unknownFields.writeToCodedOutputStream(output)
                                          }
                                          override func serializedSize() -> Int32 {
                                            var size:Int32 = memoizedSerializedSize
                                            if size != -1 {
                                              return size
                                            }

                                            size = 0
                                            if hasA {
                                              size += WireFormat.computeInt32Size(1, value:a)
                                            }
                                            if hasFoo {
                                              size += WireFormat.computeGroupSize(2, value:foo)
                                            }
                                            if hasBar {
                                              size += WireFormat.computeGroupSize(3, value:bar)
                                            }
                                            size += unknownFields.serializedSize()
                                            memoizedSerializedSize = size
                                            return size
                                          }
                                          class func parseFromData(data:[Byte]) -> TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromData(data).build()
                                          }
                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func parseFromInputStream(input:NSInputStream) -> TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromInputStream(input).build()
                                          }
                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromCodedInputStream(input).build()
                                          }
                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumber {
                                            return TestDupFieldNumber.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                          }
                                          class func builder() -> TestDupFieldNumberBuilder {
                                            return TestDupFieldNumberBuilder()
                                          }
                                          class func builderWithPrototype(prototype:TestDupFieldNumber) -> TestDupFieldNumberBuilder {
                                            return TestDupFieldNumber.builder().mergeFrom(prototype)
                                          }
                                          func builder() -> TestDupFieldNumberBuilder {
                                            return TestDupFieldNumber.builder()
                                          }
                                          func toBuilder() -> TestDupFieldNumberBuilder {
                                            return TestDupFieldNumber.builderWithPrototype(self)
                                          }
                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                            if hasA {
                                              output += "\(indent) a: \(a) \n"
                                            }
                                            if hasFoo {
                                              output += "\(indent) foo {\n"
                                              foo.writeDescriptionTo(&output, indent:"\(indent)  ")
                                              output += "\(indent) }\n"
                                            }
                                            if hasBar {
                                              output += "\(indent) bar {\n"
                                              bar.writeDescriptionTo(&output, indent:"\(indent)  ")
                                              output += "\(indent) }\n"
                                            }
                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                          }
                                          override var hashValue:Int {
                                           get {
                                                var hashCode:Int = 7
                                                if hasA {
                                                   hashCode = (hashCode &* 31) &+ a.hashValue
                                                }
                                                if hasFoo {
                                                  hashCode = (hashCode &* 31) &+ foo.hashValue
                                                }
                                                if hasBar {
                                                  hashCode = (hashCode &* 31) &+ bar.hashValue
                                                }
                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                return hashCode
                                              }
                                            }
                                          }

                                          func == (lhs: TestDupFieldNumberFoo, rhs: TestDupFieldNumberFoo) -> Bool {
                                                if (lhs === rhs) {
                                                  return true
                                                }
                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                          }
                                          class TestDupFieldNumberFoo : GeneratedMessage {
                                            private(set) var hasA:Bool = false
                                            private(set) var a:Int32 = 0

                                            override init() {
                                                 super.init()
                                            }
                                            override func isInitialized() -> Bool {
                                              return true
                                            }
                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                              if hasA {
                                                output.writeInt32(1, value:a)
                                              }
                                              unknownFields.writeToCodedOutputStream(output)
                                            }
                                            override func serializedSize() -> Int32 {
                                              var size:Int32 = memoizedSerializedSize
                                              if size != -1 {
                                                return size
                                              }

                                              size = 0
                                              if hasA {
                                                size += WireFormat.computeInt32Size(1, value:a)
                                              }
                                              size += unknownFields.serializedSize()
                                              memoizedSerializedSize = size
                                              return size
                                            }
                                            class func parseFromData(data:[Byte]) -> TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromData(data).build()
                                            }
                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func parseFromInputStream(input:NSInputStream) -> TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromInputStream(input).build()
                                            }
                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromCodedInputStream(input).build()
                                            }
                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberFoo {
                                              return TestDupFieldNumberFoo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                            }
                                            class func builder() -> TestDupFieldNumberFooBuilder {
                                              return TestDupFieldNumberFooBuilder()
                                            }
                                            class func builderWithPrototype(prototype:TestDupFieldNumberFoo) -> TestDupFieldNumberFooBuilder {
                                              return TestDupFieldNumberFoo.builder().mergeFrom(prototype)
                                            }
                                            func builder() -> TestDupFieldNumberFooBuilder {
                                              return TestDupFieldNumberFoo.builder()
                                            }
                                            func toBuilder() -> TestDupFieldNumberFooBuilder {
                                              return TestDupFieldNumberFoo.builderWithPrototype(self)
                                            }
                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                              if hasA {
                                                output += "\(indent) a: \(a) \n"
                                              }
                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                            }
                                            override var hashValue:Int {
                                             get {
                                                  var hashCode:Int = 7
                                                  if hasA {
                                                     hashCode = (hashCode &* 31) &+ a.hashValue
                                                  }
                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                  return hashCode
                                                }
                                              }
                                            }

                                            class TestDupFieldNumberFooBuilder : GeneratedMessageBuilder {
                                            private var result:TestDupFieldNumberFoo

                                            override init () {
                                               result = TestDupFieldNumberFoo()
                                            }
                                            var hasA:Bool {
                                                 get {
                                                      return result.hasA
                                                 }
                                            }
                                            var a:Int32 {
                                                 get {
                                                      return result.a
                                                 }
                                                 set (value) {
                                                     result.hasA = true
                                                     result.a = value
                                                 }
                                            }
                                            func clearA() -> TestDupFieldNumberFooBuilder{
                                                 result.hasA = false
                                                 result.a = 0
                                                 return self
                                            }
                                            override var internalGetResult:GeneratedMessage {
                                                 get {
                                                    return result
                                                 }
                                            }
                                            override func clear() -> TestDupFieldNumberFooBuilder {
                                              result = TestDupFieldNumberFoo()
                                              return self
                                            }
                                            override func clone() -> TestDupFieldNumberFooBuilder {
                                              return TestDupFieldNumberFoo.builderWithPrototype(result)
                                            }
                                            func build() -> TestDupFieldNumberFoo {
                                                 checkInitialized()
                                                 return buildPartial()
                                            }
                                            func buildPartial() -> TestDupFieldNumberFoo {
                                              var returnMe:TestDupFieldNumberFoo = result
                                              return returnMe
                                            }
                                            func mergeFrom(other:TestDupFieldNumberFoo) -> TestDupFieldNumberFooBuilder {
                                              if (other == TestDupFieldNumberFoo()) {
                                                return self
                                              }
                                              if other.hasA {
                                                   a = other.a
                                              }
                                                mergeUnknownFields(other.unknownFields)
                                              return self
                                            }
                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDupFieldNumberFooBuilder {
                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                            }
                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberFooBuilder {
                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                              while (true) {
                                                var tag:Int32 = input.readTag()
                                                  if tag == 0 {
                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                       return self}
                                                  else if tag == 8 {
                                                    a = input.readInt32()
                                                  }
                                                  else {
                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                            unknownFields = unknownFieldsBuilder.build()
                                                            return self
                                                        }
                                                  }
                                                  }
                                               }
                                            }

                                            func == (lhs: TestDupFieldNumberBar, rhs: TestDupFieldNumberBar) -> Bool {
                                                  if (lhs === rhs) {
                                                    return true
                                                  }
                                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                  fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                            }
                                            class TestDupFieldNumberBar : GeneratedMessage {
                                              private(set) var hasA:Bool = false
                                              private(set) var a:Int32 = 0

                                              override init() {
                                                   super.init()
                                              }
                                              override func isInitialized() -> Bool {
                                                return true
                                              }
                                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                if hasA {
                                                  output.writeInt32(1, value:a)
                                                }
                                                unknownFields.writeToCodedOutputStream(output)
                                              }
                                              override func serializedSize() -> Int32 {
                                                var size:Int32 = memoizedSerializedSize
                                                if size != -1 {
                                                  return size
                                                }

                                                size = 0
                                                if hasA {
                                                  size += WireFormat.computeInt32Size(1, value:a)
                                                }
                                                size += unknownFields.serializedSize()
                                                memoizedSerializedSize = size
                                                return size
                                              }
                                              class func parseFromData(data:[Byte]) -> TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromData(data).build()
                                              }
                                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func parseFromInputStream(input:NSInputStream) -> TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromInputStream(input).build()
                                              }
                                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func parseFromCodedInputStream(input:CodedInputStream) -> TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromCodedInputStream(input).build()
                                              }
                                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberBar {
                                                return TestDupFieldNumberBar.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                              }
                                              class func builder() -> TestDupFieldNumberBarBuilder {
                                                return TestDupFieldNumberBarBuilder()
                                              }
                                              class func builderWithPrototype(prototype:TestDupFieldNumberBar) -> TestDupFieldNumberBarBuilder {
                                                return TestDupFieldNumberBar.builder().mergeFrom(prototype)
                                              }
                                              func builder() -> TestDupFieldNumberBarBuilder {
                                                return TestDupFieldNumberBar.builder()
                                              }
                                              func toBuilder() -> TestDupFieldNumberBarBuilder {
                                                return TestDupFieldNumberBar.builderWithPrototype(self)
                                              }
                                              override func writeDescriptionTo(inout output:String, indent:String) {
                                                if hasA {
                                                  output += "\(indent) a: \(a) \n"
                                                }
                                                unknownFields.writeDescriptionTo(&output, indent:indent)
                                              }
                                              override var hashValue:Int {
                                               get {
                                                    var hashCode:Int = 7
                                                    if hasA {
                                                       hashCode = (hashCode &* 31) &+ a.hashValue
                                                    }
                                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                    return hashCode
                                                  }
                                                }
                                              }

                                              class TestDupFieldNumberBarBuilder : GeneratedMessageBuilder {
                                              private var result:TestDupFieldNumberBar

                                              override init () {
                                                 result = TestDupFieldNumberBar()
                                              }
                                              var hasA:Bool {
                                                   get {
                                                        return result.hasA
                                                   }
                                              }
                                              var a:Int32 {
                                                   get {
                                                        return result.a
                                                   }
                                                   set (value) {
                                                       result.hasA = true
                                                       result.a = value
                                                   }
                                              }
                                              func clearA() -> TestDupFieldNumberBarBuilder{
                                                   result.hasA = false
                                                   result.a = 0
                                                   return self
                                              }
                                              override var internalGetResult:GeneratedMessage {
                                                   get {
                                                      return result
                                                   }
                                              }
                                              override func clear() -> TestDupFieldNumberBarBuilder {
                                                result = TestDupFieldNumberBar()
                                                return self
                                              }
                                              override func clone() -> TestDupFieldNumberBarBuilder {
                                                return TestDupFieldNumberBar.builderWithPrototype(result)
                                              }
                                              func build() -> TestDupFieldNumberBar {
                                                   checkInitialized()
                                                   return buildPartial()
                                              }
                                              func buildPartial() -> TestDupFieldNumberBar {
                                                var returnMe:TestDupFieldNumberBar = result
                                                return returnMe
                                              }
                                              func mergeFrom(other:TestDupFieldNumberBar) -> TestDupFieldNumberBarBuilder {
                                                if (other == TestDupFieldNumberBar()) {
                                                  return self
                                                }
                                                if other.hasA {
                                                     a = other.a
                                                }
                                                  mergeUnknownFields(other.unknownFields)
                                                return self
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDupFieldNumberBarBuilder {
                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberBarBuilder {
                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                while (true) {
                                                  var tag:Int32 = input.readTag()
                                                    if tag == 0 {
                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                         return self}
                                                    else if tag == 8 {
                                                      a = input.readInt32()
                                                    }
                                                    else {
                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                              unknownFields = unknownFieldsBuilder.build()
                                                              return self
                                                          }
                                                    }
                                                    }
                                                 }
                                              }

                                              class TestDupFieldNumberBuilder : GeneratedMessageBuilder {
                                              private var result:TestDupFieldNumber

                                              override init () {
                                                 result = TestDupFieldNumber()
                                              }
                                              var hasA:Bool {
                                                   get {
                                                        return result.hasA
                                                   }
                                              }
                                              var a:Int32 {
                                                   get {
                                                        return result.a
                                                   }
                                                   set (value) {
                                                       result.hasA = true
                                                       result.a = value
                                                   }
                                              }
                                              func clearA() -> TestDupFieldNumberBuilder{
                                                   result.hasA = false
                                                   result.a = 0
                                                   return self
                                              }
                                              var hasFoo:Bool {
                                                   get {
                                                       return result.hasFoo
                                                   }
                                              }
                                              var foo:TestDupFieldNumberFoo {
                                                   get {
                                                       return result.foo     }
                                                   set (value) {
                                                       result.hasFoo = true
                                                       result.foo = value
                                                   }
                                              }
                                              func setFooBuilder(builderForValue:TestDupFieldNumberFooBuilder) -> TestDupFieldNumberBuilder {
                                                foo = builderForValue.build()
                                                return self
                                              }
                                              func mergeFoo(value:TestDupFieldNumberFoo) -> TestDupFieldNumberBuilder {
                                                if (result.hasFoo && result.foo != TestDupFieldNumberFoo()) {
                                                  result.foo = TestDupFieldNumberFoo.builderWithPrototype(result.foo).mergeFrom(value).buildPartial()
                                                } else {
                                                  result.foo = value
                                                }
                                                result.hasFoo = true
                                                return self
                                              }
                                              func clearFoo() -> TestDupFieldNumberBuilder {
                                                result.hasFoo = false
                                                result.foo = TestDupFieldNumberFoo()
                                                return self
                                              }
                                              var hasBar:Bool {
                                                   get {
                                                       return result.hasBar
                                                   }
                                              }
                                              var bar:TestDupFieldNumberBar {
                                                   get {
                                                       return result.bar     }
                                                   set (value) {
                                                       result.hasBar = true
                                                       result.bar = value
                                                   }
                                              }
                                              func setBarBuilder(builderForValue:TestDupFieldNumberBarBuilder) -> TestDupFieldNumberBuilder {
                                                bar = builderForValue.build()
                                                return self
                                              }
                                              func mergeBar(value:TestDupFieldNumberBar) -> TestDupFieldNumberBuilder {
                                                if (result.hasBar && result.bar != TestDupFieldNumberBar()) {
                                                  result.bar = TestDupFieldNumberBar.builderWithPrototype(result.bar).mergeFrom(value).buildPartial()
                                                } else {
                                                  result.bar = value
                                                }
                                                result.hasBar = true
                                                return self
                                              }
                                              func clearBar() -> TestDupFieldNumberBuilder {
                                                result.hasBar = false
                                                result.bar = TestDupFieldNumberBar()
                                                return self
                                              }
                                              override var internalGetResult:GeneratedMessage {
                                                   get {
                                                      return result
                                                   }
                                              }
                                              override func clear() -> TestDupFieldNumberBuilder {
                                                result = TestDupFieldNumber()
                                                return self
                                              }
                                              override func clone() -> TestDupFieldNumberBuilder {
                                                return TestDupFieldNumber.builderWithPrototype(result)
                                              }
                                              func build() -> TestDupFieldNumber {
                                                   checkInitialized()
                                                   return buildPartial()
                                              }
                                              func buildPartial() -> TestDupFieldNumber {
                                                var returnMe:TestDupFieldNumber = result
                                                return returnMe
                                              }
                                              func mergeFrom(other:TestDupFieldNumber) -> TestDupFieldNumberBuilder {
                                                if (other == TestDupFieldNumber()) {
                                                  return self
                                                }
                                                if other.hasA {
                                                     a = other.a
                                                }
                                                if (other.hasFoo) {
                                                    mergeFoo(other.foo)
                                                }
                                                if (other.hasBar) {
                                                    mergeBar(other.bar)
                                                }
                                                  mergeUnknownFields(other.unknownFields)
                                                return self
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDupFieldNumberBuilder {
                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                              }
                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDupFieldNumberBuilder {
                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                while (true) {
                                                  var tag:Int32 = input.readTag()
                                                    if tag == 0 {
                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                         return self}
                                                    else if tag == 8 {
                                                      a = input.readInt32()
                                                    }
                                                    else if tag == 19 {
                                                      var subBuilder:TestDupFieldNumberFooBuilder = TestDupFieldNumberFoo.builder()
                                                      if hasFoo {
                                                        subBuilder.mergeFrom(foo)
                                                      }
                                                      input.readGroup(2, builder:subBuilder, extensionRegistry:extensionRegistry)
                                                      foo = subBuilder.buildPartial()
                                                    }
                                                    else if tag == 27 {
                                                      var subBuilder:TestDupFieldNumberBarBuilder = TestDupFieldNumberBar.builder()
                                                      if hasBar {
                                                        subBuilder.mergeFrom(bar)
                                                      }
                                                      input.readGroup(3, builder:subBuilder, extensionRegistry:extensionRegistry)
                                                      bar = subBuilder.buildPartial()
                                                    }
                                                    else {
                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                              unknownFields = unknownFieldsBuilder.build()
                                                              return self
                                                          }
                                                    }
                                                    }
                                                 }
                                              }

                                              func == (lhs: TestEagerMessage, rhs: TestEagerMessage) -> Bool {
                                                    if (lhs === rhs) {
                                                      return true
                                                    }
                                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                    fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
                                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                              }
                                              class TestEagerMessage : GeneratedMessage {
                                                private(set) var hasSubMessage:Bool = false
                                                private(set) var subMessage:TestAllTypes = TestAllTypes()
                                                override init() {
                                                     super.init()
                                                }
                                                override func isInitialized() -> Bool {
                                                  return true
                                                }
                                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                  if hasSubMessage {
                                                    output.writeMessage(1, value:subMessage)
                                                  }
                                                  unknownFields.writeToCodedOutputStream(output)
                                                }
                                                override func serializedSize() -> Int32 {
                                                  var size:Int32 = memoizedSerializedSize
                                                  if size != -1 {
                                                    return size
                                                  }

                                                  size = 0
                                                  if hasSubMessage {
                                                    size += WireFormat.computeMessageSize(1, value:subMessage)
                                                  }
                                                  size += unknownFields.serializedSize()
                                                  memoizedSerializedSize = size
                                                  return size
                                                }
                                                class func parseFromData(data:[Byte]) -> TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromData(data).build()
                                                }
                                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func parseFromInputStream(input:NSInputStream) -> TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromInputStream(input).build()
                                                }
                                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func parseFromCodedInputStream(input:CodedInputStream) -> TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromCodedInputStream(input).build()
                                                }
                                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEagerMessage {
                                                  return TestEagerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                }
                                                class func builder() -> TestEagerMessageBuilder {
                                                  return TestEagerMessageBuilder()
                                                }
                                                class func builderWithPrototype(prototype:TestEagerMessage) -> TestEagerMessageBuilder {
                                                  return TestEagerMessage.builder().mergeFrom(prototype)
                                                }
                                                func builder() -> TestEagerMessageBuilder {
                                                  return TestEagerMessage.builder()
                                                }
                                                func toBuilder() -> TestEagerMessageBuilder {
                                                  return TestEagerMessage.builderWithPrototype(self)
                                                }
                                                override func writeDescriptionTo(inout output:String, indent:String) {
                                                  if hasSubMessage {
                                                    output += "\(indent) subMessage {\n"
                                                    subMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                    output += "\(indent) }\n"
                                                  }
                                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                                }
                                                override var hashValue:Int {
                                                 get {
                                                      var hashCode:Int = 7
                                                      if hasSubMessage {
                                                        hashCode = (hashCode &* 31) &+ subMessage.hashValue
                                                      }
                                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                      return hashCode
                                                    }
                                                  }
                                                }

                                                class TestEagerMessageBuilder : GeneratedMessageBuilder {
                                                private var result:TestEagerMessage

                                                override init () {
                                                   result = TestEagerMessage()
                                                }
                                                var hasSubMessage:Bool {
                                                     get {
                                                         return result.hasSubMessage
                                                     }
                                                }
                                                var subMessage:TestAllTypes {
                                                     get {
                                                         return result.subMessage     }
                                                     set (value) {
                                                         result.hasSubMessage = true
                                                         result.subMessage = value
                                                     }
                                                }
                                                func setSubMessageBuilder(builderForValue:TestAllTypesBuilder) -> TestEagerMessageBuilder {
                                                  subMessage = builderForValue.build()
                                                  return self
                                                }
                                                func mergeSubMessage(value:TestAllTypes) -> TestEagerMessageBuilder {
                                                  if (result.hasSubMessage && result.subMessage != TestAllTypes()) {
                                                    result.subMessage = TestAllTypes.builderWithPrototype(result.subMessage).mergeFrom(value).buildPartial()
                                                  } else {
                                                    result.subMessage = value
                                                  }
                                                  result.hasSubMessage = true
                                                  return self
                                                }
                                                func clearSubMessage() -> TestEagerMessageBuilder {
                                                  result.hasSubMessage = false
                                                  result.subMessage = TestAllTypes()
                                                  return self
                                                }
                                                override var internalGetResult:GeneratedMessage {
                                                     get {
                                                        return result
                                                     }
                                                }
                                                override func clear() -> TestEagerMessageBuilder {
                                                  result = TestEagerMessage()
                                                  return self
                                                }
                                                override func clone() -> TestEagerMessageBuilder {
                                                  return TestEagerMessage.builderWithPrototype(result)
                                                }
                                                func build() -> TestEagerMessage {
                                                     checkInitialized()
                                                     return buildPartial()
                                                }
                                                func buildPartial() -> TestEagerMessage {
                                                  var returnMe:TestEagerMessage = result
                                                  return returnMe
                                                }
                                                func mergeFrom(other:TestEagerMessage) -> TestEagerMessageBuilder {
                                                  if (other == TestEagerMessage()) {
                                                    return self
                                                  }
                                                  if (other.hasSubMessage) {
                                                      mergeSubMessage(other.subMessage)
                                                  }
                                                    mergeUnknownFields(other.unknownFields)
                                                  return self
                                                }
                                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestEagerMessageBuilder {
                                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                }
                                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEagerMessageBuilder {
                                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                  while (true) {
                                                    var tag:Int32 = input.readTag()
                                                      if tag == 0 {
                                                           self.unknownFields = unknownFieldsBuilder.build()
                                                           return self}
                                                      else if tag == 10 {
                                                        var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                        if hasSubMessage {
                                                          subBuilder.mergeFrom(subMessage)
                                                        }
                                                        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                        subMessage = subBuilder.buildPartial()
                                                      }
                                                      else {
                                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                unknownFields = unknownFieldsBuilder.build()
                                                                return self
                                                            }
                                                      }
                                                      }
                                                   }
                                                }

                                                func == (lhs: TestLazyMessage, rhs: TestLazyMessage) -> Bool {
                                                      if (lhs === rhs) {
                                                        return true
                                                      }
                                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                      fieldCheck = fieldCheck && (lhs.hasSubMessage == rhs.hasSubMessage) && (!lhs.hasSubMessage || lhs.subMessage == rhs.subMessage)
                                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                }
                                                class TestLazyMessage : GeneratedMessage {
                                                  private(set) var hasSubMessage:Bool = false
                                                  private(set) var subMessage:TestAllTypes = TestAllTypes()
                                                  override init() {
                                                       super.init()
                                                  }
                                                  override func isInitialized() -> Bool {
                                                    return true
                                                  }
                                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                    if hasSubMessage {
                                                      output.writeMessage(1, value:subMessage)
                                                    }
                                                    unknownFields.writeToCodedOutputStream(output)
                                                  }
                                                  override func serializedSize() -> Int32 {
                                                    var size:Int32 = memoizedSerializedSize
                                                    if size != -1 {
                                                      return size
                                                    }

                                                    size = 0
                                                    if hasSubMessage {
                                                      size += WireFormat.computeMessageSize(1, value:subMessage)
                                                    }
                                                    size += unknownFields.serializedSize()
                                                    memoizedSerializedSize = size
                                                    return size
                                                  }
                                                  class func parseFromData(data:[Byte]) -> TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromData(data).build()
                                                  }
                                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func parseFromInputStream(input:NSInputStream) -> TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromInputStream(input).build()
                                                  }
                                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func parseFromCodedInputStream(input:CodedInputStream) -> TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromCodedInputStream(input).build()
                                                  }
                                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestLazyMessage {
                                                    return TestLazyMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                  }
                                                  class func builder() -> TestLazyMessageBuilder {
                                                    return TestLazyMessageBuilder()
                                                  }
                                                  class func builderWithPrototype(prototype:TestLazyMessage) -> TestLazyMessageBuilder {
                                                    return TestLazyMessage.builder().mergeFrom(prototype)
                                                  }
                                                  func builder() -> TestLazyMessageBuilder {
                                                    return TestLazyMessage.builder()
                                                  }
                                                  func toBuilder() -> TestLazyMessageBuilder {
                                                    return TestLazyMessage.builderWithPrototype(self)
                                                  }
                                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                                    if hasSubMessage {
                                                      output += "\(indent) subMessage {\n"
                                                      subMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                      output += "\(indent) }\n"
                                                    }
                                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                                  }
                                                  override var hashValue:Int {
                                                   get {
                                                        var hashCode:Int = 7
                                                        if hasSubMessage {
                                                          hashCode = (hashCode &* 31) &+ subMessage.hashValue
                                                        }
                                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                        return hashCode
                                                      }
                                                    }
                                                  }

                                                  class TestLazyMessageBuilder : GeneratedMessageBuilder {
                                                  private var result:TestLazyMessage

                                                  override init () {
                                                     result = TestLazyMessage()
                                                  }
                                                  var hasSubMessage:Bool {
                                                       get {
                                                           return result.hasSubMessage
                                                       }
                                                  }
                                                  var subMessage:TestAllTypes {
                                                       get {
                                                           return result.subMessage     }
                                                       set (value) {
                                                           result.hasSubMessage = true
                                                           result.subMessage = value
                                                       }
                                                  }
                                                  func setSubMessageBuilder(builderForValue:TestAllTypesBuilder) -> TestLazyMessageBuilder {
                                                    subMessage = builderForValue.build()
                                                    return self
                                                  }
                                                  func mergeSubMessage(value:TestAllTypes) -> TestLazyMessageBuilder {
                                                    if (result.hasSubMessage && result.subMessage != TestAllTypes()) {
                                                      result.subMessage = TestAllTypes.builderWithPrototype(result.subMessage).mergeFrom(value).buildPartial()
                                                    } else {
                                                      result.subMessage = value
                                                    }
                                                    result.hasSubMessage = true
                                                    return self
                                                  }
                                                  func clearSubMessage() -> TestLazyMessageBuilder {
                                                    result.hasSubMessage = false
                                                    result.subMessage = TestAllTypes()
                                                    return self
                                                  }
                                                  override var internalGetResult:GeneratedMessage {
                                                       get {
                                                          return result
                                                       }
                                                  }
                                                  override func clear() -> TestLazyMessageBuilder {
                                                    result = TestLazyMessage()
                                                    return self
                                                  }
                                                  override func clone() -> TestLazyMessageBuilder {
                                                    return TestLazyMessage.builderWithPrototype(result)
                                                  }
                                                  func build() -> TestLazyMessage {
                                                       checkInitialized()
                                                       return buildPartial()
                                                  }
                                                  func buildPartial() -> TestLazyMessage {
                                                    var returnMe:TestLazyMessage = result
                                                    return returnMe
                                                  }
                                                  func mergeFrom(other:TestLazyMessage) -> TestLazyMessageBuilder {
                                                    if (other == TestLazyMessage()) {
                                                      return self
                                                    }
                                                    if (other.hasSubMessage) {
                                                        mergeSubMessage(other.subMessage)
                                                    }
                                                      mergeUnknownFields(other.unknownFields)
                                                    return self
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestLazyMessageBuilder {
                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                  }
                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestLazyMessageBuilder {
                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                    while (true) {
                                                      var tag:Int32 = input.readTag()
                                                        if tag == 0 {
                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                             return self}
                                                        else if tag == 10 {
                                                          var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                          if hasSubMessage {
                                                            subBuilder.mergeFrom(subMessage)
                                                          }
                                                          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                          subMessage = subBuilder.buildPartial()
                                                        }
                                                        else {
                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                  return self
                                                              }
                                                        }
                                                        }
                                                     }
                                                  }

                                                  func == (lhs: TestNestedMessageHasBits, rhs: TestNestedMessageHasBits) -> Bool {
                                                        if (lhs === rhs) {
                                                          return true
                                                        }
                                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                        fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
                                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                  }
                                                  class TestNestedMessageHasBits : GeneratedMessage {
                                                    private(set) var hasOptionalNestedMessage:Bool = false
                                                    private(set) var optionalNestedMessage:TestNestedMessageHasBitsNestedMessage = TestNestedMessageHasBitsNestedMessage()
                                                    override init() {
                                                         super.init()
                                                    }
                                                    override func isInitialized() -> Bool {
                                                      return true
                                                    }
                                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                      if hasOptionalNestedMessage {
                                                        output.writeMessage(1, value:optionalNestedMessage)
                                                      }
                                                      unknownFields.writeToCodedOutputStream(output)
                                                    }
                                                    override func serializedSize() -> Int32 {
                                                      var size:Int32 = memoizedSerializedSize
                                                      if size != -1 {
                                                        return size
                                                      }

                                                      size = 0
                                                      if hasOptionalNestedMessage {
                                                        size += WireFormat.computeMessageSize(1, value:optionalNestedMessage)
                                                      }
                                                      size += unknownFields.serializedSize()
                                                      memoizedSerializedSize = size
                                                      return size
                                                    }
                                                    class func parseFromData(data:[Byte]) -> TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromData(data).build()
                                                    }
                                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                    }
                                                    class func parseFromInputStream(input:NSInputStream) -> TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromInputStream(input).build()
                                                    }
                                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                    }
                                                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromCodedInputStream(input).build()
                                                    }
                                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBits {
                                                      return TestNestedMessageHasBits.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                    }
                                                    class func builder() -> TestNestedMessageHasBitsBuilder {
                                                      return TestNestedMessageHasBitsBuilder()
                                                    }
                                                    class func builderWithPrototype(prototype:TestNestedMessageHasBits) -> TestNestedMessageHasBitsBuilder {
                                                      return TestNestedMessageHasBits.builder().mergeFrom(prototype)
                                                    }
                                                    func builder() -> TestNestedMessageHasBitsBuilder {
                                                      return TestNestedMessageHasBits.builder()
                                                    }
                                                    func toBuilder() -> TestNestedMessageHasBitsBuilder {
                                                      return TestNestedMessageHasBits.builderWithPrototype(self)
                                                    }
                                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                                      if hasOptionalNestedMessage {
                                                        output += "\(indent) optionalNestedMessage {\n"
                                                        optionalNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                        output += "\(indent) }\n"
                                                      }
                                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                                    }
                                                    override var hashValue:Int {
                                                     get {
                                                          var hashCode:Int = 7
                                                          if hasOptionalNestedMessage {
                                                            hashCode = (hashCode &* 31) &+ optionalNestedMessage.hashValue
                                                          }
                                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                          return hashCode
                                                        }
                                                      }
                                                    }

                                                    func == (lhs: TestNestedMessageHasBitsNestedMessage, rhs: TestNestedMessageHasBitsNestedMessage) -> Bool {
                                                          if (lhs === rhs) {
                                                            return true
                                                          }
                                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                          fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedInt32 == rhs.nestedmessageRepeatedInt32)
                                                           fieldCheck = fieldCheck && (lhs.nestedmessageRepeatedForeignmessage == rhs.nestedmessageRepeatedForeignmessage)
                                                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                    }
                                                    class TestNestedMessageHasBitsNestedMessage : GeneratedMessage {
                                                      private(set) var nestedmessageRepeatedInt32:[Int32] = [Int32]()
                                                      private(set) var nestedmessageRepeatedForeignmessage:[ForeignMessage]  = [ForeignMessage]()
                                                      override init() {
                                                           super.init()
                                                      }
                                                      override func isInitialized() -> Bool {
                                                        return true
                                                      }
                                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                        if !nestedmessageRepeatedInt32.isEmpty {
                                                          for value in nestedmessageRepeatedInt32 {
                                                            output.writeInt32(1, value:value)
                                                          }
                                                        }
                                                        for element in nestedmessageRepeatedForeignmessage {
                                                            output.writeMessage(2, value:element)
                                                        }
                                                        unknownFields.writeToCodedOutputStream(output)
                                                      }
                                                      override func serializedSize() -> Int32 {
                                                        var size:Int32 = memoizedSerializedSize
                                                        if size != -1 {
                                                          return size
                                                        }

                                                        size = 0
                                                          var dataSizeNestedmessageRepeatedInt32:Int32 = 0
                                                          for element in nestedmessageRepeatedInt32 {
                                                              dataSizeNestedmessageRepeatedInt32 += WireFormat.computeInt32SizeNoTag(element)
                                                          }
                                                          size += dataSizeNestedmessageRepeatedInt32
                                                          size += 1 * Int32(nestedmessageRepeatedInt32.count)
                                                        for element in nestedmessageRepeatedForeignmessage {
                                                            size += WireFormat.computeMessageSize(2, value:element)
                                                        }
                                                        size += unknownFields.serializedSize()
                                                        memoizedSerializedSize = size
                                                        return size
                                                      }
                                                      class func parseFromData(data:[Byte]) -> TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromData(data).build()
                                                      }
                                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                      }
                                                      class func parseFromInputStream(input:NSInputStream) -> TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromInputStream(input).build()
                                                      }
                                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                      }
                                                      class func parseFromCodedInputStream(input:CodedInputStream) -> TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromCodedInputStream(input).build()
                                                      }
                                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBitsNestedMessage {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                      }
                                                      class func builder() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        return TestNestedMessageHasBitsNestedMessageBuilder()
                                                      }
                                                      class func builderWithPrototype(prototype:TestNestedMessageHasBitsNestedMessage) -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        return TestNestedMessageHasBitsNestedMessage.builder().mergeFrom(prototype)
                                                      }
                                                      func builder() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        return TestNestedMessageHasBitsNestedMessage.builder()
                                                      }
                                                      func toBuilder() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        return TestNestedMessageHasBitsNestedMessage.builderWithPrototype(self)
                                                      }
                                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                                        var nestedmessageRepeatedInt32ElementIndex:Int = 0
                                                        for element in nestedmessageRepeatedInt32  {
                                                            output += "\(indent) nestedmessageRepeatedInt32[\(nestedmessageRepeatedInt32ElementIndex)]: \(element)\n"
                                                            nestedmessageRepeatedInt32ElementIndex++
                                                        }
                                                        var nestedmessageRepeatedForeignmessageElementIndex:Int = 0
                                                        for element in nestedmessageRepeatedForeignmessage {
                                                            output += "\(indent) nestedmessageRepeatedForeignmessage[\(nestedmessageRepeatedForeignmessageElementIndex)] {\n"
                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                            output += "\(indent)}\n"
                                                            nestedmessageRepeatedForeignmessageElementIndex++
                                                        }
                                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                                      }
                                                      override var hashValue:Int {
                                                       get {
                                                            var hashCode:Int = 7
                                                            for element in nestedmessageRepeatedInt32 {
                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                            }
                                                            for element in nestedmessageRepeatedForeignmessage {
                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                            }
                                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                            return hashCode
                                                          }
                                                        }
                                                      }

                                                      class TestNestedMessageHasBitsNestedMessageBuilder : GeneratedMessageBuilder {
                                                      private var result:TestNestedMessageHasBitsNestedMessage

                                                      override init () {
                                                         result = TestNestedMessageHasBitsNestedMessage()
                                                      }
                                                      var nestedmessageRepeatedInt32:[Int32] {
                                                           get {
                                                               return result.nestedmessageRepeatedInt32
                                                           }
                                                           set (array) {
                                                               result.nestedmessageRepeatedInt32 = array
                                                           }
                                                      }
                                                      func clearNestedmessageRepeatedInt32() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                         result.nestedmessageRepeatedInt32.removeAll(keepCapacity: false)
                                                         return self
                                                      }
                                                      var nestedmessageRepeatedForeignmessage:[ForeignMessage] {
                                                           get {
                                                               return result.nestedmessageRepeatedForeignmessage
                                                           }
                                                           set (value) {
                                                               result.nestedmessageRepeatedForeignmessage = value
                                                           }
                                                      }
                                                      func clearNestedmessageRepeatedForeignmessage() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        result.nestedmessageRepeatedForeignmessage.removeAll(keepCapacity: false)
                                                        return self
                                                      }
                                                      override var internalGetResult:GeneratedMessage {
                                                           get {
                                                              return result
                                                           }
                                                      }
                                                      override func clear() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        result = TestNestedMessageHasBitsNestedMessage()
                                                        return self
                                                      }
                                                      override func clone() -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        return TestNestedMessageHasBitsNestedMessage.builderWithPrototype(result)
                                                      }
                                                      func build() -> TestNestedMessageHasBitsNestedMessage {
                                                           checkInitialized()
                                                           return buildPartial()
                                                      }
                                                      func buildPartial() -> TestNestedMessageHasBitsNestedMessage {
                                                        var returnMe:TestNestedMessageHasBitsNestedMessage = result
                                                        return returnMe
                                                      }
                                                      func mergeFrom(other:TestNestedMessageHasBitsNestedMessage) -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        if (other == TestNestedMessageHasBitsNestedMessage()) {
                                                          return self
                                                        }
                                                        if !other.nestedmessageRepeatedInt32.isEmpty {
                                                            result.nestedmessageRepeatedInt32 += other.nestedmessageRepeatedInt32
                                                        }
                                                        if !other.nestedmessageRepeatedForeignmessage.isEmpty  {
                                                           result.nestedmessageRepeatedForeignmessage += other.nestedmessageRepeatedForeignmessage
                                                        }
                                                          mergeUnknownFields(other.unknownFields)
                                                        return self
                                                      }
                                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestNestedMessageHasBitsNestedMessageBuilder {
                                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                      }
                                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBitsNestedMessageBuilder {
                                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                        while (true) {
                                                          var tag:Int32 = input.readTag()
                                                            if tag == 0 {
                                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                                 return self}
                                                            else if tag == 8 {
                                                              nestedmessageRepeatedInt32 += [input.readInt32()]
                                                            }
                                                            else if tag == 18 {
                                                              var subBuilder = ForeignMessage.builder()
                                                              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                              nestedmessageRepeatedForeignmessage += [subBuilder.buildPartial()]
                                                            }
                                                            else {
                                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                      unknownFields = unknownFieldsBuilder.build()
                                                                      return self
                                                                  }
                                                            }
                                                            }
                                                         }
                                                      }

                                                      class TestNestedMessageHasBitsBuilder : GeneratedMessageBuilder {
                                                      private var result:TestNestedMessageHasBits

                                                      override init () {
                                                         result = TestNestedMessageHasBits()
                                                      }
                                                      var hasOptionalNestedMessage:Bool {
                                                           get {
                                                               return result.hasOptionalNestedMessage
                                                           }
                                                      }
                                                      var optionalNestedMessage:TestNestedMessageHasBitsNestedMessage {
                                                           get {
                                                               return result.optionalNestedMessage     }
                                                           set (value) {
                                                               result.hasOptionalNestedMessage = true
                                                               result.optionalNestedMessage = value
                                                           }
                                                      }
                                                      func setOptionalNestedMessageBuilder(builderForValue:TestNestedMessageHasBitsNestedMessageBuilder) -> TestNestedMessageHasBitsBuilder {
                                                        optionalNestedMessage = builderForValue.build()
                                                        return self
                                                      }
                                                      func mergeOptionalNestedMessage(value:TestNestedMessageHasBitsNestedMessage) -> TestNestedMessageHasBitsBuilder {
                                                        if (result.hasOptionalNestedMessage && result.optionalNestedMessage != TestNestedMessageHasBitsNestedMessage()) {
                                                          result.optionalNestedMessage = TestNestedMessageHasBitsNestedMessage.builderWithPrototype(result.optionalNestedMessage).mergeFrom(value).buildPartial()
                                                        } else {
                                                          result.optionalNestedMessage = value
                                                        }
                                                        result.hasOptionalNestedMessage = true
                                                        return self
                                                      }
                                                      func clearOptionalNestedMessage() -> TestNestedMessageHasBitsBuilder {
                                                        result.hasOptionalNestedMessage = false
                                                        result.optionalNestedMessage = TestNestedMessageHasBitsNestedMessage()
                                                        return self
                                                      }
                                                      override var internalGetResult:GeneratedMessage {
                                                           get {
                                                              return result
                                                           }
                                                      }
                                                      override func clear() -> TestNestedMessageHasBitsBuilder {
                                                        result = TestNestedMessageHasBits()
                                                        return self
                                                      }
                                                      override func clone() -> TestNestedMessageHasBitsBuilder {
                                                        return TestNestedMessageHasBits.builderWithPrototype(result)
                                                      }
                                                      func build() -> TestNestedMessageHasBits {
                                                           checkInitialized()
                                                           return buildPartial()
                                                      }
                                                      func buildPartial() -> TestNestedMessageHasBits {
                                                        var returnMe:TestNestedMessageHasBits = result
                                                        return returnMe
                                                      }
                                                      func mergeFrom(other:TestNestedMessageHasBits) -> TestNestedMessageHasBitsBuilder {
                                                        if (other == TestNestedMessageHasBits()) {
                                                          return self
                                                        }
                                                        if (other.hasOptionalNestedMessage) {
                                                            mergeOptionalNestedMessage(other.optionalNestedMessage)
                                                        }
                                                          mergeUnknownFields(other.unknownFields)
                                                        return self
                                                      }
                                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestNestedMessageHasBitsBuilder {
                                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                      }
                                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedMessageHasBitsBuilder {
                                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                        while (true) {
                                                          var tag:Int32 = input.readTag()
                                                            if tag == 0 {
                                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                                 return self}
                                                            else if tag == 10 {
                                                              var subBuilder:TestNestedMessageHasBitsNestedMessageBuilder = TestNestedMessageHasBitsNestedMessage.builder()
                                                              if hasOptionalNestedMessage {
                                                                subBuilder.mergeFrom(optionalNestedMessage)
                                                              }
                                                              input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                              optionalNestedMessage = subBuilder.buildPartial()
                                                            }
                                                            else {
                                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                      unknownFields = unknownFieldsBuilder.build()
                                                                      return self
                                                                  }
                                                            }
                                                            }
                                                         }
                                                      }

                                                      func == (lhs: TestCamelCaseFieldNames, rhs: TestCamelCaseFieldNames) -> Bool {
                                                            if (lhs === rhs) {
                                                              return true
                                                            }
                                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                            fieldCheck = fieldCheck && (lhs.hasPrimitiveField == rhs.hasPrimitiveField) && (!lhs.hasPrimitiveField || lhs.primitiveField == rhs.primitiveField)
                                                             fieldCheck = fieldCheck && (lhs.hasStringField == rhs.hasStringField) && (!lhs.hasStringField || lhs.stringField == rhs.stringField)
                                                             fieldCheck = fieldCheck && (lhs.hasEnumField == rhs.hasEnumField) && (!lhs.hasEnumField || lhs.enumField == rhs.enumField)
                                                             fieldCheck = fieldCheck && (lhs.hasMessageField == rhs.hasMessageField) && (!lhs.hasMessageField || lhs.messageField == rhs.messageField)
                                                             fieldCheck = fieldCheck && (lhs.hasStringPieceField == rhs.hasStringPieceField) && (!lhs.hasStringPieceField || lhs.stringPieceField == rhs.stringPieceField)
                                                             fieldCheck = fieldCheck && (lhs.hasCordField == rhs.hasCordField) && (!lhs.hasCordField || lhs.cordField == rhs.cordField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedPrimitiveField == rhs.repeatedPrimitiveField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedStringField == rhs.repeatedStringField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedEnumField == rhs.repeatedEnumField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedMessageField == rhs.repeatedMessageField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedStringPieceField == rhs.repeatedStringPieceField)
                                                             fieldCheck = fieldCheck && (lhs.repeatedCordField == rhs.repeatedCordField)
                                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                      }
                                                      class TestCamelCaseFieldNames : GeneratedMessage {
                                                        private(set) var hasPrimitiveField:Bool = false
                                                        private(set) var primitiveField:Int32 = 0

                                                        private(set) var hasStringField:Bool = false
                                                        private(set) var stringField:String = ""

                                                        private(set) var enumField:ForeignEnum = .ForeignEnumForeignFoo
                                                        private(set) var hasEnumField:Bool = false
                                                        private(set) var hasMessageField:Bool = false
                                                        private(set) var messageField:ForeignMessage = ForeignMessage()
                                                        private(set) var hasStringPieceField:Bool = false
                                                        private(set) var stringPieceField:String = ""

                                                        private(set) var hasCordField:Bool = false
                                                        private(set) var cordField:String = ""

                                                        private(set) var repeatedPrimitiveField:[Int32] = [Int32]()
                                                        private(set) var repeatedStringField:[String] = [String]()
                                                        private var repeatedEnumFieldMemoizedSerializedSize:Int32 = 0
                                                        private(set) var repeatedEnumField:[ForeignEnum] = [ForeignEnum]()
                                                        private(set) var repeatedMessageField:[ForeignMessage]  = [ForeignMessage]()
                                                        private(set) var repeatedStringPieceField:[String] = [String]()
                                                        private(set) var repeatedCordField:[String] = [String]()
                                                        override init() {
                                                             super.init()
                                                        }
                                                        override func isInitialized() -> Bool {
                                                          return true
                                                        }
                                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                          if hasPrimitiveField {
                                                            output.writeInt32(1, value:primitiveField)
                                                          }
                                                          if hasStringField {
                                                            output.writeString(2, value:stringField)
                                                          }
                                                          if hasEnumField {
                                                            output.writeEnum(3, value:enumField.toRaw())
                                                          }
                                                          if hasMessageField {
                                                            output.writeMessage(4, value:messageField)
                                                          }
                                                          if hasStringPieceField {
                                                            output.writeString(5, value:stringPieceField)
                                                          }
                                                          if hasCordField {
                                                            output.writeString(6, value:cordField)
                                                          }
                                                          if !repeatedPrimitiveField.isEmpty {
                                                            for value in repeatedPrimitiveField {
                                                              output.writeInt32(7, value:value)
                                                            }
                                                          }
                                                          if !repeatedStringField.isEmpty {
                                                            for value in repeatedStringField {
                                                              output.writeString(8, value:value)
                                                            }
                                                          }
                                                          for value in repeatedEnumField {
                                                              output.writeEnum(9, value:value.toRaw())
                                                          }
                                                          for element in repeatedMessageField {
                                                              output.writeMessage(10, value:element)
                                                          }
                                                          if !repeatedStringPieceField.isEmpty {
                                                            for value in repeatedStringPieceField {
                                                              output.writeString(11, value:value)
                                                            }
                                                          }
                                                          if !repeatedCordField.isEmpty {
                                                            for value in repeatedCordField {
                                                              output.writeString(12, value:value)
                                                            }
                                                          }
                                                          unknownFields.writeToCodedOutputStream(output)
                                                        }
                                                        override func serializedSize() -> Int32 {
                                                          var size:Int32 = memoizedSerializedSize
                                                          if size != -1 {
                                                            return size
                                                          }

                                                          size = 0
                                                          if hasPrimitiveField {
                                                            size += WireFormat.computeInt32Size(1, value:primitiveField)
                                                          }
                                                          if hasStringField {
                                                            size += WireFormat.computeStringSize(2, value:stringField)
                                                          }
                                                          if (hasEnumField) {
                                                            size += WireFormat.computeEnumSize(3, value:enumField.toRaw())
                                                          }
                                                          if hasMessageField {
                                                            size += WireFormat.computeMessageSize(4, value:messageField)
                                                          }
                                                          if hasStringPieceField {
                                                            size += WireFormat.computeStringSize(5, value:stringPieceField)
                                                          }
                                                          if hasCordField {
                                                            size += WireFormat.computeStringSize(6, value:cordField)
                                                          }
                                                            var dataSizeRepeatedPrimitiveField:Int32 = 0
                                                            for element in repeatedPrimitiveField {
                                                                dataSizeRepeatedPrimitiveField += WireFormat.computeInt32SizeNoTag(element)
                                                            }
                                                            size += dataSizeRepeatedPrimitiveField
                                                            size += 1 * Int32(repeatedPrimitiveField.count)
                                                            var dataSizeRepeatedStringField:Int32 = 0
                                                            for element in repeatedStringField {
                                                                dataSizeRepeatedStringField += WireFormat.computeStringSizeNoTag(element)
                                                            }
                                                            size += dataSizeRepeatedStringField
                                                            size += 1 * Int32(repeatedStringField.count)
                                                            var dataSizerepeatedEnumField:Int32 = 0
                                                            for value in repeatedEnumField {
                                                                dataSizerepeatedEnumField += WireFormat.computeEnumSizeNoTag(value.toRaw())
                                                            }
                                                            size += dataSizerepeatedEnumField
                                                            size += (1 * Int32(repeatedEnumField.count))
                                                          for element in repeatedMessageField {
                                                              size += WireFormat.computeMessageSize(10, value:element)
                                                          }
                                                            var dataSizeRepeatedStringPieceField:Int32 = 0
                                                            for element in repeatedStringPieceField {
                                                                dataSizeRepeatedStringPieceField += WireFormat.computeStringSizeNoTag(element)
                                                            }
                                                            size += dataSizeRepeatedStringPieceField
                                                            size += 1 * Int32(repeatedStringPieceField.count)
                                                            var dataSizeRepeatedCordField:Int32 = 0
                                                            for element in repeatedCordField {
                                                                dataSizeRepeatedCordField += WireFormat.computeStringSizeNoTag(element)
                                                            }
                                                            size += dataSizeRepeatedCordField
                                                            size += 1 * Int32(repeatedCordField.count)
                                                          size += unknownFields.serializedSize()
                                                          memoizedSerializedSize = size
                                                          return size
                                                        }
                                                        class func parseFromData(data:[Byte]) -> TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromData(data).build()
                                                        }
                                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                        }
                                                        class func parseFromInputStream(input:NSInputStream) -> TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromInputStream(input).build()
                                                        }
                                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                        }
                                                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromCodedInputStream(input).build()
                                                        }
                                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestCamelCaseFieldNames {
                                                          return TestCamelCaseFieldNames.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                        }
                                                        class func builder() -> TestCamelCaseFieldNamesBuilder {
                                                          return TestCamelCaseFieldNamesBuilder()
                                                        }
                                                        class func builderWithPrototype(prototype:TestCamelCaseFieldNames) -> TestCamelCaseFieldNamesBuilder {
                                                          return TestCamelCaseFieldNames.builder().mergeFrom(prototype)
                                                        }
                                                        func builder() -> TestCamelCaseFieldNamesBuilder {
                                                          return TestCamelCaseFieldNames.builder()
                                                        }
                                                        func toBuilder() -> TestCamelCaseFieldNamesBuilder {
                                                          return TestCamelCaseFieldNames.builderWithPrototype(self)
                                                        }
                                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                                          if hasPrimitiveField {
                                                            output += "\(indent) primitiveField: \(primitiveField) \n"
                                                          }
                                                          if hasStringField {
                                                            output += "\(indent) stringField: \(stringField) \n"
                                                          }
                                                          if (hasEnumField) {
                                                            output += "\(indent) enumField: \(enumField.toRaw())\n"
                                                          }
                                                          if hasMessageField {
                                                            output += "\(indent) messageField {\n"
                                                            messageField.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                            output += "\(indent) }\n"
                                                          }
                                                          if hasStringPieceField {
                                                            output += "\(indent) stringPieceField: \(stringPieceField) \n"
                                                          }
                                                          if hasCordField {
                                                            output += "\(indent) cordField: \(cordField) \n"
                                                          }
                                                          var repeatedPrimitiveFieldElementIndex:Int = 0
                                                          for element in repeatedPrimitiveField  {
                                                              output += "\(indent) repeatedPrimitiveField[\(repeatedPrimitiveFieldElementIndex)]: \(element)\n"
                                                              repeatedPrimitiveFieldElementIndex++
                                                          }
                                                          var repeatedStringFieldElementIndex:Int = 0
                                                          for element in repeatedStringField  {
                                                              output += "\(indent) repeatedStringField[\(repeatedStringFieldElementIndex)]: \(element)\n"
                                                              repeatedStringFieldElementIndex++
                                                          }
                                                          var repeatedEnumFieldElementIndex:Int = 0
                                                          for element in repeatedEnumField {
                                                              output += "\(indent) repeatedEnumField[\(repeatedEnumFieldElementIndex)]: \(element.toRaw())"
                                                              repeatedEnumFieldElementIndex++
                                                          }
                                                          var repeatedMessageFieldElementIndex:Int = 0
                                                          for element in repeatedMessageField {
                                                              output += "\(indent) repeatedMessageField[\(repeatedMessageFieldElementIndex)] {\n"
                                                              element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                              output += "\(indent)}\n"
                                                              repeatedMessageFieldElementIndex++
                                                          }
                                                          var repeatedStringPieceFieldElementIndex:Int = 0
                                                          for element in repeatedStringPieceField  {
                                                              output += "\(indent) repeatedStringPieceField[\(repeatedStringPieceFieldElementIndex)]: \(element)\n"
                                                              repeatedStringPieceFieldElementIndex++
                                                          }
                                                          var repeatedCordFieldElementIndex:Int = 0
                                                          for element in repeatedCordField  {
                                                              output += "\(indent) repeatedCordField[\(repeatedCordFieldElementIndex)]: \(element)\n"
                                                              repeatedCordFieldElementIndex++
                                                          }
                                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                                        }
                                                        override var hashValue:Int {
                                                         get {
                                                              var hashCode:Int = 7
                                                              if hasPrimitiveField {
                                                                 hashCode = (hashCode &* 31) &+ primitiveField.hashValue
                                                              }
                                                              if hasStringField {
                                                                 hashCode = (hashCode &* 31) &+ stringField.hashValue
                                                              }
                                                              if hasEnumField {
                                                                 hashCode = (hashCode &* 31) &+ Int(enumField.toRaw())
                                                              }
                                                              if hasMessageField {
                                                                hashCode = (hashCode &* 31) &+ messageField.hashValue
                                                              }
                                                              if hasStringPieceField {
                                                                 hashCode = (hashCode &* 31) &+ stringPieceField.hashValue
                                                              }
                                                              if hasCordField {
                                                                 hashCode = (hashCode &* 31) &+ cordField.hashValue
                                                              }
                                                              for element in repeatedPrimitiveField {
                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                              }
                                                              for element in repeatedStringField {
                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                              }
                                                              for element in repeatedEnumField {
                                                                  hashCode = (hashCode &* 31) &+ Int(element.toRaw())
                                                              }
                                                              for element in repeatedMessageField {
                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                              }
                                                              for element in repeatedStringPieceField {
                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                              }
                                                              for element in repeatedCordField {
                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                              }
                                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                              return hashCode
                                                            }
                                                          }
                                                        }

                                                        class TestCamelCaseFieldNamesBuilder : GeneratedMessageBuilder {
                                                        private var result:TestCamelCaseFieldNames

                                                        override init () {
                                                           result = TestCamelCaseFieldNames()
                                                        }
                                                        var hasPrimitiveField:Bool {
                                                             get {
                                                                  return result.hasPrimitiveField
                                                             }
                                                        }
                                                        var primitiveField:Int32 {
                                                             get {
                                                                  return result.primitiveField
                                                             }
                                                             set (value) {
                                                                 result.hasPrimitiveField = true
                                                                 result.primitiveField = value
                                                             }
                                                        }
                                                        func clearPrimitiveField() -> TestCamelCaseFieldNamesBuilder{
                                                             result.hasPrimitiveField = false
                                                             result.primitiveField = 0
                                                             return self
                                                        }
                                                        var hasStringField:Bool {
                                                             get {
                                                                  return result.hasStringField
                                                             }
                                                        }
                                                        var stringField:String {
                                                             get {
                                                                  return result.stringField
                                                             }
                                                             set (value) {
                                                                 result.hasStringField = true
                                                                 result.stringField = value
                                                             }
                                                        }
                                                        func clearStringField() -> TestCamelCaseFieldNamesBuilder{
                                                             result.hasStringField = false
                                                             result.stringField = ""
                                                             return self
                                                        }
                                                          var hasEnumField:Bool{
                                                              get {
                                                                  return result.hasEnumField
                                                              }
                                                          }
                                                          var enumField:ForeignEnum {
                                                              get {
                                                                  return result.enumField
                                                              }
                                                              set (value) {
                                                                  result.hasEnumField = true
                                                                  result.enumField = value
                                                              }
                                                          }
                                                          func clearEnumField() -> TestCamelCaseFieldNamesBuilder {
                                                             result.hasEnumField = false
                                                             result.enumField = .ForeignEnumForeignFoo
                                                             return self
                                                          }
                                                        var hasMessageField:Bool {
                                                             get {
                                                                 return result.hasMessageField
                                                             }
                                                        }
                                                        var messageField:ForeignMessage {
                                                             get {
                                                                 return result.messageField     }
                                                             set (value) {
                                                                 result.hasMessageField = true
                                                                 result.messageField = value
                                                             }
                                                        }
                                                        func setMessageFieldBuilder(builderForValue:ForeignMessageBuilder) -> TestCamelCaseFieldNamesBuilder {
                                                          messageField = builderForValue.build()
                                                          return self
                                                        }
                                                        func mergeMessageField(value:ForeignMessage) -> TestCamelCaseFieldNamesBuilder {
                                                          if (result.hasMessageField && result.messageField != ForeignMessage()) {
                                                            result.messageField = ForeignMessage.builderWithPrototype(result.messageField).mergeFrom(value).buildPartial()
                                                          } else {
                                                            result.messageField = value
                                                          }
                                                          result.hasMessageField = true
                                                          return self
                                                        }
                                                        func clearMessageField() -> TestCamelCaseFieldNamesBuilder {
                                                          result.hasMessageField = false
                                                          result.messageField = ForeignMessage()
                                                          return self
                                                        }
                                                        var hasStringPieceField:Bool {
                                                             get {
                                                                  return result.hasStringPieceField
                                                             }
                                                        }
                                                        var stringPieceField:String {
                                                             get {
                                                                  return result.stringPieceField
                                                             }
                                                             set (value) {
                                                                 result.hasStringPieceField = true
                                                                 result.stringPieceField = value
                                                             }
                                                        }
                                                        func clearStringPieceField() -> TestCamelCaseFieldNamesBuilder{
                                                             result.hasStringPieceField = false
                                                             result.stringPieceField = ""
                                                             return self
                                                        }
                                                        var hasCordField:Bool {
                                                             get {
                                                                  return result.hasCordField
                                                             }
                                                        }
                                                        var cordField:String {
                                                             get {
                                                                  return result.cordField
                                                             }
                                                             set (value) {
                                                                 result.hasCordField = true
                                                                 result.cordField = value
                                                             }
                                                        }
                                                        func clearCordField() -> TestCamelCaseFieldNamesBuilder{
                                                             result.hasCordField = false
                                                             result.cordField = ""
                                                             return self
                                                        }
                                                        var repeatedPrimitiveField:[Int32] {
                                                             get {
                                                                 return result.repeatedPrimitiveField
                                                             }
                                                             set (array) {
                                                                 result.repeatedPrimitiveField = array
                                                             }
                                                        }
                                                        func clearRepeatedPrimitiveField() -> TestCamelCaseFieldNamesBuilder {
                                                           result.repeatedPrimitiveField.removeAll(keepCapacity: false)
                                                           return self
                                                        }
                                                        var repeatedStringField:[String] {
                                                             get {
                                                                 return result.repeatedStringField
                                                             }
                                                             set (array) {
                                                                 result.repeatedStringField = array
                                                             }
                                                        }
                                                        func clearRepeatedStringField() -> TestCamelCaseFieldNamesBuilder {
                                                           result.repeatedStringField.removeAll(keepCapacity: false)
                                                           return self
                                                        }
                                                        var repeatedEnumField:[ForeignEnum] {
                                                            get {
                                                                return result.repeatedEnumField
                                                            }
                                                            set (value) {
                                                                result.repeatedEnumField += value
                                                            }
                                                        }
                                                        func clearRepeatedEnumField() -> TestCamelCaseFieldNamesBuilder {
                                                          result.repeatedEnumField.removeAll(keepCapacity: false)
                                                          return self
                                                        }
                                                        var repeatedMessageField:[ForeignMessage] {
                                                             get {
                                                                 return result.repeatedMessageField
                                                             }
                                                             set (value) {
                                                                 result.repeatedMessageField = value
                                                             }
                                                        }
                                                        func clearRepeatedMessageField() -> TestCamelCaseFieldNamesBuilder {
                                                          result.repeatedMessageField.removeAll(keepCapacity: false)
                                                          return self
                                                        }
                                                        var repeatedStringPieceField:[String] {
                                                             get {
                                                                 return result.repeatedStringPieceField
                                                             }
                                                             set (array) {
                                                                 result.repeatedStringPieceField = array
                                                             }
                                                        }
                                                        func clearRepeatedStringPieceField() -> TestCamelCaseFieldNamesBuilder {
                                                           result.repeatedStringPieceField.removeAll(keepCapacity: false)
                                                           return self
                                                        }
                                                        var repeatedCordField:[String] {
                                                             get {
                                                                 return result.repeatedCordField
                                                             }
                                                             set (array) {
                                                                 result.repeatedCordField = array
                                                             }
                                                        }
                                                        func clearRepeatedCordField() -> TestCamelCaseFieldNamesBuilder {
                                                           result.repeatedCordField.removeAll(keepCapacity: false)
                                                           return self
                                                        }
                                                        override var internalGetResult:GeneratedMessage {
                                                             get {
                                                                return result
                                                             }
                                                        }
                                                        override func clear() -> TestCamelCaseFieldNamesBuilder {
                                                          result = TestCamelCaseFieldNames()
                                                          return self
                                                        }
                                                        override func clone() -> TestCamelCaseFieldNamesBuilder {
                                                          return TestCamelCaseFieldNames.builderWithPrototype(result)
                                                        }
                                                        func build() -> TestCamelCaseFieldNames {
                                                             checkInitialized()
                                                             return buildPartial()
                                                        }
                                                        func buildPartial() -> TestCamelCaseFieldNames {
                                                          var returnMe:TestCamelCaseFieldNames = result
                                                          return returnMe
                                                        }
                                                        func mergeFrom(other:TestCamelCaseFieldNames) -> TestCamelCaseFieldNamesBuilder {
                                                          if (other == TestCamelCaseFieldNames()) {
                                                            return self
                                                          }
                                                          if other.hasPrimitiveField {
                                                               primitiveField = other.primitiveField
                                                          }
                                                          if other.hasStringField {
                                                               stringField = other.stringField
                                                          }
                                                          if other.hasEnumField {
                                                               enumField = other.enumField
                                                          }
                                                          if (other.hasMessageField) {
                                                              mergeMessageField(other.messageField)
                                                          }
                                                          if other.hasStringPieceField {
                                                               stringPieceField = other.stringPieceField
                                                          }
                                                          if other.hasCordField {
                                                               cordField = other.cordField
                                                          }
                                                          if !other.repeatedPrimitiveField.isEmpty {
                                                              result.repeatedPrimitiveField += other.repeatedPrimitiveField
                                                          }
                                                          if !other.repeatedStringField.isEmpty {
                                                              result.repeatedStringField += other.repeatedStringField
                                                          }
                                                          if !other.repeatedEnumField.isEmpty {
                                                             result.repeatedEnumField += other.repeatedEnumField
                                                          }
                                                          if !other.repeatedMessageField.isEmpty  {
                                                             result.repeatedMessageField += other.repeatedMessageField
                                                          }
                                                          if !other.repeatedStringPieceField.isEmpty {
                                                              result.repeatedStringPieceField += other.repeatedStringPieceField
                                                          }
                                                          if !other.repeatedCordField.isEmpty {
                                                              result.repeatedCordField += other.repeatedCordField
                                                          }
                                                            mergeUnknownFields(other.unknownFields)
                                                          return self
                                                        }
                                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestCamelCaseFieldNamesBuilder {
                                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                        }
                                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestCamelCaseFieldNamesBuilder {
                                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                          while (true) {
                                                            var tag:Int32 = input.readTag()
                                                              if tag == 0 {
                                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                                   return self}
                                                              else if tag == 8 {
                                                                primitiveField = input.readInt32()
                                                              }
                                                              else if tag == 18 {
                                                                stringField = input.readString()
                                                              }
                                                              else if tag == 24 {
                                                                var value = input.readEnum()
                                                                var enums:ForeignEnum = ForeignEnum.fromRaw(value)!
                                                                if (ForeignEnum.ForeignEnumIsValidValue(enums)) {
                                                                     enumField = enums
                                                                } else {
                                                                     unknownFieldsBuilder.mergeVarintField(3, value:Int64(value))
                                                                }
                                                              }
                                                              else if tag == 34 {
                                                                var subBuilder:ForeignMessageBuilder = ForeignMessage.builder()
                                                                if hasMessageField {
                                                                  subBuilder.mergeFrom(messageField)
                                                                }
                                                                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                messageField = subBuilder.buildPartial()
                                                              }
                                                              else if tag == 42 {
                                                                stringPieceField = input.readString()
                                                              }
                                                              else if tag == 50 {
                                                                cordField = input.readString()
                                                              }
                                                              else if tag == 56 {
                                                                repeatedPrimitiveField += [input.readInt32()]
                                                              }
                                                              else if tag == 66 {
                                                                repeatedStringField += [input.readString()]
                                                              }
                                                              else if tag == 72 {
                                                                var value:ForeignEnum = ForeignEnum.fromRaw(input.readEnum())!
                                                                if ForeignEnum.ForeignEnumIsValidValue(value) {
                                                                     result.repeatedEnumField += [value]
                                                                } else {
                                                                     unknownFieldsBuilder.mergeVarintField(9, value:Int64(value.toRaw()))
                                                                }
                                                              }
                                                              else if tag == 82 {
                                                                var subBuilder = ForeignMessage.builder()
                                                                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                repeatedMessageField += [subBuilder.buildPartial()]
                                                              }
                                                              else if tag == 90 {
                                                                repeatedStringPieceField += [input.readString()]
                                                              }
                                                              else if tag == 98 {
                                                                repeatedCordField += [input.readString()]
                                                              }
                                                              else {
                                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                        unknownFields = unknownFieldsBuilder.build()
                                                                        return self
                                                                    }
                                                              }
                                                              }
                                                           }
                                                        }

                                                        func == (lhs: TestFieldOrderings, rhs: TestFieldOrderings) -> Bool {
                                                              if (lhs === rhs) {
                                                                return true
                                                              }
                                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                              fieldCheck = fieldCheck && (lhs.hasMyInt == rhs.hasMyInt) && (!lhs.hasMyInt || lhs.myInt == rhs.myInt)
                                                               fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(2), endExclusive:Int32(11))
                                                               fieldCheck = fieldCheck && (lhs.hasMyString == rhs.hasMyString) && (!lhs.hasMyString || lhs.myString == rhs.myString)
                                                               fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(12), endExclusive:Int32(101))
                                                               fieldCheck = fieldCheck && (lhs.hasMyFloat == rhs.hasMyFloat) && (!lhs.hasMyFloat || lhs.myFloat == rhs.myFloat)
                                                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                        }
                                                        class TestFieldOrderings : ExtendableMessage {
                                                          private(set) var hasMyString:Bool = false
                                                          private(set) var myString:String = ""

                                                          private(set) var hasMyInt:Bool = false
                                                          private(set) var myInt:Int64 = 0

                                                          private(set) var hasMyFloat:Bool = false
                                                          private(set) var myFloat:Float = 0

                                                          override init() {
                                                               super.init()
                                                          }
                                                          override func isInitialized() -> Bool {
                                                            if !extensionsAreInitialized() {
                                                              return false
                                                            }
                                                            return true
                                                          }
                                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                            if hasMyInt {
                                                              output.writeInt64(1, value:myInt)
                                                            }
                                                            writeExtensionsToCodedOutputStream(output, startInclusive:Int32(2), endExclusive:Int32(11))
                                                            if hasMyString {
                                                              output.writeString(11, value:myString)
                                                            }
                                                            writeExtensionsToCodedOutputStream(output, startInclusive:Int32(12), endExclusive:Int32(101))
                                                            if hasMyFloat {
                                                              output.writeFloat(101, value:myFloat)
                                                            }
                                                            unknownFields.writeToCodedOutputStream(output)
                                                          }
                                                          override func serializedSize() -> Int32 {
                                                            var size:Int32 = memoizedSerializedSize
                                                            if size != -1 {
                                                              return size
                                                            }

                                                            size = 0
                                                            if hasMyInt {
                                                              size += WireFormat.computeInt64Size(1, value:myInt)
                                                            }
                                                            if hasMyString {
                                                              size += WireFormat.computeStringSize(11, value:myString)
                                                            }
                                                            if hasMyFloat {
                                                              size += WireFormat.computeFloatSize(101, value:myFloat)
                                                            }
                                                            size += extensionsSerializedSize()
                                                            size += unknownFields.serializedSize()
                                                            memoizedSerializedSize = size
                                                            return size
                                                          }
                                                          class func parseFromData(data:[Byte]) -> TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromData(data).build()
                                                          }
                                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                          }
                                                          class func parseFromInputStream(input:NSInputStream) -> TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromInputStream(input).build()
                                                          }
                                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                          }
                                                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromCodedInputStream(input).build()
                                                          }
                                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestFieldOrderings {
                                                            return TestFieldOrderings.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                          }
                                                          class func builder() -> TestFieldOrderingsBuilder {
                                                            return TestFieldOrderingsBuilder()
                                                          }
                                                          class func builderWithPrototype(prototype:TestFieldOrderings) -> TestFieldOrderingsBuilder {
                                                            return TestFieldOrderings.builder().mergeFrom(prototype)
                                                          }
                                                          func builder() -> TestFieldOrderingsBuilder {
                                                            return TestFieldOrderings.builder()
                                                          }
                                                          func toBuilder() -> TestFieldOrderingsBuilder {
                                                            return TestFieldOrderings.builderWithPrototype(self)
                                                          }
                                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                                            if hasMyInt {
                                                              output += "\(indent) myInt: \(myInt) \n"
                                                            }
                                                            writeExtensionDescription(&output, startInclusive:Int32(2), endExclusive:Int32(11), indent:indent)
                                                            if hasMyString {
                                                              output += "\(indent) myString: \(myString) \n"
                                                            }
                                                            writeExtensionDescription(&output, startInclusive:Int32(12), endExclusive:Int32(101), indent:indent)
                                                            if hasMyFloat {
                                                              output += "\(indent) myFloat: \(myFloat) \n"
                                                            }
                                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                                          }
                                                          override var hashValue:Int {
                                                           get {
                                                                var hashCode:Int = 7
                                                                if hasMyInt {
                                                                   hashCode = (hashCode &* 31) &+ myInt.hashValue
                                                                }
                                                                hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(2), endExclusive:Int32(11)))
                                                                if hasMyString {
                                                                   hashCode = (hashCode &* 31) &+ myString.hashValue
                                                                }
                                                                hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(12), endExclusive:Int32(101)))
                                                                if hasMyFloat {
                                                                   hashCode = (hashCode &* 31) &+ myFloat.hashValue
                                                                }
                                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                return hashCode
                                                              }
                                                            }
                                                          }

                                                          class TestFieldOrderingsBuilder : ExtendableMessageBuilder {
                                                          private var result:TestFieldOrderings

                                                          override init () {
                                                             result = TestFieldOrderings()
                                                          }
                                                          var hasMyString:Bool {
                                                               get {
                                                                    return result.hasMyString
                                                               }
                                                          }
                                                          var myString:String {
                                                               get {
                                                                    return result.myString
                                                               }
                                                               set (value) {
                                                                   result.hasMyString = true
                                                                   result.myString = value
                                                               }
                                                          }
                                                          func clearMyString() -> TestFieldOrderingsBuilder{
                                                               result.hasMyString = false
                                                               result.myString = ""
                                                               return self
                                                          }
                                                          var hasMyInt:Bool {
                                                               get {
                                                                    return result.hasMyInt
                                                               }
                                                          }
                                                          var myInt:Int64 {
                                                               get {
                                                                    return result.myInt
                                                               }
                                                               set (value) {
                                                                   result.hasMyInt = true
                                                                   result.myInt = value
                                                               }
                                                          }
                                                          func clearMyInt() -> TestFieldOrderingsBuilder{
                                                               result.hasMyInt = false
                                                               result.myInt = 0
                                                               return self
                                                          }
                                                          var hasMyFloat:Bool {
                                                               get {
                                                                    return result.hasMyFloat
                                                               }
                                                          }
                                                          var myFloat:Float {
                                                               get {
                                                                    return result.myFloat
                                                               }
                                                               set (value) {
                                                                   result.hasMyFloat = true
                                                                   result.myFloat = value
                                                               }
                                                          }
                                                          func clearMyFloat() -> TestFieldOrderingsBuilder{
                                                               result.hasMyFloat = false
                                                               result.myFloat = 0
                                                               return self
                                                          }
                                                          override var internalGetResult:ExtendableMessage {
                                                               get {
                                                                   return result
                                                               }
                                                          }
                                                          override func clear() -> TestFieldOrderingsBuilder {
                                                            result = TestFieldOrderings()
                                                            return self
                                                          }
                                                          override func clone() -> TestFieldOrderingsBuilder {
                                                            return TestFieldOrderings.builderWithPrototype(result)
                                                          }
                                                          func build() -> TestFieldOrderings {
                                                               checkInitialized()
                                                               return buildPartial()
                                                          }
                                                          func buildPartial() -> TestFieldOrderings {
                                                            var returnMe:TestFieldOrderings = result
                                                            return returnMe
                                                          }
                                                          func mergeFrom(other:TestFieldOrderings) -> TestFieldOrderingsBuilder {
                                                            if (other == TestFieldOrderings()) {
                                                              return self
                                                            }
                                                            if other.hasMyString {
                                                                 myString = other.myString
                                                            }
                                                            if other.hasMyInt {
                                                                 myInt = other.myInt
                                                            }
                                                            if other.hasMyFloat {
                                                                 myFloat = other.myFloat
                                                            }
                                                            mergeExtensionFields(other)
                                                              mergeUnknownFields(other.unknownFields)
                                                            return self
                                                          }
                                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestFieldOrderingsBuilder {
                                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                          }
                                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestFieldOrderingsBuilder {
                                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                            while (true) {
                                                              var tag:Int32 = input.readTag()
                                                                if tag == 0 {
                                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                                     return self}
                                                                else if tag == 8 {
                                                                  myInt = input.readInt64()
                                                                }
                                                                else if tag == 90 {
                                                                  myString = input.readString()
                                                                }
                                                                else if tag == 813 {
                                                                  myFloat = input.readFloat()
                                                                }
                                                                else {
                                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                          unknownFields = unknownFieldsBuilder.build()
                                                                          return self
                                                                      }
                                                                }
                                                                }
                                                             }
                                                          }

                                                          func == (lhs: TestExtremeDefaultValues, rhs: TestExtremeDefaultValues) -> Bool {
                                                                if (lhs === rhs) {
                                                                  return true
                                                                }
                                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                fieldCheck = fieldCheck && (lhs.hasEscapedBytes == rhs.hasEscapedBytes) && (!lhs.hasEscapedBytes || lhs.escapedBytes == rhs.escapedBytes)
                                                                 fieldCheck = fieldCheck && (lhs.hasLargeUint32 == rhs.hasLargeUint32) && (!lhs.hasLargeUint32 || lhs.largeUint32 == rhs.largeUint32)
                                                                 fieldCheck = fieldCheck && (lhs.hasLargeUint64 == rhs.hasLargeUint64) && (!lhs.hasLargeUint64 || lhs.largeUint64 == rhs.largeUint64)
                                                                 fieldCheck = fieldCheck && (lhs.hasSmallInt32 == rhs.hasSmallInt32) && (!lhs.hasSmallInt32 || lhs.smallInt32 == rhs.smallInt32)
                                                                 fieldCheck = fieldCheck && (lhs.hasSmallInt64 == rhs.hasSmallInt64) && (!lhs.hasSmallInt64 || lhs.smallInt64 == rhs.smallInt64)
                                                                 fieldCheck = fieldCheck && (lhs.hasUtf8String == rhs.hasUtf8String) && (!lhs.hasUtf8String || lhs.utf8String == rhs.utf8String)
                                                                 fieldCheck = fieldCheck && (lhs.hasZeroFloat == rhs.hasZeroFloat) && (!lhs.hasZeroFloat || lhs.zeroFloat == rhs.zeroFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasOneFloat == rhs.hasOneFloat) && (!lhs.hasOneFloat || lhs.oneFloat == rhs.oneFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasSmallFloat == rhs.hasSmallFloat) && (!lhs.hasSmallFloat || lhs.smallFloat == rhs.smallFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasNegativeOneFloat == rhs.hasNegativeOneFloat) && (!lhs.hasNegativeOneFloat || lhs.negativeOneFloat == rhs.negativeOneFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasNegativeFloat == rhs.hasNegativeFloat) && (!lhs.hasNegativeFloat || lhs.negativeFloat == rhs.negativeFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasLargeFloat == rhs.hasLargeFloat) && (!lhs.hasLargeFloat || lhs.largeFloat == rhs.largeFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasSmallNegativeFloat == rhs.hasSmallNegativeFloat) && (!lhs.hasSmallNegativeFloat || lhs.smallNegativeFloat == rhs.smallNegativeFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasInfDouble == rhs.hasInfDouble) && (!lhs.hasInfDouble || lhs.infDouble == rhs.infDouble)
                                                                 fieldCheck = fieldCheck && (lhs.hasNegInfDouble == rhs.hasNegInfDouble) && (!lhs.hasNegInfDouble || lhs.negInfDouble == rhs.negInfDouble)
                                                                 fieldCheck = fieldCheck && (lhs.hasNanDouble == rhs.hasNanDouble) && (!lhs.hasNanDouble || lhs.nanDouble == rhs.nanDouble)
                                                                 fieldCheck = fieldCheck && (lhs.hasInfFloat == rhs.hasInfFloat) && (!lhs.hasInfFloat || lhs.infFloat == rhs.infFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasNegInfFloat == rhs.hasNegInfFloat) && (!lhs.hasNegInfFloat || lhs.negInfFloat == rhs.negInfFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasNanFloat == rhs.hasNanFloat) && (!lhs.hasNanFloat || lhs.nanFloat == rhs.nanFloat)
                                                                 fieldCheck = fieldCheck && (lhs.hasCppTrigraph == rhs.hasCppTrigraph) && (!lhs.hasCppTrigraph || lhs.cppTrigraph == rhs.cppTrigraph)
                                                                 fieldCheck = fieldCheck && (lhs.hasReallySmallInt32 == rhs.hasReallySmallInt32) && (!lhs.hasReallySmallInt32 || lhs.reallySmallInt32 == rhs.reallySmallInt32)
                                                                 fieldCheck = fieldCheck && (lhs.hasReallySmallInt64 == rhs.hasReallySmallInt64) && (!lhs.hasReallySmallInt64 || lhs.reallySmallInt64 == rhs.reallySmallInt64)
                                                                 fieldCheck = fieldCheck && (lhs.hasStringWithZero == rhs.hasStringWithZero) && (!lhs.hasStringWithZero || lhs.stringWithZero == rhs.stringWithZero)
                                                                 fieldCheck = fieldCheck && (lhs.hasBytesWithZero == rhs.hasBytesWithZero) && (!lhs.hasBytesWithZero || lhs.bytesWithZero == rhs.bytesWithZero)
                                                                 fieldCheck = fieldCheck && (lhs.hasStringPieceWithZero == rhs.hasStringPieceWithZero) && (!lhs.hasStringPieceWithZero || lhs.stringPieceWithZero == rhs.stringPieceWithZero)
                                                                 fieldCheck = fieldCheck && (lhs.hasCordWithZero == rhs.hasCordWithZero) && (!lhs.hasCordWithZero || lhs.cordWithZero == rhs.cordWithZero)
                                                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                          }
                                                          class TestExtremeDefaultValues : GeneratedMessage {
                                                            private(set) var hasEscapedBytes:Bool = false
                                                            private(set) var escapedBytes:[Byte] = ([Byte]() + "\000\001\007\010\014\n\r\t\013\\\'\"\376".utf8)

                                                            private(set) var hasLargeUint32:Bool = false
                                                            private(set) var largeUint32:UInt32 = -1

                                                            private(set) var hasLargeUint64:Bool = false
                                                            private(set) var largeUint64:UInt64 = -1

                                                            private(set) var hasSmallInt32:Bool = false
                                                            private(set) var smallInt32:Int32 = -2147483647

                                                            private(set) var hasSmallInt64:Bool = false
                                                            private(set) var smallInt64:Int64 = -9223372036854775807

                                                            private(set) var hasReallySmallInt32:Bool = false
                                                            private(set) var reallySmallInt32:Int32 = -2147483648

                                                            private(set) var hasReallySmallInt64:Bool = false
                                                            private(set) var reallySmallInt64:Int64 = -9223372036854775808

                                                            private(set) var hasUtf8String:Bool = false
                                                            private(set) var utf8String:String = \341\210\264

                                                            private(set) var hasZeroFloat:Bool = false
                                                            private(set) var zeroFloat:Float = 0

                                                            private(set) var hasOneFloat:Bool = false
                                                            private(set) var oneFloat:Float = 1

                                                            private(set) var hasSmallFloat:Bool = false
                                                            private(set) var smallFloat:Float = 1.5

                                                            private(set) var hasNegativeOneFloat:Bool = false
                                                            private(set) var negativeOneFloat:Float = -1

                                                            private(set) var hasNegativeFloat:Bool = false
                                                            private(set) var negativeFloat:Float = -1.5

                                                            private(set) var hasLargeFloat:Bool = false
                                                            private(set) var largeFloat:Float = 2e+08

                                                            private(set) var hasSmallNegativeFloat:Bool = false
                                                            private(set) var smallNegativeFloat:Float = -8e-28

                                                            private(set) var hasInfDouble:Bool = false
                                                            private(set) var infDouble:Double = HUGE_VAL

                                                            private(set) var hasNegInfDouble:Bool = false
                                                            private(set) var negInfDouble:Double = -HUGE_VAL

                                                            private(set) var hasNanDouble:Bool = false
                                                            private(set) var nanDouble:Double = NAN

                                                            private(set) var hasInfFloat:Bool = false
                                                            private(set) var infFloat:Float = HUGE_VALF

                                                            private(set) var hasNegInfFloat:Bool = false
                                                            private(set) var negInfFloat:Float = -HUGE_VALF

                                                            private(set) var hasNanFloat:Bool = false
                                                            private(set) var nanFloat:Float = NAN

                                                            private(set) var hasCppTrigraph:Bool = false
                                                            private(set) var cppTrigraph:String = "\? \? \?\? \?\? \?\?\? \?\?/ \?\?-"

                                                            private(set) var hasStringWithZero:Bool = false
                                                            private(set) var stringWithZero:String = "hel\000lo"

                                                            private(set) var hasBytesWithZero:Bool = false
                                                            private(set) var bytesWithZero:[Byte] = ([Byte]() + "wor\000ld".utf8)

                                                            private(set) var hasStringPieceWithZero:Bool = false
                                                            private(set) var stringPieceWithZero:String = "ab\000c"

                                                            private(set) var hasCordWithZero:Bool = false
                                                            private(set) var cordWithZero:String = "12\0003"

                                                            override init() {
                                                                 super.init()
                                                            }
                                                            override func isInitialized() -> Bool {
                                                              return true
                                                            }
                                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                              if hasEscapedBytes {
                                                                output.writeData(1, value:escapedBytes)
                                                              }
                                                              if hasLargeUint32 {
                                                                output.writeUInt32(2, value:largeUint32)
                                                              }
                                                              if hasLargeUint64 {
                                                                output.writeUInt64(3, value:largeUint64)
                                                              }
                                                              if hasSmallInt32 {
                                                                output.writeInt32(4, value:smallInt32)
                                                              }
                                                              if hasSmallInt64 {
                                                                output.writeInt64(5, value:smallInt64)
                                                              }
                                                              if hasUtf8String {
                                                                output.writeString(6, value:utf8String)
                                                              }
                                                              if hasZeroFloat {
                                                                output.writeFloat(7, value:zeroFloat)
                                                              }
                                                              if hasOneFloat {
                                                                output.writeFloat(8, value:oneFloat)
                                                              }
                                                              if hasSmallFloat {
                                                                output.writeFloat(9, value:smallFloat)
                                                              }
                                                              if hasNegativeOneFloat {
                                                                output.writeFloat(10, value:negativeOneFloat)
                                                              }
                                                              if hasNegativeFloat {
                                                                output.writeFloat(11, value:negativeFloat)
                                                              }
                                                              if hasLargeFloat {
                                                                output.writeFloat(12, value:largeFloat)
                                                              }
                                                              if hasSmallNegativeFloat {
                                                                output.writeFloat(13, value:smallNegativeFloat)
                                                              }
                                                              if hasInfDouble {
                                                                output.writeDouble(14, value:infDouble)
                                                              }
                                                              if hasNegInfDouble {
                                                                output.writeDouble(15, value:negInfDouble)
                                                              }
                                                              if hasNanDouble {
                                                                output.writeDouble(16, value:nanDouble)
                                                              }
                                                              if hasInfFloat {
                                                                output.writeFloat(17, value:infFloat)
                                                              }
                                                              if hasNegInfFloat {
                                                                output.writeFloat(18, value:negInfFloat)
                                                              }
                                                              if hasNanFloat {
                                                                output.writeFloat(19, value:nanFloat)
                                                              }
                                                              if hasCppTrigraph {
                                                                output.writeString(20, value:cppTrigraph)
                                                              }
                                                              if hasReallySmallInt32 {
                                                                output.writeInt32(21, value:reallySmallInt32)
                                                              }
                                                              if hasReallySmallInt64 {
                                                                output.writeInt64(22, value:reallySmallInt64)
                                                              }
                                                              if hasStringWithZero {
                                                                output.writeString(23, value:stringWithZero)
                                                              }
                                                              if hasBytesWithZero {
                                                                output.writeData(24, value:bytesWithZero)
                                                              }
                                                              if hasStringPieceWithZero {
                                                                output.writeString(25, value:stringPieceWithZero)
                                                              }
                                                              if hasCordWithZero {
                                                                output.writeString(26, value:cordWithZero)
                                                              }
                                                              unknownFields.writeToCodedOutputStream(output)
                                                            }
                                                            override func serializedSize() -> Int32 {
                                                              var size:Int32 = memoizedSerializedSize
                                                              if size != -1 {
                                                                return size
                                                              }

                                                              size = 0
                                                              if hasEscapedBytes {
                                                                size += WireFormat.computeDataSize(1, value:escapedBytes)
                                                              }
                                                              if hasLargeUint32 {
                                                                size += WireFormat.computeUInt32Size(2, value:largeUint32)
                                                              }
                                                              if hasLargeUint64 {
                                                                size += WireFormat.computeUInt64Size(3, value:largeUint64)
                                                              }
                                                              if hasSmallInt32 {
                                                                size += WireFormat.computeInt32Size(4, value:smallInt32)
                                                              }
                                                              if hasSmallInt64 {
                                                                size += WireFormat.computeInt64Size(5, value:smallInt64)
                                                              }
                                                              if hasUtf8String {
                                                                size += WireFormat.computeStringSize(6, value:utf8String)
                                                              }
                                                              if hasZeroFloat {
                                                                size += WireFormat.computeFloatSize(7, value:zeroFloat)
                                                              }
                                                              if hasOneFloat {
                                                                size += WireFormat.computeFloatSize(8, value:oneFloat)
                                                              }
                                                              if hasSmallFloat {
                                                                size += WireFormat.computeFloatSize(9, value:smallFloat)
                                                              }
                                                              if hasNegativeOneFloat {
                                                                size += WireFormat.computeFloatSize(10, value:negativeOneFloat)
                                                              }
                                                              if hasNegativeFloat {
                                                                size += WireFormat.computeFloatSize(11, value:negativeFloat)
                                                              }
                                                              if hasLargeFloat {
                                                                size += WireFormat.computeFloatSize(12, value:largeFloat)
                                                              }
                                                              if hasSmallNegativeFloat {
                                                                size += WireFormat.computeFloatSize(13, value:smallNegativeFloat)
                                                              }
                                                              if hasInfDouble {
                                                                size += WireFormat.computeDoubleSize(14, value:infDouble)
                                                              }
                                                              if hasNegInfDouble {
                                                                size += WireFormat.computeDoubleSize(15, value:negInfDouble)
                                                              }
                                                              if hasNanDouble {
                                                                size += WireFormat.computeDoubleSize(16, value:nanDouble)
                                                              }
                                                              if hasInfFloat {
                                                                size += WireFormat.computeFloatSize(17, value:infFloat)
                                                              }
                                                              if hasNegInfFloat {
                                                                size += WireFormat.computeFloatSize(18, value:negInfFloat)
                                                              }
                                                              if hasNanFloat {
                                                                size += WireFormat.computeFloatSize(19, value:nanFloat)
                                                              }
                                                              if hasCppTrigraph {
                                                                size += WireFormat.computeStringSize(20, value:cppTrigraph)
                                                              }
                                                              if hasReallySmallInt32 {
                                                                size += WireFormat.computeInt32Size(21, value:reallySmallInt32)
                                                              }
                                                              if hasReallySmallInt64 {
                                                                size += WireFormat.computeInt64Size(22, value:reallySmallInt64)
                                                              }
                                                              if hasStringWithZero {
                                                                size += WireFormat.computeStringSize(23, value:stringWithZero)
                                                              }
                                                              if hasBytesWithZero {
                                                                size += WireFormat.computeDataSize(24, value:bytesWithZero)
                                                              }
                                                              if hasStringPieceWithZero {
                                                                size += WireFormat.computeStringSize(25, value:stringPieceWithZero)
                                                              }
                                                              if hasCordWithZero {
                                                                size += WireFormat.computeStringSize(26, value:cordWithZero)
                                                              }
                                                              size += unknownFields.serializedSize()
                                                              memoizedSerializedSize = size
                                                              return size
                                                            }
                                                            class func parseFromData(data:[Byte]) -> TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromData(data).build()
                                                            }
                                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                            }
                                                            class func parseFromInputStream(input:NSInputStream) -> TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromInputStream(input).build()
                                                            }
                                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                            }
                                                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromCodedInputStream(input).build()
                                                            }
                                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestExtremeDefaultValues {
                                                              return TestExtremeDefaultValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                            }
                                                            class func builder() -> TestExtremeDefaultValuesBuilder {
                                                              return TestExtremeDefaultValuesBuilder()
                                                            }
                                                            class func builderWithPrototype(prototype:TestExtremeDefaultValues) -> TestExtremeDefaultValuesBuilder {
                                                              return TestExtremeDefaultValues.builder().mergeFrom(prototype)
                                                            }
                                                            func builder() -> TestExtremeDefaultValuesBuilder {
                                                              return TestExtremeDefaultValues.builder()
                                                            }
                                                            func toBuilder() -> TestExtremeDefaultValuesBuilder {
                                                              return TestExtremeDefaultValues.builderWithPrototype(self)
                                                            }
                                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                                              if hasEscapedBytes {
                                                                output += "\(indent) escapedBytes: \(escapedBytes) \n"
                                                              }
                                                              if hasLargeUint32 {
                                                                output += "\(indent) largeUint32: \(largeUint32) \n"
                                                              }
                                                              if hasLargeUint64 {
                                                                output += "\(indent) largeUint64: \(largeUint64) \n"
                                                              }
                                                              if hasSmallInt32 {
                                                                output += "\(indent) smallInt32: \(smallInt32) \n"
                                                              }
                                                              if hasSmallInt64 {
                                                                output += "\(indent) smallInt64: \(smallInt64) \n"
                                                              }
                                                              if hasUtf8String {
                                                                output += "\(indent) utf8String: \(utf8String) \n"
                                                              }
                                                              if hasZeroFloat {
                                                                output += "\(indent) zeroFloat: \(zeroFloat) \n"
                                                              }
                                                              if hasOneFloat {
                                                                output += "\(indent) oneFloat: \(oneFloat) \n"
                                                              }
                                                              if hasSmallFloat {
                                                                output += "\(indent) smallFloat: \(smallFloat) \n"
                                                              }
                                                              if hasNegativeOneFloat {
                                                                output += "\(indent) negativeOneFloat: \(negativeOneFloat) \n"
                                                              }
                                                              if hasNegativeFloat {
                                                                output += "\(indent) negativeFloat: \(negativeFloat) \n"
                                                              }
                                                              if hasLargeFloat {
                                                                output += "\(indent) largeFloat: \(largeFloat) \n"
                                                              }
                                                              if hasSmallNegativeFloat {
                                                                output += "\(indent) smallNegativeFloat: \(smallNegativeFloat) \n"
                                                              }
                                                              if hasInfDouble {
                                                                output += "\(indent) infDouble: \(infDouble) \n"
                                                              }
                                                              if hasNegInfDouble {
                                                                output += "\(indent) negInfDouble: \(negInfDouble) \n"
                                                              }
                                                              if hasNanDouble {
                                                                output += "\(indent) nanDouble: \(nanDouble) \n"
                                                              }
                                                              if hasInfFloat {
                                                                output += "\(indent) infFloat: \(infFloat) \n"
                                                              }
                                                              if hasNegInfFloat {
                                                                output += "\(indent) negInfFloat: \(negInfFloat) \n"
                                                              }
                                                              if hasNanFloat {
                                                                output += "\(indent) nanFloat: \(nanFloat) \n"
                                                              }
                                                              if hasCppTrigraph {
                                                                output += "\(indent) cppTrigraph: \(cppTrigraph) \n"
                                                              }
                                                              if hasReallySmallInt32 {
                                                                output += "\(indent) reallySmallInt32: \(reallySmallInt32) \n"
                                                              }
                                                              if hasReallySmallInt64 {
                                                                output += "\(indent) reallySmallInt64: \(reallySmallInt64) \n"
                                                              }
                                                              if hasStringWithZero {
                                                                output += "\(indent) stringWithZero: \(stringWithZero) \n"
                                                              }
                                                              if hasBytesWithZero {
                                                                output += "\(indent) bytesWithZero: \(bytesWithZero) \n"
                                                              }
                                                              if hasStringPieceWithZero {
                                                                output += "\(indent) stringPieceWithZero: \(stringPieceWithZero) \n"
                                                              }
                                                              if hasCordWithZero {
                                                                output += "\(indent) cordWithZero: \(cordWithZero) \n"
                                                              }
                                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                                            }
                                                            override var hashValue:Int {
                                                             get {
                                                                  var hashCode:Int = 7
                                                                  if hasEscapedBytes {
                                                                     hashCode = (hashCode &* 31) &+ escapedBytes.hashValue
                                                                  }
                                                                  if hasLargeUint32 {
                                                                     hashCode = (hashCode &* 31) &+ largeUint32.hashValue
                                                                  }
                                                                  if hasLargeUint64 {
                                                                     hashCode = (hashCode &* 31) &+ largeUint64.hashValue
                                                                  }
                                                                  if hasSmallInt32 {
                                                                     hashCode = (hashCode &* 31) &+ smallInt32.hashValue
                                                                  }
                                                                  if hasSmallInt64 {
                                                                     hashCode = (hashCode &* 31) &+ smallInt64.hashValue
                                                                  }
                                                                  if hasUtf8String {
                                                                     hashCode = (hashCode &* 31) &+ utf8String.hashValue
                                                                  }
                                                                  if hasZeroFloat {
                                                                     hashCode = (hashCode &* 31) &+ zeroFloat.hashValue
                                                                  }
                                                                  if hasOneFloat {
                                                                     hashCode = (hashCode &* 31) &+ oneFloat.hashValue
                                                                  }
                                                                  if hasSmallFloat {
                                                                     hashCode = (hashCode &* 31) &+ smallFloat.hashValue
                                                                  }
                                                                  if hasNegativeOneFloat {
                                                                     hashCode = (hashCode &* 31) &+ negativeOneFloat.hashValue
                                                                  }
                                                                  if hasNegativeFloat {
                                                                     hashCode = (hashCode &* 31) &+ negativeFloat.hashValue
                                                                  }
                                                                  if hasLargeFloat {
                                                                     hashCode = (hashCode &* 31) &+ largeFloat.hashValue
                                                                  }
                                                                  if hasSmallNegativeFloat {
                                                                     hashCode = (hashCode &* 31) &+ smallNegativeFloat.hashValue
                                                                  }
                                                                  if hasInfDouble {
                                                                     hashCode = (hashCode &* 31) &+ infDouble.hashValue
                                                                  }
                                                                  if hasNegInfDouble {
                                                                     hashCode = (hashCode &* 31) &+ negInfDouble.hashValue
                                                                  }
                                                                  if hasNanDouble {
                                                                     hashCode = (hashCode &* 31) &+ nanDouble.hashValue
                                                                  }
                                                                  if hasInfFloat {
                                                                     hashCode = (hashCode &* 31) &+ infFloat.hashValue
                                                                  }
                                                                  if hasNegInfFloat {
                                                                     hashCode = (hashCode &* 31) &+ negInfFloat.hashValue
                                                                  }
                                                                  if hasNanFloat {
                                                                     hashCode = (hashCode &* 31) &+ nanFloat.hashValue
                                                                  }
                                                                  if hasCppTrigraph {
                                                                     hashCode = (hashCode &* 31) &+ cppTrigraph.hashValue
                                                                  }
                                                                  if hasReallySmallInt32 {
                                                                     hashCode = (hashCode &* 31) &+ reallySmallInt32.hashValue
                                                                  }
                                                                  if hasReallySmallInt64 {
                                                                     hashCode = (hashCode &* 31) &+ reallySmallInt64.hashValue
                                                                  }
                                                                  if hasStringWithZero {
                                                                     hashCode = (hashCode &* 31) &+ stringWithZero.hashValue
                                                                  }
                                                                  if hasBytesWithZero {
                                                                     hashCode = (hashCode &* 31) &+ bytesWithZero.hashValue
                                                                  }
                                                                  if hasStringPieceWithZero {
                                                                     hashCode = (hashCode &* 31) &+ stringPieceWithZero.hashValue
                                                                  }
                                                                  if hasCordWithZero {
                                                                     hashCode = (hashCode &* 31) &+ cordWithZero.hashValue
                                                                  }
                                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                  return hashCode
                                                                }
                                                              }
                                                            }

                                                            class TestExtremeDefaultValuesBuilder : GeneratedMessageBuilder {
                                                            private var result:TestExtremeDefaultValues

                                                            override init () {
                                                               result = TestExtremeDefaultValues()
                                                            }
                                                            var hasEscapedBytes:Bool {
                                                                 get {
                                                                      return result.hasEscapedBytes
                                                                 }
                                                            }
                                                            var escapedBytes:[Byte] {
                                                                 get {
                                                                      return result.escapedBytes
                                                                 }
                                                                 set (value) {
                                                                     result.hasEscapedBytes = true
                                                                     result.escapedBytes = value
                                                                 }
                                                            }
                                                            func clearEscapedBytes() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasEscapedBytes = false
                                                                 result.escapedBytes = ([Byte]() + "\000\001\007\010\014\n\r\t\013\\\'\"\376".utf8)
                                                                 return self
                                                            }
                                                            var hasLargeUint32:Bool {
                                                                 get {
                                                                      return result.hasLargeUint32
                                                                 }
                                                            }
                                                            var largeUint32:UInt32 {
                                                                 get {
                                                                      return result.largeUint32
                                                                 }
                                                                 set (value) {
                                                                     result.hasLargeUint32 = true
                                                                     result.largeUint32 = value
                                                                 }
                                                            }
                                                            func clearLargeUint32() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasLargeUint32 = false
                                                                 result.largeUint32 = -1
                                                                 return self
                                                            }
                                                            var hasLargeUint64:Bool {
                                                                 get {
                                                                      return result.hasLargeUint64
                                                                 }
                                                            }
                                                            var largeUint64:UInt64 {
                                                                 get {
                                                                      return result.largeUint64
                                                                 }
                                                                 set (value) {
                                                                     result.hasLargeUint64 = true
                                                                     result.largeUint64 = value
                                                                 }
                                                            }
                                                            func clearLargeUint64() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasLargeUint64 = false
                                                                 result.largeUint64 = -1
                                                                 return self
                                                            }
                                                            var hasSmallInt32:Bool {
                                                                 get {
                                                                      return result.hasSmallInt32
                                                                 }
                                                            }
                                                            var smallInt32:Int32 {
                                                                 get {
                                                                      return result.smallInt32
                                                                 }
                                                                 set (value) {
                                                                     result.hasSmallInt32 = true
                                                                     result.smallInt32 = value
                                                                 }
                                                            }
                                                            func clearSmallInt32() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasSmallInt32 = false
                                                                 result.smallInt32 = -2147483647
                                                                 return self
                                                            }
                                                            var hasSmallInt64:Bool {
                                                                 get {
                                                                      return result.hasSmallInt64
                                                                 }
                                                            }
                                                            var smallInt64:Int64 {
                                                                 get {
                                                                      return result.smallInt64
                                                                 }
                                                                 set (value) {
                                                                     result.hasSmallInt64 = true
                                                                     result.smallInt64 = value
                                                                 }
                                                            }
                                                            func clearSmallInt64() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasSmallInt64 = false
                                                                 result.smallInt64 = -9223372036854775807
                                                                 return self
                                                            }
                                                            var hasReallySmallInt32:Bool {
                                                                 get {
                                                                      return result.hasReallySmallInt32
                                                                 }
                                                            }
                                                            var reallySmallInt32:Int32 {
                                                                 get {
                                                                      return result.reallySmallInt32
                                                                 }
                                                                 set (value) {
                                                                     result.hasReallySmallInt32 = true
                                                                     result.reallySmallInt32 = value
                                                                 }
                                                            }
                                                            func clearReallySmallInt32() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasReallySmallInt32 = false
                                                                 result.reallySmallInt32 = -2147483648
                                                                 return self
                                                            }
                                                            var hasReallySmallInt64:Bool {
                                                                 get {
                                                                      return result.hasReallySmallInt64
                                                                 }
                                                            }
                                                            var reallySmallInt64:Int64 {
                                                                 get {
                                                                      return result.reallySmallInt64
                                                                 }
                                                                 set (value) {
                                                                     result.hasReallySmallInt64 = true
                                                                     result.reallySmallInt64 = value
                                                                 }
                                                            }
                                                            func clearReallySmallInt64() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasReallySmallInt64 = false
                                                                 result.reallySmallInt64 = -9223372036854775808
                                                                 return self
                                                            }
                                                            var hasUtf8String:Bool {
                                                                 get {
                                                                      return result.hasUtf8String
                                                                 }
                                                            }
                                                            var utf8String:String {
                                                                 get {
                                                                      return result.utf8String
                                                                 }
                                                                 set (value) {
                                                                     result.hasUtf8String = true
                                                                     result.utf8String = value
                                                                 }
                                                            }
                                                            func clearUtf8String() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasUtf8String = false
                                                                 result.utf8String = \341\210\264
                                                                 return self
                                                            }
                                                            var hasZeroFloat:Bool {
                                                                 get {
                                                                      return result.hasZeroFloat
                                                                 }
                                                            }
                                                            var zeroFloat:Float {
                                                                 get {
                                                                      return result.zeroFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasZeroFloat = true
                                                                     result.zeroFloat = value
                                                                 }
                                                            }
                                                            func clearZeroFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasZeroFloat = false
                                                                 result.zeroFloat = 0
                                                                 return self
                                                            }
                                                            var hasOneFloat:Bool {
                                                                 get {
                                                                      return result.hasOneFloat
                                                                 }
                                                            }
                                                            var oneFloat:Float {
                                                                 get {
                                                                      return result.oneFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasOneFloat = true
                                                                     result.oneFloat = value
                                                                 }
                                                            }
                                                            func clearOneFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasOneFloat = false
                                                                 result.oneFloat = 1
                                                                 return self
                                                            }
                                                            var hasSmallFloat:Bool {
                                                                 get {
                                                                      return result.hasSmallFloat
                                                                 }
                                                            }
                                                            var smallFloat:Float {
                                                                 get {
                                                                      return result.smallFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasSmallFloat = true
                                                                     result.smallFloat = value
                                                                 }
                                                            }
                                                            func clearSmallFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasSmallFloat = false
                                                                 result.smallFloat = 1.5
                                                                 return self
                                                            }
                                                            var hasNegativeOneFloat:Bool {
                                                                 get {
                                                                      return result.hasNegativeOneFloat
                                                                 }
                                                            }
                                                            var negativeOneFloat:Float {
                                                                 get {
                                                                      return result.negativeOneFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasNegativeOneFloat = true
                                                                     result.negativeOneFloat = value
                                                                 }
                                                            }
                                                            func clearNegativeOneFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNegativeOneFloat = false
                                                                 result.negativeOneFloat = -1
                                                                 return self
                                                            }
                                                            var hasNegativeFloat:Bool {
                                                                 get {
                                                                      return result.hasNegativeFloat
                                                                 }
                                                            }
                                                            var negativeFloat:Float {
                                                                 get {
                                                                      return result.negativeFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasNegativeFloat = true
                                                                     result.negativeFloat = value
                                                                 }
                                                            }
                                                            func clearNegativeFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNegativeFloat = false
                                                                 result.negativeFloat = -1.5
                                                                 return self
                                                            }
                                                            var hasLargeFloat:Bool {
                                                                 get {
                                                                      return result.hasLargeFloat
                                                                 }
                                                            }
                                                            var largeFloat:Float {
                                                                 get {
                                                                      return result.largeFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasLargeFloat = true
                                                                     result.largeFloat = value
                                                                 }
                                                            }
                                                            func clearLargeFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasLargeFloat = false
                                                                 result.largeFloat = 2e+08
                                                                 return self
                                                            }
                                                            var hasSmallNegativeFloat:Bool {
                                                                 get {
                                                                      return result.hasSmallNegativeFloat
                                                                 }
                                                            }
                                                            var smallNegativeFloat:Float {
                                                                 get {
                                                                      return result.smallNegativeFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasSmallNegativeFloat = true
                                                                     result.smallNegativeFloat = value
                                                                 }
                                                            }
                                                            func clearSmallNegativeFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasSmallNegativeFloat = false
                                                                 result.smallNegativeFloat = -8e-28
                                                                 return self
                                                            }
                                                            var hasInfDouble:Bool {
                                                                 get {
                                                                      return result.hasInfDouble
                                                                 }
                                                            }
                                                            var infDouble:Double {
                                                                 get {
                                                                      return result.infDouble
                                                                 }
                                                                 set (value) {
                                                                     result.hasInfDouble = true
                                                                     result.infDouble = value
                                                                 }
                                                            }
                                                            func clearInfDouble() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasInfDouble = false
                                                                 result.infDouble = HUGE_VAL
                                                                 return self
                                                            }
                                                            var hasNegInfDouble:Bool {
                                                                 get {
                                                                      return result.hasNegInfDouble
                                                                 }
                                                            }
                                                            var negInfDouble:Double {
                                                                 get {
                                                                      return result.negInfDouble
                                                                 }
                                                                 set (value) {
                                                                     result.hasNegInfDouble = true
                                                                     result.negInfDouble = value
                                                                 }
                                                            }
                                                            func clearNegInfDouble() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNegInfDouble = false
                                                                 result.negInfDouble = -HUGE_VAL
                                                                 return self
                                                            }
                                                            var hasNanDouble:Bool {
                                                                 get {
                                                                      return result.hasNanDouble
                                                                 }
                                                            }
                                                            var nanDouble:Double {
                                                                 get {
                                                                      return result.nanDouble
                                                                 }
                                                                 set (value) {
                                                                     result.hasNanDouble = true
                                                                     result.nanDouble = value
                                                                 }
                                                            }
                                                            func clearNanDouble() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNanDouble = false
                                                                 result.nanDouble = NAN
                                                                 return self
                                                            }
                                                            var hasInfFloat:Bool {
                                                                 get {
                                                                      return result.hasInfFloat
                                                                 }
                                                            }
                                                            var infFloat:Float {
                                                                 get {
                                                                      return result.infFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasInfFloat = true
                                                                     result.infFloat = value
                                                                 }
                                                            }
                                                            func clearInfFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasInfFloat = false
                                                                 result.infFloat = HUGE_VALF
                                                                 return self
                                                            }
                                                            var hasNegInfFloat:Bool {
                                                                 get {
                                                                      return result.hasNegInfFloat
                                                                 }
                                                            }
                                                            var negInfFloat:Float {
                                                                 get {
                                                                      return result.negInfFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasNegInfFloat = true
                                                                     result.negInfFloat = value
                                                                 }
                                                            }
                                                            func clearNegInfFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNegInfFloat = false
                                                                 result.negInfFloat = -HUGE_VALF
                                                                 return self
                                                            }
                                                            var hasNanFloat:Bool {
                                                                 get {
                                                                      return result.hasNanFloat
                                                                 }
                                                            }
                                                            var nanFloat:Float {
                                                                 get {
                                                                      return result.nanFloat
                                                                 }
                                                                 set (value) {
                                                                     result.hasNanFloat = true
                                                                     result.nanFloat = value
                                                                 }
                                                            }
                                                            func clearNanFloat() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasNanFloat = false
                                                                 result.nanFloat = NAN
                                                                 return self
                                                            }
                                                            var hasCppTrigraph:Bool {
                                                                 get {
                                                                      return result.hasCppTrigraph
                                                                 }
                                                            }
                                                            var cppTrigraph:String {
                                                                 get {
                                                                      return result.cppTrigraph
                                                                 }
                                                                 set (value) {
                                                                     result.hasCppTrigraph = true
                                                                     result.cppTrigraph = value
                                                                 }
                                                            }
                                                            func clearCppTrigraph() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasCppTrigraph = false
                                                                 result.cppTrigraph = "\? \? \?\? \?\? \?\?\? \?\?/ \?\?-"
                                                                 return self
                                                            }
                                                            var hasStringWithZero:Bool {
                                                                 get {
                                                                      return result.hasStringWithZero
                                                                 }
                                                            }
                                                            var stringWithZero:String {
                                                                 get {
                                                                      return result.stringWithZero
                                                                 }
                                                                 set (value) {
                                                                     result.hasStringWithZero = true
                                                                     result.stringWithZero = value
                                                                 }
                                                            }
                                                            func clearStringWithZero() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasStringWithZero = false
                                                                 result.stringWithZero = "hel\000lo"
                                                                 return self
                                                            }
                                                            var hasBytesWithZero:Bool {
                                                                 get {
                                                                      return result.hasBytesWithZero
                                                                 }
                                                            }
                                                            var bytesWithZero:[Byte] {
                                                                 get {
                                                                      return result.bytesWithZero
                                                                 }
                                                                 set (value) {
                                                                     result.hasBytesWithZero = true
                                                                     result.bytesWithZero = value
                                                                 }
                                                            }
                                                            func clearBytesWithZero() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasBytesWithZero = false
                                                                 result.bytesWithZero = ([Byte]() + "wor\000ld".utf8)
                                                                 return self
                                                            }
                                                            var hasStringPieceWithZero:Bool {
                                                                 get {
                                                                      return result.hasStringPieceWithZero
                                                                 }
                                                            }
                                                            var stringPieceWithZero:String {
                                                                 get {
                                                                      return result.stringPieceWithZero
                                                                 }
                                                                 set (value) {
                                                                     result.hasStringPieceWithZero = true
                                                                     result.stringPieceWithZero = value
                                                                 }
                                                            }
                                                            func clearStringPieceWithZero() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasStringPieceWithZero = false
                                                                 result.stringPieceWithZero = "ab\000c"
                                                                 return self
                                                            }
                                                            var hasCordWithZero:Bool {
                                                                 get {
                                                                      return result.hasCordWithZero
                                                                 }
                                                            }
                                                            var cordWithZero:String {
                                                                 get {
                                                                      return result.cordWithZero
                                                                 }
                                                                 set (value) {
                                                                     result.hasCordWithZero = true
                                                                     result.cordWithZero = value
                                                                 }
                                                            }
                                                            func clearCordWithZero() -> TestExtremeDefaultValuesBuilder{
                                                                 result.hasCordWithZero = false
                                                                 result.cordWithZero = "12\0003"
                                                                 return self
                                                            }
                                                            override var internalGetResult:GeneratedMessage {
                                                                 get {
                                                                    return result
                                                                 }
                                                            }
                                                            override func clear() -> TestExtremeDefaultValuesBuilder {
                                                              result = TestExtremeDefaultValues()
                                                              return self
                                                            }
                                                            override func clone() -> TestExtremeDefaultValuesBuilder {
                                                              return TestExtremeDefaultValues.builderWithPrototype(result)
                                                            }
                                                            func build() -> TestExtremeDefaultValues {
                                                                 checkInitialized()
                                                                 return buildPartial()
                                                            }
                                                            func buildPartial() -> TestExtremeDefaultValues {
                                                              var returnMe:TestExtremeDefaultValues = result
                                                              return returnMe
                                                            }
                                                            func mergeFrom(other:TestExtremeDefaultValues) -> TestExtremeDefaultValuesBuilder {
                                                              if (other == TestExtremeDefaultValues()) {
                                                                return self
                                                              }
                                                              if other.hasEscapedBytes {
                                                                   escapedBytes = other.escapedBytes
                                                              }
                                                              if other.hasLargeUint32 {
                                                                   largeUint32 = other.largeUint32
                                                              }
                                                              if other.hasLargeUint64 {
                                                                   largeUint64 = other.largeUint64
                                                              }
                                                              if other.hasSmallInt32 {
                                                                   smallInt32 = other.smallInt32
                                                              }
                                                              if other.hasSmallInt64 {
                                                                   smallInt64 = other.smallInt64
                                                              }
                                                              if other.hasReallySmallInt32 {
                                                                   reallySmallInt32 = other.reallySmallInt32
                                                              }
                                                              if other.hasReallySmallInt64 {
                                                                   reallySmallInt64 = other.reallySmallInt64
                                                              }
                                                              if other.hasUtf8String {
                                                                   utf8String = other.utf8String
                                                              }
                                                              if other.hasZeroFloat {
                                                                   zeroFloat = other.zeroFloat
                                                              }
                                                              if other.hasOneFloat {
                                                                   oneFloat = other.oneFloat
                                                              }
                                                              if other.hasSmallFloat {
                                                                   smallFloat = other.smallFloat
                                                              }
                                                              if other.hasNegativeOneFloat {
                                                                   negativeOneFloat = other.negativeOneFloat
                                                              }
                                                              if other.hasNegativeFloat {
                                                                   negativeFloat = other.negativeFloat
                                                              }
                                                              if other.hasLargeFloat {
                                                                   largeFloat = other.largeFloat
                                                              }
                                                              if other.hasSmallNegativeFloat {
                                                                   smallNegativeFloat = other.smallNegativeFloat
                                                              }
                                                              if other.hasInfDouble {
                                                                   infDouble = other.infDouble
                                                              }
                                                              if other.hasNegInfDouble {
                                                                   negInfDouble = other.negInfDouble
                                                              }
                                                              if other.hasNanDouble {
                                                                   nanDouble = other.nanDouble
                                                              }
                                                              if other.hasInfFloat {
                                                                   infFloat = other.infFloat
                                                              }
                                                              if other.hasNegInfFloat {
                                                                   negInfFloat = other.negInfFloat
                                                              }
                                                              if other.hasNanFloat {
                                                                   nanFloat = other.nanFloat
                                                              }
                                                              if other.hasCppTrigraph {
                                                                   cppTrigraph = other.cppTrigraph
                                                              }
                                                              if other.hasStringWithZero {
                                                                   stringWithZero = other.stringWithZero
                                                              }
                                                              if other.hasBytesWithZero {
                                                                   bytesWithZero = other.bytesWithZero
                                                              }
                                                              if other.hasStringPieceWithZero {
                                                                   stringPieceWithZero = other.stringPieceWithZero
                                                              }
                                                              if other.hasCordWithZero {
                                                                   cordWithZero = other.cordWithZero
                                                              }
                                                                mergeUnknownFields(other.unknownFields)
                                                              return self
                                                            }
                                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestExtremeDefaultValuesBuilder {
                                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                            }
                                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestExtremeDefaultValuesBuilder {
                                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                              while (true) {
                                                                var tag:Int32 = input.readTag()
                                                                  if tag == 0 {
                                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                                       return self}
                                                                  else if tag == 10 {
                                                                    escapedBytes = input.readData()
                                                                  }
                                                                  else if tag == 16 {
                                                                    largeUint32 = input.readUInt32()
                                                                  }
                                                                  else if tag == 24 {
                                                                    largeUint64 = input.readUInt64()
                                                                  }
                                                                  else if tag == 32 {
                                                                    smallInt32 = input.readInt32()
                                                                  }
                                                                  else if tag == 40 {
                                                                    smallInt64 = input.readInt64()
                                                                  }
                                                                  else if tag == 50 {
                                                                    utf8String = input.readString()
                                                                  }
                                                                  else if tag == 61 {
                                                                    zeroFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 69 {
                                                                    oneFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 77 {
                                                                    smallFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 85 {
                                                                    negativeOneFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 93 {
                                                                    negativeFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 101 {
                                                                    largeFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 109 {
                                                                    smallNegativeFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 113 {
                                                                    infDouble = input.readDouble()
                                                                  }
                                                                  else if tag == 121 {
                                                                    negInfDouble = input.readDouble()
                                                                  }
                                                                  else if tag == 129 {
                                                                    nanDouble = input.readDouble()
                                                                  }
                                                                  else if tag == 141 {
                                                                    infFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 149 {
                                                                    negInfFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 157 {
                                                                    nanFloat = input.readFloat()
                                                                  }
                                                                  else if tag == 162 {
                                                                    cppTrigraph = input.readString()
                                                                  }
                                                                  else if tag == 168 {
                                                                    reallySmallInt32 = input.readInt32()
                                                                  }
                                                                  else if tag == 176 {
                                                                    reallySmallInt64 = input.readInt64()
                                                                  }
                                                                  else if tag == 186 {
                                                                    stringWithZero = input.readString()
                                                                  }
                                                                  else if tag == 194 {
                                                                    bytesWithZero = input.readData()
                                                                  }
                                                                  else if tag == 202 {
                                                                    stringPieceWithZero = input.readString()
                                                                  }
                                                                  else if tag == 210 {
                                                                    cordWithZero = input.readString()
                                                                  }
                                                                  else {
                                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                            unknownFields = unknownFieldsBuilder.build()
                                                                            return self
                                                                        }
                                                                  }
                                                                  }
                                                               }
                                                            }

                                                            func == (lhs: SparseEnumMessage, rhs: SparseEnumMessage) -> Bool {
                                                                  if (lhs === rhs) {
                                                                    return true
                                                                  }
                                                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                  fieldCheck = fieldCheck && (lhs.hasSparseEnum == rhs.hasSparseEnum) && (!lhs.hasSparseEnum || lhs.sparseEnum == rhs.sparseEnum)
                                                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                            }
                                                            class SparseEnumMessage : GeneratedMessage {
                                                              private(set) var sparseEnum:TestSparseEnum = .TestSparseEnumSparseA
                                                              private(set) var hasSparseEnum:Bool = false
                                                              override init() {
                                                                   super.init()
                                                              }
                                                              override func isInitialized() -> Bool {
                                                                return true
                                                              }
                                                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                if hasSparseEnum {
                                                                  output.writeEnum(1, value:sparseEnum.toRaw())
                                                                }
                                                                unknownFields.writeToCodedOutputStream(output)
                                                              }
                                                              override func serializedSize() -> Int32 {
                                                                var size:Int32 = memoizedSerializedSize
                                                                if size != -1 {
                                                                  return size
                                                                }

                                                                size = 0
                                                                if (hasSparseEnum) {
                                                                  size += WireFormat.computeEnumSize(1, value:sparseEnum.toRaw())
                                                                }
                                                                size += unknownFields.serializedSize()
                                                                memoizedSerializedSize = size
                                                                return size
                                                              }
                                                              class func parseFromData(data:[Byte]) -> SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromData(data).build()
                                                              }
                                                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                              }
                                                              class func parseFromInputStream(input:NSInputStream) -> SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromInputStream(input).build()
                                                              }
                                                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                              }
                                                              class func parseFromCodedInputStream(input:CodedInputStream) -> SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromCodedInputStream(input).build()
                                                              }
                                                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SparseEnumMessage {
                                                                return SparseEnumMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                              }
                                                              class func builder() -> SparseEnumMessageBuilder {
                                                                return SparseEnumMessageBuilder()
                                                              }
                                                              class func builderWithPrototype(prototype:SparseEnumMessage) -> SparseEnumMessageBuilder {
                                                                return SparseEnumMessage.builder().mergeFrom(prototype)
                                                              }
                                                              func builder() -> SparseEnumMessageBuilder {
                                                                return SparseEnumMessage.builder()
                                                              }
                                                              func toBuilder() -> SparseEnumMessageBuilder {
                                                                return SparseEnumMessage.builderWithPrototype(self)
                                                              }
                                                              override func writeDescriptionTo(inout output:String, indent:String) {
                                                                if (hasSparseEnum) {
                                                                  output += "\(indent) sparseEnum: \(sparseEnum.toRaw())\n"
                                                                }
                                                                unknownFields.writeDescriptionTo(&output, indent:indent)
                                                              }
                                                              override var hashValue:Int {
                                                               get {
                                                                    var hashCode:Int = 7
                                                                    if hasSparseEnum {
                                                                       hashCode = (hashCode &* 31) &+ Int(sparseEnum.toRaw())
                                                                    }
                                                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                    return hashCode
                                                                  }
                                                                }
                                                              }

                                                              class SparseEnumMessageBuilder : GeneratedMessageBuilder {
                                                              private var result:SparseEnumMessage

                                                              override init () {
                                                                 result = SparseEnumMessage()
                                                              }
                                                                var hasSparseEnum:Bool{
                                                                    get {
                                                                        return result.hasSparseEnum
                                                                    }
                                                                }
                                                                var sparseEnum:TestSparseEnum {
                                                                    get {
                                                                        return result.sparseEnum
                                                                    }
                                                                    set (value) {
                                                                        result.hasSparseEnum = true
                                                                        result.sparseEnum = value
                                                                    }
                                                                }
                                                                func clearSparseEnum() -> SparseEnumMessageBuilder {
                                                                   result.hasSparseEnum = false
                                                                   result.sparseEnum = .TestSparseEnumSparseA
                                                                   return self
                                                                }
                                                              override var internalGetResult:GeneratedMessage {
                                                                   get {
                                                                      return result
                                                                   }
                                                              }
                                                              override func clear() -> SparseEnumMessageBuilder {
                                                                result = SparseEnumMessage()
                                                                return self
                                                              }
                                                              override func clone() -> SparseEnumMessageBuilder {
                                                                return SparseEnumMessage.builderWithPrototype(result)
                                                              }
                                                              func build() -> SparseEnumMessage {
                                                                   checkInitialized()
                                                                   return buildPartial()
                                                              }
                                                              func buildPartial() -> SparseEnumMessage {
                                                                var returnMe:SparseEnumMessage = result
                                                                return returnMe
                                                              }
                                                              func mergeFrom(other:SparseEnumMessage) -> SparseEnumMessageBuilder {
                                                                if (other == SparseEnumMessage()) {
                                                                  return self
                                                                }
                                                                if other.hasSparseEnum {
                                                                     sparseEnum = other.sparseEnum
                                                                }
                                                                  mergeUnknownFields(other.unknownFields)
                                                                return self
                                                              }
                                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->SparseEnumMessageBuilder {
                                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                              }
                                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SparseEnumMessageBuilder {
                                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                while (true) {
                                                                  var tag:Int32 = input.readTag()
                                                                    if tag == 0 {
                                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                                         return self}
                                                                    else if tag == 8 {
                                                                      var value = input.readEnum()
                                                                      var enums:TestSparseEnum = TestSparseEnum.fromRaw(value)!
                                                                      if (TestSparseEnum.TestSparseEnumIsValidValue(enums)) {
                                                                           sparseEnum = enums
                                                                      } else {
                                                                           unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
                                                                      }
                                                                    }
                                                                    else {
                                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                              unknownFields = unknownFieldsBuilder.build()
                                                                              return self
                                                                          }
                                                                    }
                                                                    }
                                                                 }
                                                              }

                                                              func == (lhs: OneString, rhs: OneString) -> Bool {
                                                                    if (lhs === rhs) {
                                                                      return true
                                                                    }
                                                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                    fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
                                                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                              }
                                                              class OneString : GeneratedMessage {
                                                                private(set) var hasData:Bool = false
                                                                private(set) var data:String = ""

                                                                override init() {
                                                                     super.init()
                                                                }
                                                                override func isInitialized() -> Bool {
                                                                  return true
                                                                }
                                                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                  if hasData {
                                                                    output.writeString(1, value:data)
                                                                  }
                                                                  unknownFields.writeToCodedOutputStream(output)
                                                                }
                                                                override func serializedSize() -> Int32 {
                                                                  var size:Int32 = memoizedSerializedSize
                                                                  if size != -1 {
                                                                    return size
                                                                  }

                                                                  size = 0
                                                                  if hasData {
                                                                    size += WireFormat.computeStringSize(1, value:data)
                                                                  }
                                                                  size += unknownFields.serializedSize()
                                                                  memoizedSerializedSize = size
                                                                  return size
                                                                }
                                                                class func parseFromData(data:[Byte]) -> OneString {
                                                                  return OneString.builder().mergeFromData(data).build()
                                                                }
                                                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OneString {
                                                                  return OneString.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                }
                                                                class func parseFromInputStream(input:NSInputStream) -> OneString {
                                                                  return OneString.builder().mergeFromInputStream(input).build()
                                                                }
                                                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OneString {
                                                                  return OneString.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                }
                                                                class func parseFromCodedInputStream(input:CodedInputStream) -> OneString {
                                                                  return OneString.builder().mergeFromCodedInputStream(input).build()
                                                                }
                                                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OneString {
                                                                  return OneString.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                }
                                                                class func builder() -> OneStringBuilder {
                                                                  return OneStringBuilder()
                                                                }
                                                                class func builderWithPrototype(prototype:OneString) -> OneStringBuilder {
                                                                  return OneString.builder().mergeFrom(prototype)
                                                                }
                                                                func builder() -> OneStringBuilder {
                                                                  return OneString.builder()
                                                                }
                                                                func toBuilder() -> OneStringBuilder {
                                                                  return OneString.builderWithPrototype(self)
                                                                }
                                                                override func writeDescriptionTo(inout output:String, indent:String) {
                                                                  if hasData {
                                                                    output += "\(indent) data: \(data) \n"
                                                                  }
                                                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                }
                                                                override var hashValue:Int {
                                                                 get {
                                                                      var hashCode:Int = 7
                                                                      if hasData {
                                                                         hashCode = (hashCode &* 31) &+ data.hashValue
                                                                      }
                                                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                      return hashCode
                                                                    }
                                                                  }
                                                                }

                                                                class OneStringBuilder : GeneratedMessageBuilder {
                                                                private var result:OneString

                                                                override init () {
                                                                   result = OneString()
                                                                }
                                                                var hasData:Bool {
                                                                     get {
                                                                          return result.hasData
                                                                     }
                                                                }
                                                                var data:String {
                                                                     get {
                                                                          return result.data
                                                                     }
                                                                     set (value) {
                                                                         result.hasData = true
                                                                         result.data = value
                                                                     }
                                                                }
                                                                func clearData() -> OneStringBuilder{
                                                                     result.hasData = false
                                                                     result.data = ""
                                                                     return self
                                                                }
                                                                override var internalGetResult:GeneratedMessage {
                                                                     get {
                                                                        return result
                                                                     }
                                                                }
                                                                override func clear() -> OneStringBuilder {
                                                                  result = OneString()
                                                                  return self
                                                                }
                                                                override func clone() -> OneStringBuilder {
                                                                  return OneString.builderWithPrototype(result)
                                                                }
                                                                func build() -> OneString {
                                                                     checkInitialized()
                                                                     return buildPartial()
                                                                }
                                                                func buildPartial() -> OneString {
                                                                  var returnMe:OneString = result
                                                                  return returnMe
                                                                }
                                                                func mergeFrom(other:OneString) -> OneStringBuilder {
                                                                  if (other == OneString()) {
                                                                    return self
                                                                  }
                                                                  if other.hasData {
                                                                       data = other.data
                                                                  }
                                                                    mergeUnknownFields(other.unknownFields)
                                                                  return self
                                                                }
                                                                override func mergeFromCodedInputStream(input:CodedInputStream) ->OneStringBuilder {
                                                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                }
                                                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OneStringBuilder {
                                                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                  while (true) {
                                                                    var tag:Int32 = input.readTag()
                                                                      if tag == 0 {
                                                                           self.unknownFields = unknownFieldsBuilder.build()
                                                                           return self}
                                                                      else if tag == 10 {
                                                                        data = input.readString()
                                                                      }
                                                                      else {
                                                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                unknownFields = unknownFieldsBuilder.build()
                                                                                return self
                                                                            }
                                                                      }
                                                                      }
                                                                   }
                                                                }

                                                                func == (lhs: MoreString, rhs: MoreString) -> Bool {
                                                                      if (lhs === rhs) {
                                                                        return true
                                                                      }
                                                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                      fieldCheck = fieldCheck && (lhs.data == rhs.data)
                                                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                }
                                                                class MoreString : GeneratedMessage {
                                                                  private(set) var data:[String] = [String]()
                                                                  override init() {
                                                                       super.init()
                                                                  }
                                                                  override func isInitialized() -> Bool {
                                                                    return true
                                                                  }
                                                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                    if !data.isEmpty {
                                                                      for value in data {
                                                                        output.writeString(1, value:value)
                                                                      }
                                                                    }
                                                                    unknownFields.writeToCodedOutputStream(output)
                                                                  }
                                                                  override func serializedSize() -> Int32 {
                                                                    var size:Int32 = memoizedSerializedSize
                                                                    if size != -1 {
                                                                      return size
                                                                    }

                                                                    size = 0
                                                                      var dataSizeData:Int32 = 0
                                                                      for element in data {
                                                                          dataSizeData += WireFormat.computeStringSizeNoTag(element)
                                                                      }
                                                                      size += dataSizeData
                                                                      size += 1 * Int32(data.count)
                                                                    size += unknownFields.serializedSize()
                                                                    memoizedSerializedSize = size
                                                                    return size
                                                                  }
                                                                  class func parseFromData(data:[Byte]) -> MoreString {
                                                                    return MoreString.builder().mergeFromData(data).build()
                                                                  }
                                                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MoreString {
                                                                    return MoreString.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                  }
                                                                  class func parseFromInputStream(input:NSInputStream) -> MoreString {
                                                                    return MoreString.builder().mergeFromInputStream(input).build()
                                                                  }
                                                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MoreString {
                                                                    return MoreString.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                  }
                                                                  class func parseFromCodedInputStream(input:CodedInputStream) -> MoreString {
                                                                    return MoreString.builder().mergeFromCodedInputStream(input).build()
                                                                  }
                                                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MoreString {
                                                                    return MoreString.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                  }
                                                                  class func builder() -> MoreStringBuilder {
                                                                    return MoreStringBuilder()
                                                                  }
                                                                  class func builderWithPrototype(prototype:MoreString) -> MoreStringBuilder {
                                                                    return MoreString.builder().mergeFrom(prototype)
                                                                  }
                                                                  func builder() -> MoreStringBuilder {
                                                                    return MoreString.builder()
                                                                  }
                                                                  func toBuilder() -> MoreStringBuilder {
                                                                    return MoreString.builderWithPrototype(self)
                                                                  }
                                                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                                                    var dataElementIndex:Int = 0
                                                                    for element in data  {
                                                                        output += "\(indent) data[\(dataElementIndex)]: \(element)\n"
                                                                        dataElementIndex++
                                                                    }
                                                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                  }
                                                                  override var hashValue:Int {
                                                                   get {
                                                                        var hashCode:Int = 7
                                                                        for element in data {
                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                        }
                                                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                        return hashCode
                                                                      }
                                                                    }
                                                                  }

                                                                  class MoreStringBuilder : GeneratedMessageBuilder {
                                                                  private var result:MoreString

                                                                  override init () {
                                                                     result = MoreString()
                                                                  }
                                                                  var data:[String] {
                                                                       get {
                                                                           return result.data
                                                                       }
                                                                       set (array) {
                                                                           result.data = array
                                                                       }
                                                                  }
                                                                  func clearData() -> MoreStringBuilder {
                                                                     result.data.removeAll(keepCapacity: false)
                                                                     return self
                                                                  }
                                                                  override var internalGetResult:GeneratedMessage {
                                                                       get {
                                                                          return result
                                                                       }
                                                                  }
                                                                  override func clear() -> MoreStringBuilder {
                                                                    result = MoreString()
                                                                    return self
                                                                  }
                                                                  override func clone() -> MoreStringBuilder {
                                                                    return MoreString.builderWithPrototype(result)
                                                                  }
                                                                  func build() -> MoreString {
                                                                       checkInitialized()
                                                                       return buildPartial()
                                                                  }
                                                                  func buildPartial() -> MoreString {
                                                                    var returnMe:MoreString = result
                                                                    return returnMe
                                                                  }
                                                                  func mergeFrom(other:MoreString) -> MoreStringBuilder {
                                                                    if (other == MoreString()) {
                                                                      return self
                                                                    }
                                                                    if !other.data.isEmpty {
                                                                        result.data += other.data
                                                                    }
                                                                      mergeUnknownFields(other.unknownFields)
                                                                    return self
                                                                  }
                                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->MoreStringBuilder {
                                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                  }
                                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MoreStringBuilder {
                                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                    while (true) {
                                                                      var tag:Int32 = input.readTag()
                                                                        if tag == 0 {
                                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                                             return self}
                                                                        else if tag == 10 {
                                                                          data += [input.readString()]
                                                                        }
                                                                        else {
                                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                                  return self
                                                                              }
                                                                        }
                                                                        }
                                                                     }
                                                                  }

                                                                  func == (lhs: OneBytes, rhs: OneBytes) -> Bool {
                                                                        if (lhs === rhs) {
                                                                          return true
                                                                        }
                                                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                        fieldCheck = fieldCheck && (lhs.hasData == rhs.hasData) && (!lhs.hasData || lhs.data == rhs.data)
                                                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                  }
                                                                  class OneBytes : GeneratedMessage {
                                                                    private(set) var hasData:Bool = false
                                                                    private(set) var data:[Byte] = [Byte]()

                                                                    override init() {
                                                                         super.init()
                                                                    }
                                                                    override func isInitialized() -> Bool {
                                                                      return true
                                                                    }
                                                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                      if hasData {
                                                                        output.writeData(1, value:data)
                                                                      }
                                                                      unknownFields.writeToCodedOutputStream(output)
                                                                    }
                                                                    override func serializedSize() -> Int32 {
                                                                      var size:Int32 = memoizedSerializedSize
                                                                      if size != -1 {
                                                                        return size
                                                                      }

                                                                      size = 0
                                                                      if hasData {
                                                                        size += WireFormat.computeDataSize(1, value:data)
                                                                      }
                                                                      size += unknownFields.serializedSize()
                                                                      memoizedSerializedSize = size
                                                                      return size
                                                                    }
                                                                    class func parseFromData(data:[Byte]) -> OneBytes {
                                                                      return OneBytes.builder().mergeFromData(data).build()
                                                                    }
                                                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OneBytes {
                                                                      return OneBytes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                    }
                                                                    class func parseFromInputStream(input:NSInputStream) -> OneBytes {
                                                                      return OneBytes.builder().mergeFromInputStream(input).build()
                                                                    }
                                                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OneBytes {
                                                                      return OneBytes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                    }
                                                                    class func parseFromCodedInputStream(input:CodedInputStream) -> OneBytes {
                                                                      return OneBytes.builder().mergeFromCodedInputStream(input).build()
                                                                    }
                                                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OneBytes {
                                                                      return OneBytes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                    }
                                                                    class func builder() -> OneBytesBuilder {
                                                                      return OneBytesBuilder()
                                                                    }
                                                                    class func builderWithPrototype(prototype:OneBytes) -> OneBytesBuilder {
                                                                      return OneBytes.builder().mergeFrom(prototype)
                                                                    }
                                                                    func builder() -> OneBytesBuilder {
                                                                      return OneBytes.builder()
                                                                    }
                                                                    func toBuilder() -> OneBytesBuilder {
                                                                      return OneBytes.builderWithPrototype(self)
                                                                    }
                                                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                                                      if hasData {
                                                                        output += "\(indent) data: \(data) \n"
                                                                      }
                                                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                    }
                                                                    override var hashValue:Int {
                                                                     get {
                                                                          var hashCode:Int = 7
                                                                          if hasData {
                                                                             hashCode = (hashCode &* 31) &+ data.hashValue
                                                                          }
                                                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                          return hashCode
                                                                        }
                                                                      }
                                                                    }

                                                                    class OneBytesBuilder : GeneratedMessageBuilder {
                                                                    private var result:OneBytes

                                                                    override init () {
                                                                       result = OneBytes()
                                                                    }
                                                                    var hasData:Bool {
                                                                         get {
                                                                              return result.hasData
                                                                         }
                                                                    }
                                                                    var data:[Byte] {
                                                                         get {
                                                                              return result.data
                                                                         }
                                                                         set (value) {
                                                                             result.hasData = true
                                                                             result.data = value
                                                                         }
                                                                    }
                                                                    func clearData() -> OneBytesBuilder{
                                                                         result.hasData = false
                                                                         result.data = [Byte]()
                                                                         return self
                                                                    }
                                                                    override var internalGetResult:GeneratedMessage {
                                                                         get {
                                                                            return result
                                                                         }
                                                                    }
                                                                    override func clear() -> OneBytesBuilder {
                                                                      result = OneBytes()
                                                                      return self
                                                                    }
                                                                    override func clone() -> OneBytesBuilder {
                                                                      return OneBytes.builderWithPrototype(result)
                                                                    }
                                                                    func build() -> OneBytes {
                                                                         checkInitialized()
                                                                         return buildPartial()
                                                                    }
                                                                    func buildPartial() -> OneBytes {
                                                                      var returnMe:OneBytes = result
                                                                      return returnMe
                                                                    }
                                                                    func mergeFrom(other:OneBytes) -> OneBytesBuilder {
                                                                      if (other == OneBytes()) {
                                                                        return self
                                                                      }
                                                                      if other.hasData {
                                                                           data = other.data
                                                                      }
                                                                        mergeUnknownFields(other.unknownFields)
                                                                      return self
                                                                    }
                                                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->OneBytesBuilder {
                                                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                    }
                                                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OneBytesBuilder {
                                                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                      while (true) {
                                                                        var tag:Int32 = input.readTag()
                                                                          if tag == 0 {
                                                                               self.unknownFields = unknownFieldsBuilder.build()
                                                                               return self}
                                                                          else if tag == 10 {
                                                                            data = input.readData()
                                                                          }
                                                                          else {
                                                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                    unknownFields = unknownFieldsBuilder.build()
                                                                                    return self
                                                                                }
                                                                          }
                                                                          }
                                                                       }
                                                                    }

                                                                    func == (lhs: MoreBytes, rhs: MoreBytes) -> Bool {
                                                                          if (lhs === rhs) {
                                                                            return true
                                                                          }
                                                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                          fieldCheck = fieldCheck && (lhs.data == rhs.data)
                                                                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                    }
                                                                    class MoreBytes : GeneratedMessage {
                                                                      private(set) var data:[[Byte]] = [[Byte]]()
                                                                      override init() {
                                                                           super.init()
                                                                      }
                                                                      override func isInitialized() -> Bool {
                                                                        return true
                                                                      }
                                                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                        if !data.isEmpty {
                                                                          for value in data {
                                                                            output.writeData(1, value:value)
                                                                          }
                                                                        }
                                                                        unknownFields.writeToCodedOutputStream(output)
                                                                      }
                                                                      override func serializedSize() -> Int32 {
                                                                        var size:Int32 = memoizedSerializedSize
                                                                        if size != -1 {
                                                                          return size
                                                                        }

                                                                        size = 0
                                                                          var dataSizeData:Int32 = 0
                                                                          for element in data {
                                                                              dataSizeData += WireFormat.computeDataSizeNoTag(element)
                                                                          }
                                                                          size += dataSizeData
                                                                          size += 1 * Int32(data.count)
                                                                        size += unknownFields.serializedSize()
                                                                        memoizedSerializedSize = size
                                                                        return size
                                                                      }
                                                                      class func parseFromData(data:[Byte]) -> MoreBytes {
                                                                        return MoreBytes.builder().mergeFromData(data).build()
                                                                      }
                                                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MoreBytes {
                                                                        return MoreBytes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                      }
                                                                      class func parseFromInputStream(input:NSInputStream) -> MoreBytes {
                                                                        return MoreBytes.builder().mergeFromInputStream(input).build()
                                                                      }
                                                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MoreBytes {
                                                                        return MoreBytes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                      }
                                                                      class func parseFromCodedInputStream(input:CodedInputStream) -> MoreBytes {
                                                                        return MoreBytes.builder().mergeFromCodedInputStream(input).build()
                                                                      }
                                                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MoreBytes {
                                                                        return MoreBytes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                      }
                                                                      class func builder() -> MoreBytesBuilder {
                                                                        return MoreBytesBuilder()
                                                                      }
                                                                      class func builderWithPrototype(prototype:MoreBytes) -> MoreBytesBuilder {
                                                                        return MoreBytes.builder().mergeFrom(prototype)
                                                                      }
                                                                      func builder() -> MoreBytesBuilder {
                                                                        return MoreBytes.builder()
                                                                      }
                                                                      func toBuilder() -> MoreBytesBuilder {
                                                                        return MoreBytes.builderWithPrototype(self)
                                                                      }
                                                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                                                        var dataElementIndex:Int = 0
                                                                        for element in data  {
                                                                            output += "\(indent) data[\(dataElementIndex)]: \(element)\n"
                                                                            dataElementIndex++
                                                                        }
                                                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                      }
                                                                      override var hashValue:Int {
                                                                       get {
                                                                            var hashCode:Int = 7
                                                                            for element in data {
                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                            }
                                                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                            return hashCode
                                                                          }
                                                                        }
                                                                      }

                                                                      class MoreBytesBuilder : GeneratedMessageBuilder {
                                                                      private var result:MoreBytes

                                                                      override init () {
                                                                         result = MoreBytes()
                                                                      }
                                                                      var data:[[Byte]] {
                                                                           get {
                                                                               return result.data
                                                                           }
                                                                           set (array) {
                                                                               result.data = array
                                                                           }
                                                                      }
                                                                      func clearData() -> MoreBytesBuilder {
                                                                         result.data.removeAll(keepCapacity: false)
                                                                         return self
                                                                      }
                                                                      override var internalGetResult:GeneratedMessage {
                                                                           get {
                                                                              return result
                                                                           }
                                                                      }
                                                                      override func clear() -> MoreBytesBuilder {
                                                                        result = MoreBytes()
                                                                        return self
                                                                      }
                                                                      override func clone() -> MoreBytesBuilder {
                                                                        return MoreBytes.builderWithPrototype(result)
                                                                      }
                                                                      func build() -> MoreBytes {
                                                                           checkInitialized()
                                                                           return buildPartial()
                                                                      }
                                                                      func buildPartial() -> MoreBytes {
                                                                        var returnMe:MoreBytes = result
                                                                        return returnMe
                                                                      }
                                                                      func mergeFrom(other:MoreBytes) -> MoreBytesBuilder {
                                                                        if (other == MoreBytes()) {
                                                                          return self
                                                                        }
                                                                        if !other.data.isEmpty {
                                                                            result.data += other.data
                                                                        }
                                                                          mergeUnknownFields(other.unknownFields)
                                                                        return self
                                                                      }
                                                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->MoreBytesBuilder {
                                                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                      }
                                                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MoreBytesBuilder {
                                                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                        while (true) {
                                                                          var tag:Int32 = input.readTag()
                                                                            if tag == 0 {
                                                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                                                 return self}
                                                                            else if tag == 10 {
                                                                              data += [input.readData()]
                                                                            }
                                                                            else {
                                                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                      unknownFields = unknownFieldsBuilder.build()
                                                                                      return self
                                                                                  }
                                                                            }
                                                                            }
                                                                         }
                                                                      }

                                                                      func == (lhs: TestPackedTypes, rhs: TestPackedTypes) -> Bool {
                                                                            if (lhs === rhs) {
                                                                              return true
                                                                            }
                                                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                            fieldCheck = fieldCheck && (lhs.packedInt32 == rhs.packedInt32)
                                                                             fieldCheck = fieldCheck && (lhs.packedInt64 == rhs.packedInt64)
                                                                             fieldCheck = fieldCheck && (lhs.packedUint32 == rhs.packedUint32)
                                                                             fieldCheck = fieldCheck && (lhs.packedUint64 == rhs.packedUint64)
                                                                             fieldCheck = fieldCheck && (lhs.packedSint32 == rhs.packedSint32)
                                                                             fieldCheck = fieldCheck && (lhs.packedSint64 == rhs.packedSint64)
                                                                             fieldCheck = fieldCheck && (lhs.packedFixed32 == rhs.packedFixed32)
                                                                             fieldCheck = fieldCheck && (lhs.packedFixed64 == rhs.packedFixed64)
                                                                             fieldCheck = fieldCheck && (lhs.packedSfixed32 == rhs.packedSfixed32)
                                                                             fieldCheck = fieldCheck && (lhs.packedSfixed64 == rhs.packedSfixed64)
                                                                             fieldCheck = fieldCheck && (lhs.packedFloat == rhs.packedFloat)
                                                                             fieldCheck = fieldCheck && (lhs.packedDouble == rhs.packedDouble)
                                                                             fieldCheck = fieldCheck && (lhs.packedBool == rhs.packedBool)
                                                                             fieldCheck = fieldCheck && (lhs.packedEnum == rhs.packedEnum)
                                                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                      }
                                                                      class TestPackedTypes : GeneratedMessage {
                                                                        private(set) var packedInt32:[Int32] = [Int32]()
                                                                        private var packedInt32MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedInt64:[Int64] = [Int64]()
                                                                        private var packedInt64MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedUint32:[UInt32] = [UInt32]()
                                                                        private var packedUint32MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedUint64:[UInt64] = [UInt64]()
                                                                        private var packedUint64MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedSint32:[Int32] = [Int32]()
                                                                        private var packedSint32MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedSint64:[Int64] = [Int64]()
                                                                        private var packedSint64MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedFixed32:[UInt32] = [UInt32]()
                                                                        private var packedFixed32MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedFixed64:[UInt64] = [UInt64]()
                                                                        private var packedFixed64MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedSfixed32:[Int32] = [Int32]()
                                                                        private var packedSfixed32MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedSfixed64:[Int64] = [Int64]()
                                                                        private var packedSfixed64MemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedFloat:[Float] = [Float]()
                                                                        private var packedFloatMemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedDouble:[Double] = [Double]()
                                                                        private var packedDoubleMemoizedSerializedSize:Int32 = -1
                                                                        private(set) var packedBool:[Bool] = [Bool]()
                                                                        private var packedBoolMemoizedSerializedSize:Int32 = -1
                                                                        private var packedEnumMemoizedSerializedSize:Int32 = 0
                                                                        private(set) var packedEnum:[ForeignEnum] = [ForeignEnum]()
                                                                        override init() {
                                                                             super.init()
                                                                        }
                                                                        override func isInitialized() -> Bool {
                                                                          return true
                                                                        }
                                                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                          if !packedInt32.isEmpty {
                                                                            output.writeRawVarint32(722)
                                                                            output.writeRawVarint32(packedInt32MemoizedSerializedSize)
                                                                            for value in packedInt32 {
                                                                              output.writeInt32NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedInt64.isEmpty {
                                                                            output.writeRawVarint32(730)
                                                                            output.writeRawVarint32(packedInt64MemoizedSerializedSize)
                                                                            for value in packedInt64 {
                                                                              output.writeInt64NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedUint32.isEmpty {
                                                                            output.writeRawVarint32(738)
                                                                            output.writeRawVarint32(packedUint32MemoizedSerializedSize)
                                                                            for value in packedUint32 {
                                                                              output.writeUInt32NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedUint64.isEmpty {
                                                                            output.writeRawVarint32(746)
                                                                            output.writeRawVarint32(packedUint64MemoizedSerializedSize)
                                                                            for value in packedUint64 {
                                                                              output.writeUInt64NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedSint32.isEmpty {
                                                                            output.writeRawVarint32(754)
                                                                            output.writeRawVarint32(packedSint32MemoizedSerializedSize)
                                                                            for value in packedSint32 {
                                                                              output.writeSInt32NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedSint64.isEmpty {
                                                                            output.writeRawVarint32(762)
                                                                            output.writeRawVarint32(packedSint64MemoizedSerializedSize)
                                                                            for value in packedSint64 {
                                                                              output.writeSInt64NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedFixed32.isEmpty {
                                                                            output.writeRawVarint32(770)
                                                                            output.writeRawVarint32(packedFixed32MemoizedSerializedSize)
                                                                            for value in packedFixed32 {
                                                                              output.writeFixed32NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedFixed64.isEmpty {
                                                                            output.writeRawVarint32(778)
                                                                            output.writeRawVarint32(packedFixed64MemoizedSerializedSize)
                                                                            for value in packedFixed64 {
                                                                              output.writeFixed64NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedSfixed32.isEmpty {
                                                                            output.writeRawVarint32(786)
                                                                            output.writeRawVarint32(packedSfixed32MemoizedSerializedSize)
                                                                            for value in packedSfixed32 {
                                                                              output.writeSFixed32NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedSfixed64.isEmpty {
                                                                            output.writeRawVarint32(794)
                                                                            output.writeRawVarint32(packedSfixed64MemoizedSerializedSize)
                                                                            for value in packedSfixed64 {
                                                                              output.writeSFixed64NoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedFloat.isEmpty {
                                                                            output.writeRawVarint32(802)
                                                                            output.writeRawVarint32(packedFloatMemoizedSerializedSize)
                                                                            for value in packedFloat {
                                                                              output.writeFloatNoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedDouble.isEmpty {
                                                                            output.writeRawVarint32(810)
                                                                            output.writeRawVarint32(packedDoubleMemoizedSerializedSize)
                                                                            for value in packedDouble {
                                                                              output.writeDoubleNoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedBool.isEmpty {
                                                                            output.writeRawVarint32(818)
                                                                            output.writeRawVarint32(packedBoolMemoizedSerializedSize)
                                                                            for value in packedBool {
                                                                              output.writeBoolNoTag(value)
                                                                            }
                                                                          }
                                                                          if !packedEnum.isEmpty {
                                                                            output.writeRawVarint32(826)
                                                                            output.writeRawVarint32(packedEnumMemoizedSerializedSize)
                                                                          }
                                                                          for value in packedEnum {
                                                                              output.writeEnumNoTag(value.toRaw())
                                                                          }
                                                                          unknownFields.writeToCodedOutputStream(output)
                                                                        }
                                                                        override func serializedSize() -> Int32 {
                                                                          var size:Int32 = memoizedSerializedSize
                                                                          if size != -1 {
                                                                            return size
                                                                          }

                                                                          size = 0
                                                                            var dataSizePackedInt32:Int32 = 0
                                                                            for element in packedInt32 {
                                                                                dataSizePackedInt32 += WireFormat.computeInt32SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedInt32
                                                                            if !packedInt32.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedInt32)
                                                                            }
                                                                            packedInt32MemoizedSerializedSize = dataSizePackedInt32
                                                                            var dataSizePackedInt64:Int32 = 0
                                                                            for element in packedInt64 {
                                                                                dataSizePackedInt64 += WireFormat.computeInt64SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedInt64
                                                                            if !packedInt64.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedInt64)
                                                                            }
                                                                            packedInt64MemoizedSerializedSize = dataSizePackedInt64
                                                                            var dataSizePackedUint32:Int32 = 0
                                                                            for element in packedUint32 {
                                                                                dataSizePackedUint32 += WireFormat.computeUInt32SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedUint32
                                                                            if !packedUint32.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedUint32)
                                                                            }
                                                                            packedUint32MemoizedSerializedSize = dataSizePackedUint32
                                                                            var dataSizePackedUint64:Int32 = 0
                                                                            for element in packedUint64 {
                                                                                dataSizePackedUint64 += WireFormat.computeUInt64SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedUint64
                                                                            if !packedUint64.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedUint64)
                                                                            }
                                                                            packedUint64MemoizedSerializedSize = dataSizePackedUint64
                                                                            var dataSizePackedSint32:Int32 = 0
                                                                            for element in packedSint32 {
                                                                                dataSizePackedSint32 += WireFormat.computeSInt32SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedSint32
                                                                            if !packedSint32.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedSint32)
                                                                            }
                                                                            packedSint32MemoizedSerializedSize = dataSizePackedSint32
                                                                            var dataSizePackedSint64:Int32 = 0
                                                                            for element in packedSint64 {
                                                                                dataSizePackedSint64 += WireFormat.computeSInt64SizeNoTag(element)
                                                                            }
                                                                            size += dataSizePackedSint64
                                                                            if !packedSint64.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedSint64)
                                                                            }
                                                                            packedSint64MemoizedSerializedSize = dataSizePackedSint64
                                                                            var dataSizePackedFixed32:Int32 = 0
                                                                            dataSizePackedFixed32 = 4 * Int32(packedFixed32.count)
                                                                            size += dataSizePackedFixed32
                                                                            if !packedFixed32.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedFixed32)
                                                                            }
                                                                            packedFixed32MemoizedSerializedSize = dataSizePackedFixed32
                                                                            var dataSizePackedFixed64:Int32 = 0
                                                                            dataSizePackedFixed64 = 8 * Int32(packedFixed64.count)
                                                                            size += dataSizePackedFixed64
                                                                            if !packedFixed64.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedFixed64)
                                                                            }
                                                                            packedFixed64MemoizedSerializedSize = dataSizePackedFixed64
                                                                            var dataSizePackedSfixed32:Int32 = 0
                                                                            dataSizePackedSfixed32 = 4 * Int32(packedSfixed32.count)
                                                                            size += dataSizePackedSfixed32
                                                                            if !packedSfixed32.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedSfixed32)
                                                                            }
                                                                            packedSfixed32MemoizedSerializedSize = dataSizePackedSfixed32
                                                                            var dataSizePackedSfixed64:Int32 = 0
                                                                            dataSizePackedSfixed64 = 8 * Int32(packedSfixed64.count)
                                                                            size += dataSizePackedSfixed64
                                                                            if !packedSfixed64.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedSfixed64)
                                                                            }
                                                                            packedSfixed64MemoizedSerializedSize = dataSizePackedSfixed64
                                                                            var dataSizePackedFloat:Int32 = 0
                                                                            dataSizePackedFloat = 4 * Int32(packedFloat.count)
                                                                            size += dataSizePackedFloat
                                                                            if !packedFloat.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedFloat)
                                                                            }
                                                                            packedFloatMemoizedSerializedSize = dataSizePackedFloat
                                                                            var dataSizePackedDouble:Int32 = 0
                                                                            dataSizePackedDouble = 8 * Int32(packedDouble.count)
                                                                            size += dataSizePackedDouble
                                                                            if !packedDouble.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedDouble)
                                                                            }
                                                                            packedDoubleMemoizedSerializedSize = dataSizePackedDouble
                                                                            var dataSizePackedBool:Int32 = 0
                                                                            dataSizePackedBool = 1 * Int32(packedBool.count)
                                                                            size += dataSizePackedBool
                                                                            if !packedBool.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeInt32SizeNoTag(dataSizePackedBool)
                                                                            }
                                                                            packedBoolMemoizedSerializedSize = dataSizePackedBool
                                                                            var dataSizepackedEnum:Int32 = 0
                                                                            for value in packedEnum {
                                                                                dataSizepackedEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
                                                                            }
                                                                            size += dataSizepackedEnum
                                                                            if !packedEnum.isEmpty {
                                                                              size += 2
                                                                              size += WireFormat.computeRawVarint32Size(dataSizepackedEnum)
                                                                            packedEnumMemoizedSerializedSize = dataSizepackedEnum
                                                                          size += unknownFields.serializedSize()
                                                                          memoizedSerializedSize = size
                                                                          return size
                                                                        }
                                                                        class func parseFromData(data:[Byte]) -> TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromData(data).build()
                                                                        }
                                                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                        }
                                                                        class func parseFromInputStream(input:NSInputStream) -> TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromInputStream(input).build()
                                                                        }
                                                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                        }
                                                                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromCodedInputStream(input).build()
                                                                        }
                                                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedTypes {
                                                                          return TestPackedTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                        }
                                                                        class func builder() -> TestPackedTypesBuilder {
                                                                          return TestPackedTypesBuilder()
                                                                        }
                                                                        class func builderWithPrototype(prototype:TestPackedTypes) -> TestPackedTypesBuilder {
                                                                          return TestPackedTypes.builder().mergeFrom(prototype)
                                                                        }
                                                                        func builder() -> TestPackedTypesBuilder {
                                                                          return TestPackedTypes.builder()
                                                                        }
                                                                        func toBuilder() -> TestPackedTypesBuilder {
                                                                          return TestPackedTypes.builderWithPrototype(self)
                                                                        }
                                                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                                                          var packedInt32ElementIndex:Int = 0
                                                                          for element in packedInt32  {
                                                                              output += "\(indent) packedInt32[\(packedInt32ElementIndex)]: \(element)\n"
                                                                              packedInt32ElementIndex++
                                                                          }
                                                                          var packedInt64ElementIndex:Int = 0
                                                                          for element in packedInt64  {
                                                                              output += "\(indent) packedInt64[\(packedInt64ElementIndex)]: \(element)\n"
                                                                              packedInt64ElementIndex++
                                                                          }
                                                                          var packedUint32ElementIndex:Int = 0
                                                                          for element in packedUint32  {
                                                                              output += "\(indent) packedUint32[\(packedUint32ElementIndex)]: \(element)\n"
                                                                              packedUint32ElementIndex++
                                                                          }
                                                                          var packedUint64ElementIndex:Int = 0
                                                                          for element in packedUint64  {
                                                                              output += "\(indent) packedUint64[\(packedUint64ElementIndex)]: \(element)\n"
                                                                              packedUint64ElementIndex++
                                                                          }
                                                                          var packedSint32ElementIndex:Int = 0
                                                                          for element in packedSint32  {
                                                                              output += "\(indent) packedSint32[\(packedSint32ElementIndex)]: \(element)\n"
                                                                              packedSint32ElementIndex++
                                                                          }
                                                                          var packedSint64ElementIndex:Int = 0
                                                                          for element in packedSint64  {
                                                                              output += "\(indent) packedSint64[\(packedSint64ElementIndex)]: \(element)\n"
                                                                              packedSint64ElementIndex++
                                                                          }
                                                                          var packedFixed32ElementIndex:Int = 0
                                                                          for element in packedFixed32  {
                                                                              output += "\(indent) packedFixed32[\(packedFixed32ElementIndex)]: \(element)\n"
                                                                              packedFixed32ElementIndex++
                                                                          }
                                                                          var packedFixed64ElementIndex:Int = 0
                                                                          for element in packedFixed64  {
                                                                              output += "\(indent) packedFixed64[\(packedFixed64ElementIndex)]: \(element)\n"
                                                                              packedFixed64ElementIndex++
                                                                          }
                                                                          var packedSfixed32ElementIndex:Int = 0
                                                                          for element in packedSfixed32  {
                                                                              output += "\(indent) packedSfixed32[\(packedSfixed32ElementIndex)]: \(element)\n"
                                                                              packedSfixed32ElementIndex++
                                                                          }
                                                                          var packedSfixed64ElementIndex:Int = 0
                                                                          for element in packedSfixed64  {
                                                                              output += "\(indent) packedSfixed64[\(packedSfixed64ElementIndex)]: \(element)\n"
                                                                              packedSfixed64ElementIndex++
                                                                          }
                                                                          var packedFloatElementIndex:Int = 0
                                                                          for element in packedFloat  {
                                                                              output += "\(indent) packedFloat[\(packedFloatElementIndex)]: \(element)\n"
                                                                              packedFloatElementIndex++
                                                                          }
                                                                          var packedDoubleElementIndex:Int = 0
                                                                          for element in packedDouble  {
                                                                              output += "\(indent) packedDouble[\(packedDoubleElementIndex)]: \(element)\n"
                                                                              packedDoubleElementIndex++
                                                                          }
                                                                          var packedBoolElementIndex:Int = 0
                                                                          for element in packedBool  {
                                                                              output += "\(indent) packedBool[\(packedBoolElementIndex)]: \(element)\n"
                                                                              packedBoolElementIndex++
                                                                          }
                                                                          var packedEnumElementIndex:Int = 0
                                                                          for element in packedEnum {
                                                                              output += "\(indent) packedEnum[\(packedEnumElementIndex)]: \(element.toRaw())"
                                                                              packedEnumElementIndex++
                                                                          }
                                                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                        }
                                                                        override var hashValue:Int {
                                                                         get {
                                                                              var hashCode:Int = 7
                                                                              for element in packedInt32 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedInt64 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedUint32 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedUint64 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedSint32 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedSint64 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedFixed32 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedFixed64 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedSfixed32 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedSfixed64 {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedFloat {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedDouble {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedBool {
                                                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                                                              }
                                                                              for element in packedEnum {
                                                                                  hashCode = (hashCode &* 31) &+ Int(element.toRaw())
                                                                              }
                                                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                              return hashCode
                                                                            }
                                                                          }
                                                                        }

                                                                        class TestPackedTypesBuilder : GeneratedMessageBuilder {
                                                                        private var result:TestPackedTypes

                                                                        override init () {
                                                                           result = TestPackedTypes()
                                                                        }
                                                                        var packedInt32:[Int32] {
                                                                             get {
                                                                                 return result.packedInt32
                                                                             }
                                                                             set (array) {
                                                                                 result.packedInt32 = array
                                                                             }
                                                                        }
                                                                        func clearPackedInt32() -> TestPackedTypesBuilder {
                                                                           result.packedInt32.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedInt64:[Int64] {
                                                                             get {
                                                                                 return result.packedInt64
                                                                             }
                                                                             set (array) {
                                                                                 result.packedInt64 = array
                                                                             }
                                                                        }
                                                                        func clearPackedInt64() -> TestPackedTypesBuilder {
                                                                           result.packedInt64.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedUint32:[UInt32] {
                                                                             get {
                                                                                 return result.packedUint32
                                                                             }
                                                                             set (array) {
                                                                                 result.packedUint32 = array
                                                                             }
                                                                        }
                                                                        func clearPackedUint32() -> TestPackedTypesBuilder {
                                                                           result.packedUint32.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedUint64:[UInt64] {
                                                                             get {
                                                                                 return result.packedUint64
                                                                             }
                                                                             set (array) {
                                                                                 result.packedUint64 = array
                                                                             }
                                                                        }
                                                                        func clearPackedUint64() -> TestPackedTypesBuilder {
                                                                           result.packedUint64.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedSint32:[Int32] {
                                                                             get {
                                                                                 return result.packedSint32
                                                                             }
                                                                             set (array) {
                                                                                 result.packedSint32 = array
                                                                             }
                                                                        }
                                                                        func clearPackedSint32() -> TestPackedTypesBuilder {
                                                                           result.packedSint32.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedSint64:[Int64] {
                                                                             get {
                                                                                 return result.packedSint64
                                                                             }
                                                                             set (array) {
                                                                                 result.packedSint64 = array
                                                                             }
                                                                        }
                                                                        func clearPackedSint64() -> TestPackedTypesBuilder {
                                                                           result.packedSint64.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedFixed32:[UInt32] {
                                                                             get {
                                                                                 return result.packedFixed32
                                                                             }
                                                                             set (array) {
                                                                                 result.packedFixed32 = array
                                                                             }
                                                                        }
                                                                        func clearPackedFixed32() -> TestPackedTypesBuilder {
                                                                           result.packedFixed32.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedFixed64:[UInt64] {
                                                                             get {
                                                                                 return result.packedFixed64
                                                                             }
                                                                             set (array) {
                                                                                 result.packedFixed64 = array
                                                                             }
                                                                        }
                                                                        func clearPackedFixed64() -> TestPackedTypesBuilder {
                                                                           result.packedFixed64.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedSfixed32:[Int32] {
                                                                             get {
                                                                                 return result.packedSfixed32
                                                                             }
                                                                             set (array) {
                                                                                 result.packedSfixed32 = array
                                                                             }
                                                                        }
                                                                        func clearPackedSfixed32() -> TestPackedTypesBuilder {
                                                                           result.packedSfixed32.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedSfixed64:[Int64] {
                                                                             get {
                                                                                 return result.packedSfixed64
                                                                             }
                                                                             set (array) {
                                                                                 result.packedSfixed64 = array
                                                                             }
                                                                        }
                                                                        func clearPackedSfixed64() -> TestPackedTypesBuilder {
                                                                           result.packedSfixed64.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedFloat:[Float] {
                                                                             get {
                                                                                 return result.packedFloat
                                                                             }
                                                                             set (array) {
                                                                                 result.packedFloat = array
                                                                             }
                                                                        }
                                                                        func clearPackedFloat() -> TestPackedTypesBuilder {
                                                                           result.packedFloat.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedDouble:[Double] {
                                                                             get {
                                                                                 return result.packedDouble
                                                                             }
                                                                             set (array) {
                                                                                 result.packedDouble = array
                                                                             }
                                                                        }
                                                                        func clearPackedDouble() -> TestPackedTypesBuilder {
                                                                           result.packedDouble.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedBool:[Bool] {
                                                                             get {
                                                                                 return result.packedBool
                                                                             }
                                                                             set (array) {
                                                                                 result.packedBool = array
                                                                             }
                                                                        }
                                                                        func clearPackedBool() -> TestPackedTypesBuilder {
                                                                           result.packedBool.removeAll(keepCapacity: false)
                                                                           return self
                                                                        }
                                                                        var packedEnum:[ForeignEnum] {
                                                                            get {
                                                                                return result.packedEnum
                                                                            }
                                                                            set (value) {
                                                                                result.packedEnum += value
                                                                            }
                                                                        }
                                                                        func clearPackedEnum() -> TestPackedTypesBuilder {
                                                                          result.packedEnum.removeAll(keepCapacity: false)
                                                                          return self
                                                                        }
                                                                        override var internalGetResult:GeneratedMessage {
                                                                             get {
                                                                                return result
                                                                             }
                                                                        }
                                                                        override func clear() -> TestPackedTypesBuilder {
                                                                          result = TestPackedTypes()
                                                                          return self
                                                                        }
                                                                        override func clone() -> TestPackedTypesBuilder {
                                                                          return TestPackedTypes.builderWithPrototype(result)
                                                                        }
                                                                        func build() -> TestPackedTypes {
                                                                             checkInitialized()
                                                                             return buildPartial()
                                                                        }
                                                                        func buildPartial() -> TestPackedTypes {
                                                                          var returnMe:TestPackedTypes = result
                                                                          return returnMe
                                                                        }
                                                                        func mergeFrom(other:TestPackedTypes) -> TestPackedTypesBuilder {
                                                                          if (other == TestPackedTypes()) {
                                                                            return self
                                                                          }
                                                                          if !other.packedInt32.isEmpty {
                                                                              result.packedInt32 += other.packedInt32
                                                                          }
                                                                          if !other.packedInt64.isEmpty {
                                                                              result.packedInt64 += other.packedInt64
                                                                          }
                                                                          if !other.packedUint32.isEmpty {
                                                                              result.packedUint32 += other.packedUint32
                                                                          }
                                                                          if !other.packedUint64.isEmpty {
                                                                              result.packedUint64 += other.packedUint64
                                                                          }
                                                                          if !other.packedSint32.isEmpty {
                                                                              result.packedSint32 += other.packedSint32
                                                                          }
                                                                          if !other.packedSint64.isEmpty {
                                                                              result.packedSint64 += other.packedSint64
                                                                          }
                                                                          if !other.packedFixed32.isEmpty {
                                                                              result.packedFixed32 += other.packedFixed32
                                                                          }
                                                                          if !other.packedFixed64.isEmpty {
                                                                              result.packedFixed64 += other.packedFixed64
                                                                          }
                                                                          if !other.packedSfixed32.isEmpty {
                                                                              result.packedSfixed32 += other.packedSfixed32
                                                                          }
                                                                          if !other.packedSfixed64.isEmpty {
                                                                              result.packedSfixed64 += other.packedSfixed64
                                                                          }
                                                                          if !other.packedFloat.isEmpty {
                                                                              result.packedFloat += other.packedFloat
                                                                          }
                                                                          if !other.packedDouble.isEmpty {
                                                                              result.packedDouble += other.packedDouble
                                                                          }
                                                                          if !other.packedBool.isEmpty {
                                                                              result.packedBool += other.packedBool
                                                                          }
                                                                          if !other.packedEnum.isEmpty {
                                                                             result.packedEnum += other.packedEnum
                                                                          }
                                                                            mergeUnknownFields(other.unknownFields)
                                                                          return self
                                                                        }
                                                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestPackedTypesBuilder {
                                                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                        }
                                                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedTypesBuilder {
                                                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                          while (true) {
                                                                            var tag:Int32 = input.readTag()
                                                                              if tag == 0 {
                                                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                                                   return self}
                                                                              else if tag == 722 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedInt32 += [input.readInt32()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 730 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedInt64 += [input.readInt64()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 738 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedUint32 += [input.readUInt32()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 746 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedUint64 += [input.readUInt64()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 754 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedSint32 += [input.readSInt32()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 762 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedSint64 += [input.readSInt64()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 770 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedFixed32 += [input.readFixed32()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 778 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedFixed64 += [input.readFixed64()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 786 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedSfixed32 += [input.readSFixed32()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 794 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedSfixed64 += [input.readSFixed64()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 802 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedFloat += [input.readFloat()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 810 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedDouble += [input.readDouble()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 818 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var limit:Int32 = input.pushLimit(length)
                                                                                while (input.bytesUntilLimit() > 0) {
                                                                                  result.packedBool += [input.readBool()]
                                                                                }
                                                                                input.popLimit(limit)
                                                                              }
                                                                              else if tag == 826 {
                                                                                var length:Int32 = input.readRawVarint32()
                                                                                var oldLimit:Int32 = input.pushLimit(length)
                                                                                while input.bytesUntilLimit() > 0 {
                                                                                  var value:ForeignEnum = ForeignEnum.fromRaw(input.readEnum())!
                                                                                  if ForeignEnum.ForeignEnumIsValidValue(value) {
                                                                                       result.packedEnum += [value]
                                                                                  } else {
                                                                                       unknownFieldsBuilder.mergeVarintField(103, value:Int64(value.toRaw()))
                                                                                  }
                                                                                }
                                                                                input.popLimit(oldLimit)
                                                                              }
                                                                              else {
                                                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                        unknownFields = unknownFieldsBuilder.build()
                                                                                        return self
                                                                                    }
                                                                              }
                                                                              }
                                                                           }
                                                                        }

                                                                        func == (lhs: TestUnpackedTypes, rhs: TestUnpackedTypes) -> Bool {
                                                                              if (lhs === rhs) {
                                                                                return true
                                                                              }
                                                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                              fieldCheck = fieldCheck && (lhs.unpackedInt32 == rhs.unpackedInt32)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedInt64 == rhs.unpackedInt64)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedUint32 == rhs.unpackedUint32)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedUint64 == rhs.unpackedUint64)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedSint32 == rhs.unpackedSint32)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedSint64 == rhs.unpackedSint64)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedFixed32 == rhs.unpackedFixed32)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedFixed64 == rhs.unpackedFixed64)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedSfixed32 == rhs.unpackedSfixed32)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedSfixed64 == rhs.unpackedSfixed64)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedFloat == rhs.unpackedFloat)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedDouble == rhs.unpackedDouble)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedBool == rhs.unpackedBool)
                                                                               fieldCheck = fieldCheck && (lhs.unpackedEnum == rhs.unpackedEnum)
                                                                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                        }
                                                                        class TestUnpackedTypes : GeneratedMessage {
                                                                          private(set) var unpackedInt32:[Int32] = [Int32]()
                                                                          private(set) var unpackedInt64:[Int64] = [Int64]()
                                                                          private(set) var unpackedUint32:[UInt32] = [UInt32]()
                                                                          private(set) var unpackedUint64:[UInt64] = [UInt64]()
                                                                          private(set) var unpackedSint32:[Int32] = [Int32]()
                                                                          private(set) var unpackedSint64:[Int64] = [Int64]()
                                                                          private(set) var unpackedFixed32:[UInt32] = [UInt32]()
                                                                          private(set) var unpackedFixed64:[UInt64] = [UInt64]()
                                                                          private(set) var unpackedSfixed32:[Int32] = [Int32]()
                                                                          private(set) var unpackedSfixed64:[Int64] = [Int64]()
                                                                          private(set) var unpackedFloat:[Float] = [Float]()
                                                                          private(set) var unpackedDouble:[Double] = [Double]()
                                                                          private(set) var unpackedBool:[Bool] = [Bool]()
                                                                          private var unpackedEnumMemoizedSerializedSize:Int32 = 0
                                                                          private(set) var unpackedEnum:[ForeignEnum] = [ForeignEnum]()
                                                                          override init() {
                                                                               super.init()
                                                                          }
                                                                          override func isInitialized() -> Bool {
                                                                            return true
                                                                          }
                                                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                            if !unpackedInt32.isEmpty {
                                                                              for value in unpackedInt32 {
                                                                                output.writeInt32(90, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedInt64.isEmpty {
                                                                              for value in unpackedInt64 {
                                                                                output.writeInt64(91, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedUint32.isEmpty {
                                                                              for value in unpackedUint32 {
                                                                                output.writeUInt32(92, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedUint64.isEmpty {
                                                                              for value in unpackedUint64 {
                                                                                output.writeUInt64(93, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedSint32.isEmpty {
                                                                              for value in unpackedSint32 {
                                                                                output.writeSInt32(94, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedSint64.isEmpty {
                                                                              for value in unpackedSint64 {
                                                                                output.writeSInt64(95, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedFixed32.isEmpty {
                                                                              for value in unpackedFixed32 {
                                                                                output.writeFixed32(96, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedFixed64.isEmpty {
                                                                              for value in unpackedFixed64 {
                                                                                output.writeFixed64(97, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedSfixed32.isEmpty {
                                                                              for value in unpackedSfixed32 {
                                                                                output.writeSFixed32(98, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedSfixed64.isEmpty {
                                                                              for value in unpackedSfixed64 {
                                                                                output.writeSFixed64(99, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedFloat.isEmpty {
                                                                              for value in unpackedFloat {
                                                                                output.writeFloat(100, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedDouble.isEmpty {
                                                                              for value in unpackedDouble {
                                                                                output.writeDouble(101, value:value)
                                                                              }
                                                                            }
                                                                            if !unpackedBool.isEmpty {
                                                                              for value in unpackedBool {
                                                                                output.writeBool(102, value:value)
                                                                              }
                                                                            }
                                                                            for value in unpackedEnum {
                                                                                output.writeEnum(103, value:value.toRaw())
                                                                            }
                                                                            unknownFields.writeToCodedOutputStream(output)
                                                                          }
                                                                          override func serializedSize() -> Int32 {
                                                                            var size:Int32 = memoizedSerializedSize
                                                                            if size != -1 {
                                                                              return size
                                                                            }

                                                                            size = 0
                                                                              var dataSizeUnpackedInt32:Int32 = 0
                                                                              for element in unpackedInt32 {
                                                                                  dataSizeUnpackedInt32 += WireFormat.computeInt32SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedInt32
                                                                              size += 2 * Int32(unpackedInt32.count)
                                                                              var dataSizeUnpackedInt64:Int32 = 0
                                                                              for element in unpackedInt64 {
                                                                                  dataSizeUnpackedInt64 += WireFormat.computeInt64SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedInt64
                                                                              size += 2 * Int32(unpackedInt64.count)
                                                                              var dataSizeUnpackedUint32:Int32 = 0
                                                                              for element in unpackedUint32 {
                                                                                  dataSizeUnpackedUint32 += WireFormat.computeUInt32SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedUint32
                                                                              size += 2 * Int32(unpackedUint32.count)
                                                                              var dataSizeUnpackedUint64:Int32 = 0
                                                                              for element in unpackedUint64 {
                                                                                  dataSizeUnpackedUint64 += WireFormat.computeUInt64SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedUint64
                                                                              size += 2 * Int32(unpackedUint64.count)
                                                                              var dataSizeUnpackedSint32:Int32 = 0
                                                                              for element in unpackedSint32 {
                                                                                  dataSizeUnpackedSint32 += WireFormat.computeSInt32SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedSint32
                                                                              size += 2 * Int32(unpackedSint32.count)
                                                                              var dataSizeUnpackedSint64:Int32 = 0
                                                                              for element in unpackedSint64 {
                                                                                  dataSizeUnpackedSint64 += WireFormat.computeSInt64SizeNoTag(element)
                                                                              }
                                                                              size += dataSizeUnpackedSint64
                                                                              size += 2 * Int32(unpackedSint64.count)
                                                                              var dataSizeUnpackedFixed32:Int32 = 0
                                                                              dataSizeUnpackedFixed32 = 4 * Int32(unpackedFixed32.count)
                                                                              size += dataSizeUnpackedFixed32
                                                                              size += 2 * Int32(unpackedFixed32.count)
                                                                              var dataSizeUnpackedFixed64:Int32 = 0
                                                                              dataSizeUnpackedFixed64 = 8 * Int32(unpackedFixed64.count)
                                                                              size += dataSizeUnpackedFixed64
                                                                              size += 2 * Int32(unpackedFixed64.count)
                                                                              var dataSizeUnpackedSfixed32:Int32 = 0
                                                                              dataSizeUnpackedSfixed32 = 4 * Int32(unpackedSfixed32.count)
                                                                              size += dataSizeUnpackedSfixed32
                                                                              size += 2 * Int32(unpackedSfixed32.count)
                                                                              var dataSizeUnpackedSfixed64:Int32 = 0
                                                                              dataSizeUnpackedSfixed64 = 8 * Int32(unpackedSfixed64.count)
                                                                              size += dataSizeUnpackedSfixed64
                                                                              size += 2 * Int32(unpackedSfixed64.count)
                                                                              var dataSizeUnpackedFloat:Int32 = 0
                                                                              dataSizeUnpackedFloat = 4 * Int32(unpackedFloat.count)
                                                                              size += dataSizeUnpackedFloat
                                                                              size += 2 * Int32(unpackedFloat.count)
                                                                              var dataSizeUnpackedDouble:Int32 = 0
                                                                              dataSizeUnpackedDouble = 8 * Int32(unpackedDouble.count)
                                                                              size += dataSizeUnpackedDouble
                                                                              size += 2 * Int32(unpackedDouble.count)
                                                                              var dataSizeUnpackedBool:Int32 = 0
                                                                              dataSizeUnpackedBool = 1 * Int32(unpackedBool.count)
                                                                              size += dataSizeUnpackedBool
                                                                              size += 2 * Int32(unpackedBool.count)
                                                                              var dataSizeunpackedEnum:Int32 = 0
                                                                              for value in unpackedEnum {
                                                                                  dataSizeunpackedEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
                                                                              }
                                                                              size += dataSizeunpackedEnum
                                                                              size += (2 * Int32(unpackedEnum.count))
                                                                            size += unknownFields.serializedSize()
                                                                            memoizedSerializedSize = size
                                                                            return size
                                                                          }
                                                                          class func parseFromData(data:[Byte]) -> TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromData(data).build()
                                                                          }
                                                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                          }
                                                                          class func parseFromInputStream(input:NSInputStream) -> TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromInputStream(input).build()
                                                                          }
                                                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                          }
                                                                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromCodedInputStream(input).build()
                                                                          }
                                                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestUnpackedTypes {
                                                                            return TestUnpackedTypes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                          }
                                                                          class func builder() -> TestUnpackedTypesBuilder {
                                                                            return TestUnpackedTypesBuilder()
                                                                          }
                                                                          class func builderWithPrototype(prototype:TestUnpackedTypes) -> TestUnpackedTypesBuilder {
                                                                            return TestUnpackedTypes.builder().mergeFrom(prototype)
                                                                          }
                                                                          func builder() -> TestUnpackedTypesBuilder {
                                                                            return TestUnpackedTypes.builder()
                                                                          }
                                                                          func toBuilder() -> TestUnpackedTypesBuilder {
                                                                            return TestUnpackedTypes.builderWithPrototype(self)
                                                                          }
                                                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                                                            var unpackedInt32ElementIndex:Int = 0
                                                                            for element in unpackedInt32  {
                                                                                output += "\(indent) unpackedInt32[\(unpackedInt32ElementIndex)]: \(element)\n"
                                                                                unpackedInt32ElementIndex++
                                                                            }
                                                                            var unpackedInt64ElementIndex:Int = 0
                                                                            for element in unpackedInt64  {
                                                                                output += "\(indent) unpackedInt64[\(unpackedInt64ElementIndex)]: \(element)\n"
                                                                                unpackedInt64ElementIndex++
                                                                            }
                                                                            var unpackedUint32ElementIndex:Int = 0
                                                                            for element in unpackedUint32  {
                                                                                output += "\(indent) unpackedUint32[\(unpackedUint32ElementIndex)]: \(element)\n"
                                                                                unpackedUint32ElementIndex++
                                                                            }
                                                                            var unpackedUint64ElementIndex:Int = 0
                                                                            for element in unpackedUint64  {
                                                                                output += "\(indent) unpackedUint64[\(unpackedUint64ElementIndex)]: \(element)\n"
                                                                                unpackedUint64ElementIndex++
                                                                            }
                                                                            var unpackedSint32ElementIndex:Int = 0
                                                                            for element in unpackedSint32  {
                                                                                output += "\(indent) unpackedSint32[\(unpackedSint32ElementIndex)]: \(element)\n"
                                                                                unpackedSint32ElementIndex++
                                                                            }
                                                                            var unpackedSint64ElementIndex:Int = 0
                                                                            for element in unpackedSint64  {
                                                                                output += "\(indent) unpackedSint64[\(unpackedSint64ElementIndex)]: \(element)\n"
                                                                                unpackedSint64ElementIndex++
                                                                            }
                                                                            var unpackedFixed32ElementIndex:Int = 0
                                                                            for element in unpackedFixed32  {
                                                                                output += "\(indent) unpackedFixed32[\(unpackedFixed32ElementIndex)]: \(element)\n"
                                                                                unpackedFixed32ElementIndex++
                                                                            }
                                                                            var unpackedFixed64ElementIndex:Int = 0
                                                                            for element in unpackedFixed64  {
                                                                                output += "\(indent) unpackedFixed64[\(unpackedFixed64ElementIndex)]: \(element)\n"
                                                                                unpackedFixed64ElementIndex++
                                                                            }
                                                                            var unpackedSfixed32ElementIndex:Int = 0
                                                                            for element in unpackedSfixed32  {
                                                                                output += "\(indent) unpackedSfixed32[\(unpackedSfixed32ElementIndex)]: \(element)\n"
                                                                                unpackedSfixed32ElementIndex++
                                                                            }
                                                                            var unpackedSfixed64ElementIndex:Int = 0
                                                                            for element in unpackedSfixed64  {
                                                                                output += "\(indent) unpackedSfixed64[\(unpackedSfixed64ElementIndex)]: \(element)\n"
                                                                                unpackedSfixed64ElementIndex++
                                                                            }
                                                                            var unpackedFloatElementIndex:Int = 0
                                                                            for element in unpackedFloat  {
                                                                                output += "\(indent) unpackedFloat[\(unpackedFloatElementIndex)]: \(element)\n"
                                                                                unpackedFloatElementIndex++
                                                                            }
                                                                            var unpackedDoubleElementIndex:Int = 0
                                                                            for element in unpackedDouble  {
                                                                                output += "\(indent) unpackedDouble[\(unpackedDoubleElementIndex)]: \(element)\n"
                                                                                unpackedDoubleElementIndex++
                                                                            }
                                                                            var unpackedBoolElementIndex:Int = 0
                                                                            for element in unpackedBool  {
                                                                                output += "\(indent) unpackedBool[\(unpackedBoolElementIndex)]: \(element)\n"
                                                                                unpackedBoolElementIndex++
                                                                            }
                                                                            var unpackedEnumElementIndex:Int = 0
                                                                            for element in unpackedEnum {
                                                                                output += "\(indent) unpackedEnum[\(unpackedEnumElementIndex)]: \(element.toRaw())"
                                                                                unpackedEnumElementIndex++
                                                                            }
                                                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                          }
                                                                          override var hashValue:Int {
                                                                           get {
                                                                                var hashCode:Int = 7
                                                                                for element in unpackedInt32 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedInt64 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedUint32 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedUint64 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedSint32 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedSint64 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedFixed32 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedFixed64 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedSfixed32 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedSfixed64 {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedFloat {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedDouble {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedBool {
                                                                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                }
                                                                                for element in unpackedEnum {
                                                                                    hashCode = (hashCode &* 31) &+ Int(element.toRaw())
                                                                                }
                                                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                return hashCode
                                                                              }
                                                                            }
                                                                          }

                                                                          class TestUnpackedTypesBuilder : GeneratedMessageBuilder {
                                                                          private var result:TestUnpackedTypes

                                                                          override init () {
                                                                             result = TestUnpackedTypes()
                                                                          }
                                                                          var unpackedInt32:[Int32] {
                                                                               get {
                                                                                   return result.unpackedInt32
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedInt32 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedInt32() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedInt32.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedInt64:[Int64] {
                                                                               get {
                                                                                   return result.unpackedInt64
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedInt64 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedInt64() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedInt64.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedUint32:[UInt32] {
                                                                               get {
                                                                                   return result.unpackedUint32
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedUint32 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedUint32() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedUint32.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedUint64:[UInt64] {
                                                                               get {
                                                                                   return result.unpackedUint64
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedUint64 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedUint64() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedUint64.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedSint32:[Int32] {
                                                                               get {
                                                                                   return result.unpackedSint32
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedSint32 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedSint32() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedSint32.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedSint64:[Int64] {
                                                                               get {
                                                                                   return result.unpackedSint64
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedSint64 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedSint64() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedSint64.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedFixed32:[UInt32] {
                                                                               get {
                                                                                   return result.unpackedFixed32
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedFixed32 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedFixed32() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedFixed32.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedFixed64:[UInt64] {
                                                                               get {
                                                                                   return result.unpackedFixed64
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedFixed64 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedFixed64() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedFixed64.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedSfixed32:[Int32] {
                                                                               get {
                                                                                   return result.unpackedSfixed32
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedSfixed32 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedSfixed32() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedSfixed32.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedSfixed64:[Int64] {
                                                                               get {
                                                                                   return result.unpackedSfixed64
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedSfixed64 = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedSfixed64() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedSfixed64.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedFloat:[Float] {
                                                                               get {
                                                                                   return result.unpackedFloat
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedFloat = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedFloat() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedFloat.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedDouble:[Double] {
                                                                               get {
                                                                                   return result.unpackedDouble
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedDouble = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedDouble() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedDouble.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedBool:[Bool] {
                                                                               get {
                                                                                   return result.unpackedBool
                                                                               }
                                                                               set (array) {
                                                                                   result.unpackedBool = array
                                                                               }
                                                                          }
                                                                          func clearUnpackedBool() -> TestUnpackedTypesBuilder {
                                                                             result.unpackedBool.removeAll(keepCapacity: false)
                                                                             return self
                                                                          }
                                                                          var unpackedEnum:[ForeignEnum] {
                                                                              get {
                                                                                  return result.unpackedEnum
                                                                              }
                                                                              set (value) {
                                                                                  result.unpackedEnum += value
                                                                              }
                                                                          }
                                                                          func clearUnpackedEnum() -> TestUnpackedTypesBuilder {
                                                                            result.unpackedEnum.removeAll(keepCapacity: false)
                                                                            return self
                                                                          }
                                                                          override var internalGetResult:GeneratedMessage {
                                                                               get {
                                                                                  return result
                                                                               }
                                                                          }
                                                                          override func clear() -> TestUnpackedTypesBuilder {
                                                                            result = TestUnpackedTypes()
                                                                            return self
                                                                          }
                                                                          override func clone() -> TestUnpackedTypesBuilder {
                                                                            return TestUnpackedTypes.builderWithPrototype(result)
                                                                          }
                                                                          func build() -> TestUnpackedTypes {
                                                                               checkInitialized()
                                                                               return buildPartial()
                                                                          }
                                                                          func buildPartial() -> TestUnpackedTypes {
                                                                            var returnMe:TestUnpackedTypes = result
                                                                            return returnMe
                                                                          }
                                                                          func mergeFrom(other:TestUnpackedTypes) -> TestUnpackedTypesBuilder {
                                                                            if (other == TestUnpackedTypes()) {
                                                                              return self
                                                                            }
                                                                            if !other.unpackedInt32.isEmpty {
                                                                                result.unpackedInt32 += other.unpackedInt32
                                                                            }
                                                                            if !other.unpackedInt64.isEmpty {
                                                                                result.unpackedInt64 += other.unpackedInt64
                                                                            }
                                                                            if !other.unpackedUint32.isEmpty {
                                                                                result.unpackedUint32 += other.unpackedUint32
                                                                            }
                                                                            if !other.unpackedUint64.isEmpty {
                                                                                result.unpackedUint64 += other.unpackedUint64
                                                                            }
                                                                            if !other.unpackedSint32.isEmpty {
                                                                                result.unpackedSint32 += other.unpackedSint32
                                                                            }
                                                                            if !other.unpackedSint64.isEmpty {
                                                                                result.unpackedSint64 += other.unpackedSint64
                                                                            }
                                                                            if !other.unpackedFixed32.isEmpty {
                                                                                result.unpackedFixed32 += other.unpackedFixed32
                                                                            }
                                                                            if !other.unpackedFixed64.isEmpty {
                                                                                result.unpackedFixed64 += other.unpackedFixed64
                                                                            }
                                                                            if !other.unpackedSfixed32.isEmpty {
                                                                                result.unpackedSfixed32 += other.unpackedSfixed32
                                                                            }
                                                                            if !other.unpackedSfixed64.isEmpty {
                                                                                result.unpackedSfixed64 += other.unpackedSfixed64
                                                                            }
                                                                            if !other.unpackedFloat.isEmpty {
                                                                                result.unpackedFloat += other.unpackedFloat
                                                                            }
                                                                            if !other.unpackedDouble.isEmpty {
                                                                                result.unpackedDouble += other.unpackedDouble
                                                                            }
                                                                            if !other.unpackedBool.isEmpty {
                                                                                result.unpackedBool += other.unpackedBool
                                                                            }
                                                                            if !other.unpackedEnum.isEmpty {
                                                                               result.unpackedEnum += other.unpackedEnum
                                                                            }
                                                                              mergeUnknownFields(other.unknownFields)
                                                                            return self
                                                                          }
                                                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestUnpackedTypesBuilder {
                                                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                          }
                                                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestUnpackedTypesBuilder {
                                                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                            while (true) {
                                                                              var tag:Int32 = input.readTag()
                                                                                if tag == 0 {
                                                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                                                     return self}
                                                                                else if tag == 720 {
                                                                                  unpackedInt32 += [input.readInt32()]
                                                                                }
                                                                                else if tag == 728 {
                                                                                  unpackedInt64 += [input.readInt64()]
                                                                                }
                                                                                else if tag == 736 {
                                                                                  unpackedUint32 += [input.readUInt32()]
                                                                                }
                                                                                else if tag == 744 {
                                                                                  unpackedUint64 += [input.readUInt64()]
                                                                                }
                                                                                else if tag == 752 {
                                                                                  unpackedSint32 += [input.readSInt32()]
                                                                                }
                                                                                else if tag == 760 {
                                                                                  unpackedSint64 += [input.readSInt64()]
                                                                                }
                                                                                else if tag == 773 {
                                                                                  unpackedFixed32 += [input.readFixed32()]
                                                                                }
                                                                                else if tag == 777 {
                                                                                  unpackedFixed64 += [input.readFixed64()]
                                                                                }
                                                                                else if tag == 789 {
                                                                                  unpackedSfixed32 += [input.readSFixed32()]
                                                                                }
                                                                                else if tag == 793 {
                                                                                  unpackedSfixed64 += [input.readSFixed64()]
                                                                                }
                                                                                else if tag == 805 {
                                                                                  unpackedFloat += [input.readFloat()]
                                                                                }
                                                                                else if tag == 809 {
                                                                                  unpackedDouble += [input.readDouble()]
                                                                                }
                                                                                else if tag == 816 {
                                                                                  unpackedBool += [input.readBool()]
                                                                                }
                                                                                else if tag == 824 {
                                                                                  var value:ForeignEnum = ForeignEnum.fromRaw(input.readEnum())!
                                                                                  if ForeignEnum.ForeignEnumIsValidValue(value) {
                                                                                       result.unpackedEnum += [value]
                                                                                  } else {
                                                                                       unknownFieldsBuilder.mergeVarintField(103, value:Int64(value.toRaw()))
                                                                                  }
                                                                                }
                                                                                else {
                                                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                          unknownFields = unknownFieldsBuilder.build()
                                                                                          return self
                                                                                      }
                                                                                }
                                                                                }
                                                                             }
                                                                          }

                                                                          func == (lhs: TestPackedExtensions, rhs: TestPackedExtensions) -> Bool {
                                                                                if (lhs === rhs) {
                                                                                  return true
                                                                                }
                                                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
                                                                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                          }
                                                                          class TestPackedExtensions : ExtendableMessage {
                                                                            override init() {
                                                                                 super.init()
                                                                            }
                                                                            override func isInitialized() -> Bool {
                                                                              if !extensionsAreInitialized() {
                                                                                return false
                                                                              }
                                                                              return true
                                                                            }
                                                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                              writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
                                                                              unknownFields.writeToCodedOutputStream(output)
                                                                            }
                                                                            override func serializedSize() -> Int32 {
                                                                              var size:Int32 = memoizedSerializedSize
                                                                              if size != -1 {
                                                                                return size
                                                                              }

                                                                              size = 0
                                                                              size += extensionsSerializedSize()
                                                                              size += unknownFields.serializedSize()
                                                                              memoizedSerializedSize = size
                                                                              return size
                                                                            }
                                                                            class func parseFromData(data:[Byte]) -> TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromData(data).build()
                                                                            }
                                                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                            }
                                                                            class func parseFromInputStream(input:NSInputStream) -> TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromInputStream(input).build()
                                                                            }
                                                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                            }
                                                                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromCodedInputStream(input).build()
                                                                            }
                                                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedExtensions {
                                                                              return TestPackedExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                            }
                                                                            class func builder() -> TestPackedExtensionsBuilder {
                                                                              return TestPackedExtensionsBuilder()
                                                                            }
                                                                            class func builderWithPrototype(prototype:TestPackedExtensions) -> TestPackedExtensionsBuilder {
                                                                              return TestPackedExtensions.builder().mergeFrom(prototype)
                                                                            }
                                                                            func builder() -> TestPackedExtensionsBuilder {
                                                                              return TestPackedExtensions.builder()
                                                                            }
                                                                            func toBuilder() -> TestPackedExtensionsBuilder {
                                                                              return TestPackedExtensions.builderWithPrototype(self)
                                                                            }
                                                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                                                              writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
                                                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                            }
                                                                            override var hashValue:Int {
                                                                             get {
                                                                                  var hashCode:Int = 7
                                                                                  hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
                                                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                  return hashCode
                                                                                }
                                                                              }
                                                                            }

                                                                            class TestPackedExtensionsBuilder : ExtendableMessageBuilder {
                                                                            private var result:TestPackedExtensions

                                                                            override init () {
                                                                               result = TestPackedExtensions()
                                                                            }
                                                                            override var internalGetResult:ExtendableMessage {
                                                                                 get {
                                                                                     return result
                                                                                 }
                                                                            }
                                                                            override func clear() -> TestPackedExtensionsBuilder {
                                                                              result = TestPackedExtensions()
                                                                              return self
                                                                            }
                                                                            override func clone() -> TestPackedExtensionsBuilder {
                                                                              return TestPackedExtensions.builderWithPrototype(result)
                                                                            }
                                                                            func build() -> TestPackedExtensions {
                                                                                 checkInitialized()
                                                                                 return buildPartial()
                                                                            }
                                                                            func buildPartial() -> TestPackedExtensions {
                                                                              var returnMe:TestPackedExtensions = result
                                                                              return returnMe
                                                                            }
                                                                            func mergeFrom(other:TestPackedExtensions) -> TestPackedExtensionsBuilder {
                                                                              if (other == TestPackedExtensions()) {
                                                                                return self
                                                                              }
                                                                              mergeExtensionFields(other)
                                                                                mergeUnknownFields(other.unknownFields)
                                                                              return self
                                                                            }
                                                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestPackedExtensionsBuilder {
                                                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                            }
                                                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedExtensionsBuilder {
                                                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                              while (true) {
                                                                                var tag:Int32 = input.readTag()
                                                                                  if tag == 0 {
                                                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                                                       return self}
                                                                                  else {
                                                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                            unknownFields = unknownFieldsBuilder.build()
                                                                                            return self
                                                                                        }
                                                                                  }
                                                                                  }
                                                                               }
                                                                            }

                                                                            func == (lhs: TestDynamicExtensions, rhs: TestDynamicExtensions) -> Bool {
                                                                                  if (lhs === rhs) {
                                                                                    return true
                                                                                  }
                                                                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                  fieldCheck = fieldCheck && (lhs.hasScalarExtension == rhs.hasScalarExtension) && (!lhs.hasScalarExtension || lhs.scalarExtension == rhs.scalarExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.hasEnumExtension == rhs.hasEnumExtension) && (!lhs.hasEnumExtension || lhs.enumExtension == rhs.enumExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.hasDynamicEnumExtension == rhs.hasDynamicEnumExtension) && (!lhs.hasDynamicEnumExtension || lhs.dynamicEnumExtension == rhs.dynamicEnumExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.hasMessageExtension == rhs.hasMessageExtension) && (!lhs.hasMessageExtension || lhs.messageExtension == rhs.messageExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.hasDynamicMessageExtension == rhs.hasDynamicMessageExtension) && (!lhs.hasDynamicMessageExtension || lhs.dynamicMessageExtension == rhs.dynamicMessageExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.repeatedExtension == rhs.repeatedExtension)
                                                                                   fieldCheck = fieldCheck && (lhs.packedExtension == rhs.packedExtension)
                                                                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                            }
                                                                            class TestDynamicExtensions : GeneratedMessage {
                                                                              private(set) var hasScalarExtension:Bool = false
                                                                              private(set) var scalarExtension:UInt32 = 0

                                                                              private(set) var enumExtension:ForeignEnum = .ForeignEnumForeignFoo
                                                                              private(set) var hasEnumExtension:Bool = false
                                                                              private(set) var dynamicEnumExtension:TestDynamicExtensionsDynamicEnumType = .TestDynamicExtensionsDynamicEnumTypeDynamicFoo
                                                                              private(set) var hasDynamicEnumExtension:Bool = false
                                                                              private(set) var hasMessageExtension:Bool = false
                                                                              private(set) var messageExtension:ForeignMessage = ForeignMessage()
                                                                              private(set) var hasDynamicMessageExtension:Bool = false
                                                                              private(set) var dynamicMessageExtension:TestDynamicExtensionsDynamicMessageType = TestDynamicExtensionsDynamicMessageType()
                                                                              private(set) var repeatedExtension:[String] = [String]()
                                                                              private(set) var packedExtension:[Int32] = [Int32]()
                                                                              private var packedExtensionMemoizedSerializedSize:Int32 = -1
                                                                              override init() {
                                                                                   super.init()
                                                                              }
                                                                              override func isInitialized() -> Bool {
                                                                                return true
                                                                              }
                                                                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                if hasScalarExtension {
                                                                                  output.writeFixed32(2000, value:scalarExtension)
                                                                                }
                                                                                if hasEnumExtension {
                                                                                  output.writeEnum(2001, value:enumExtension.toRaw())
                                                                                }
                                                                                if hasDynamicEnumExtension {
                                                                                  output.writeEnum(2002, value:dynamicEnumExtension.toRaw())
                                                                                }
                                                                                if hasMessageExtension {
                                                                                  output.writeMessage(2003, value:messageExtension)
                                                                                }
                                                                                if hasDynamicMessageExtension {
                                                                                  output.writeMessage(2004, value:dynamicMessageExtension)
                                                                                }
                                                                                if !repeatedExtension.isEmpty {
                                                                                  for value in repeatedExtension {
                                                                                    output.writeString(2005, value:value)
                                                                                  }
                                                                                }
                                                                                if !packedExtension.isEmpty {
                                                                                  output.writeRawVarint32(16050)
                                                                                  output.writeRawVarint32(packedExtensionMemoizedSerializedSize)
                                                                                  for value in packedExtension {
                                                                                    output.writeSInt32NoTag(value)
                                                                                  }
                                                                                }
                                                                                unknownFields.writeToCodedOutputStream(output)
                                                                              }
                                                                              override func serializedSize() -> Int32 {
                                                                                var size:Int32 = memoizedSerializedSize
                                                                                if size != -1 {
                                                                                  return size
                                                                                }

                                                                                size = 0
                                                                                if hasScalarExtension {
                                                                                  size += WireFormat.computeFixed32Size(2000, value:scalarExtension)
                                                                                }
                                                                                if (hasEnumExtension) {
                                                                                  size += WireFormat.computeEnumSize(2001, value:enumExtension.toRaw())
                                                                                }
                                                                                if (hasDynamicEnumExtension) {
                                                                                  size += WireFormat.computeEnumSize(2002, value:dynamicEnumExtension.toRaw())
                                                                                }
                                                                                if hasMessageExtension {
                                                                                  size += WireFormat.computeMessageSize(2003, value:messageExtension)
                                                                                }
                                                                                if hasDynamicMessageExtension {
                                                                                  size += WireFormat.computeMessageSize(2004, value:dynamicMessageExtension)
                                                                                }
                                                                                  var dataSizeRepeatedExtension:Int32 = 0
                                                                                  for element in repeatedExtension {
                                                                                      dataSizeRepeatedExtension += WireFormat.computeStringSizeNoTag(element)
                                                                                  }
                                                                                  size += dataSizeRepeatedExtension
                                                                                  size += 2 * Int32(repeatedExtension.count)
                                                                                  var dataSizePackedExtension:Int32 = 0
                                                                                  for element in packedExtension {
                                                                                      dataSizePackedExtension += WireFormat.computeSInt32SizeNoTag(element)
                                                                                  }
                                                                                  size += dataSizePackedExtension
                                                                                  if !packedExtension.isEmpty {
                                                                                    size += 2
                                                                                    size += WireFormat.computeInt32SizeNoTag(dataSizePackedExtension)
                                                                                  }
                                                                                  packedExtensionMemoizedSerializedSize = dataSizePackedExtension
                                                                                size += unknownFields.serializedSize()
                                                                                memoizedSerializedSize = size
                                                                                return size
                                                                              }
                                                                              class func parseFromData(data:[Byte]) -> TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromData(data).build()
                                                                              }
                                                                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                              }
                                                                              class func parseFromInputStream(input:NSInputStream) -> TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromInputStream(input).build()
                                                                              }
                                                                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                              }
                                                                              class func parseFromCodedInputStream(input:CodedInputStream) -> TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromCodedInputStream(input).build()
                                                                              }
                                                                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDynamicExtensions {
                                                                                return TestDynamicExtensions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                              }
                                                                              class func builder() -> TestDynamicExtensionsBuilder {
                                                                                return TestDynamicExtensionsBuilder()
                                                                              }
                                                                              class func builderWithPrototype(prototype:TestDynamicExtensions) -> TestDynamicExtensionsBuilder {
                                                                                return TestDynamicExtensions.builder().mergeFrom(prototype)
                                                                              }
                                                                              func builder() -> TestDynamicExtensionsBuilder {
                                                                                return TestDynamicExtensions.builder()
                                                                              }
                                                                              func toBuilder() -> TestDynamicExtensionsBuilder {
                                                                                return TestDynamicExtensions.builderWithPrototype(self)
                                                                              }
                                                                              override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                if hasScalarExtension {
                                                                                  output += "\(indent) scalarExtension: \(scalarExtension) \n"
                                                                                }
                                                                                if (hasEnumExtension) {
                                                                                  output += "\(indent) enumExtension: \(enumExtension.toRaw())\n"
                                                                                }
                                                                                if (hasDynamicEnumExtension) {
                                                                                  output += "\(indent) dynamicEnumExtension: \(dynamicEnumExtension.toRaw())\n"
                                                                                }
                                                                                if hasMessageExtension {
                                                                                  output += "\(indent) messageExtension {\n"
                                                                                  messageExtension.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                  output += "\(indent) }\n"
                                                                                }
                                                                                if hasDynamicMessageExtension {
                                                                                  output += "\(indent) dynamicMessageExtension {\n"
                                                                                  dynamicMessageExtension.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                  output += "\(indent) }\n"
                                                                                }
                                                                                var repeatedExtensionElementIndex:Int = 0
                                                                                for element in repeatedExtension  {
                                                                                    output += "\(indent) repeatedExtension[\(repeatedExtensionElementIndex)]: \(element)\n"
                                                                                    repeatedExtensionElementIndex++
                                                                                }
                                                                                var packedExtensionElementIndex:Int = 0
                                                                                for element in packedExtension  {
                                                                                    output += "\(indent) packedExtension[\(packedExtensionElementIndex)]: \(element)\n"
                                                                                    packedExtensionElementIndex++
                                                                                }
                                                                                unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                              }
                                                                              override var hashValue:Int {
                                                                               get {
                                                                                    var hashCode:Int = 7
                                                                                    if hasScalarExtension {
                                                                                       hashCode = (hashCode &* 31) &+ scalarExtension.hashValue
                                                                                    }
                                                                                    if hasEnumExtension {
                                                                                       hashCode = (hashCode &* 31) &+ Int(enumExtension.toRaw())
                                                                                    }
                                                                                    if hasDynamicEnumExtension {
                                                                                       hashCode = (hashCode &* 31) &+ Int(dynamicEnumExtension.toRaw())
                                                                                    }
                                                                                    if hasMessageExtension {
                                                                                      hashCode = (hashCode &* 31) &+ messageExtension.hashValue
                                                                                    }
                                                                                    if hasDynamicMessageExtension {
                                                                                      hashCode = (hashCode &* 31) &+ dynamicMessageExtension.hashValue
                                                                                    }
                                                                                    for element in repeatedExtension {
                                                                                        hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                    }
                                                                                    for element in packedExtension {
                                                                                        hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                    }
                                                                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                    return hashCode
                                                                                  }
                                                                                }
                                                                              }

                                                                              enum TestDynamicExtensionsDynamicEnumType:Int32 {
                                                                                case TestDynamicExtensionsDynamicEnumTypeDynamicFoo = 2200
                                                                                case TestDynamicExtensionsDynamicEnumTypeDynamicBar = 2201
                                                                                case TestDynamicExtensionsDynamicEnumTypeDynamicBaz = 2202

                                                                                static func TestDynamicExtensionsDynamicEnumTypeIsValidValue(value:TestDynamicExtensionsDynamicEnumType) ->Bool {
                                                                                  switch value {
                                                                                    case .TestDynamicExtensionsDynamicEnumTypeDynamicFoo, .TestDynamicExtensionsDynamicEnumTypeDynamicBar, .TestDynamicExtensionsDynamicEnumTypeDynamicBaz:
                                                                                      return true;
                                                                                    default:
                                                                                      return false;
                                                                                  }
                                                                                }
                                                                              }

                                                                              func == (lhs: TestDynamicExtensionsDynamicMessageType, rhs: TestDynamicExtensionsDynamicMessageType) -> Bool {
                                                                                    if (lhs === rhs) {
                                                                                      return true
                                                                                    }
                                                                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                    fieldCheck = fieldCheck && (lhs.hasDynamicField == rhs.hasDynamicField) && (!lhs.hasDynamicField || lhs.dynamicField == rhs.dynamicField)
                                                                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                              }
                                                                              class TestDynamicExtensionsDynamicMessageType : GeneratedMessage {
                                                                                private(set) var hasDynamicField:Bool = false
                                                                                private(set) var dynamicField:Int32 = 0

                                                                                override init() {
                                                                                     super.init()
                                                                                }
                                                                                override func isInitialized() -> Bool {
                                                                                  return true
                                                                                }
                                                                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                  if hasDynamicField {
                                                                                    output.writeInt32(2100, value:dynamicField)
                                                                                  }
                                                                                  unknownFields.writeToCodedOutputStream(output)
                                                                                }
                                                                                override func serializedSize() -> Int32 {
                                                                                  var size:Int32 = memoizedSerializedSize
                                                                                  if size != -1 {
                                                                                    return size
                                                                                  }

                                                                                  size = 0
                                                                                  if hasDynamicField {
                                                                                    size += WireFormat.computeInt32Size(2100, value:dynamicField)
                                                                                  }
                                                                                  size += unknownFields.serializedSize()
                                                                                  memoizedSerializedSize = size
                                                                                  return size
                                                                                }
                                                                                class func parseFromData(data:[Byte]) -> TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromData(data).build()
                                                                                }
                                                                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                }
                                                                                class func parseFromInputStream(input:NSInputStream) -> TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromInputStream(input).build()
                                                                                }
                                                                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                }
                                                                                class func parseFromCodedInputStream(input:CodedInputStream) -> TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromCodedInputStream(input).build()
                                                                                }
                                                                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDynamicExtensionsDynamicMessageType {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                }
                                                                                class func builder() -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  return TestDynamicExtensionsDynamicMessageTypeBuilder()
                                                                                }
                                                                                class func builderWithPrototype(prototype:TestDynamicExtensionsDynamicMessageType) -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder().mergeFrom(prototype)
                                                                                }
                                                                                func builder() -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builder()
                                                                                }
                                                                                func toBuilder() -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builderWithPrototype(self)
                                                                                }
                                                                                override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                  if hasDynamicField {
                                                                                    output += "\(indent) dynamicField: \(dynamicField) \n"
                                                                                  }
                                                                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                }
                                                                                override var hashValue:Int {
                                                                                 get {
                                                                                      var hashCode:Int = 7
                                                                                      if hasDynamicField {
                                                                                         hashCode = (hashCode &* 31) &+ dynamicField.hashValue
                                                                                      }
                                                                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                      return hashCode
                                                                                    }
                                                                                  }
                                                                                }

                                                                                class TestDynamicExtensionsDynamicMessageTypeBuilder : GeneratedMessageBuilder {
                                                                                private var result:TestDynamicExtensionsDynamicMessageType

                                                                                override init () {
                                                                                   result = TestDynamicExtensionsDynamicMessageType()
                                                                                }
                                                                                var hasDynamicField:Bool {
                                                                                     get {
                                                                                          return result.hasDynamicField
                                                                                     }
                                                                                }
                                                                                var dynamicField:Int32 {
                                                                                     get {
                                                                                          return result.dynamicField
                                                                                     }
                                                                                     set (value) {
                                                                                         result.hasDynamicField = true
                                                                                         result.dynamicField = value
                                                                                     }
                                                                                }
                                                                                func clearDynamicField() -> TestDynamicExtensionsDynamicMessageTypeBuilder{
                                                                                     result.hasDynamicField = false
                                                                                     result.dynamicField = 0
                                                                                     return self
                                                                                }
                                                                                override var internalGetResult:GeneratedMessage {
                                                                                     get {
                                                                                        return result
                                                                                     }
                                                                                }
                                                                                override func clear() -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  result = TestDynamicExtensionsDynamicMessageType()
                                                                                  return self
                                                                                }
                                                                                override func clone() -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  return TestDynamicExtensionsDynamicMessageType.builderWithPrototype(result)
                                                                                }
                                                                                func build() -> TestDynamicExtensionsDynamicMessageType {
                                                                                     checkInitialized()
                                                                                     return buildPartial()
                                                                                }
                                                                                func buildPartial() -> TestDynamicExtensionsDynamicMessageType {
                                                                                  var returnMe:TestDynamicExtensionsDynamicMessageType = result
                                                                                  return returnMe
                                                                                }
                                                                                func mergeFrom(other:TestDynamicExtensionsDynamicMessageType) -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  if (other == TestDynamicExtensionsDynamicMessageType()) {
                                                                                    return self
                                                                                  }
                                                                                  if other.hasDynamicField {
                                                                                       dynamicField = other.dynamicField
                                                                                  }
                                                                                    mergeUnknownFields(other.unknownFields)
                                                                                  return self
                                                                                }
                                                                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                }
                                                                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDynamicExtensionsDynamicMessageTypeBuilder {
                                                                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                  while (true) {
                                                                                    var tag:Int32 = input.readTag()
                                                                                      if tag == 0 {
                                                                                           self.unknownFields = unknownFieldsBuilder.build()
                                                                                           return self}
                                                                                      else if tag == 16800 {
                                                                                        dynamicField = input.readInt32()
                                                                                      }
                                                                                      else {
                                                                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                unknownFields = unknownFieldsBuilder.build()
                                                                                                return self
                                                                                            }
                                                                                      }
                                                                                      }
                                                                                   }
                                                                                }

                                                                                class TestDynamicExtensionsBuilder : GeneratedMessageBuilder {
                                                                                private var result:TestDynamicExtensions

                                                                                override init () {
                                                                                   result = TestDynamicExtensions()
                                                                                }
                                                                                var hasScalarExtension:Bool {
                                                                                     get {
                                                                                          return result.hasScalarExtension
                                                                                     }
                                                                                }
                                                                                var scalarExtension:UInt32 {
                                                                                     get {
                                                                                          return result.scalarExtension
                                                                                     }
                                                                                     set (value) {
                                                                                         result.hasScalarExtension = true
                                                                                         result.scalarExtension = value
                                                                                     }
                                                                                }
                                                                                func clearScalarExtension() -> TestDynamicExtensionsBuilder{
                                                                                     result.hasScalarExtension = false
                                                                                     result.scalarExtension = 0
                                                                                     return self
                                                                                }
                                                                                  var hasEnumExtension:Bool{
                                                                                      get {
                                                                                          return result.hasEnumExtension
                                                                                      }
                                                                                  }
                                                                                  var enumExtension:ForeignEnum {
                                                                                      get {
                                                                                          return result.enumExtension
                                                                                      }
                                                                                      set (value) {
                                                                                          result.hasEnumExtension = true
                                                                                          result.enumExtension = value
                                                                                      }
                                                                                  }
                                                                                  func clearEnumExtension() -> TestDynamicExtensionsBuilder {
                                                                                     result.hasEnumExtension = false
                                                                                     result.enumExtension = .ForeignEnumForeignFoo
                                                                                     return self
                                                                                  }
                                                                                  var hasDynamicEnumExtension:Bool{
                                                                                      get {
                                                                                          return result.hasDynamicEnumExtension
                                                                                      }
                                                                                  }
                                                                                  var dynamicEnumExtension:TestDynamicExtensionsDynamicEnumType {
                                                                                      get {
                                                                                          return result.dynamicEnumExtension
                                                                                      }
                                                                                      set (value) {
                                                                                          result.hasDynamicEnumExtension = true
                                                                                          result.dynamicEnumExtension = value
                                                                                      }
                                                                                  }
                                                                                  func clearDynamicEnumExtension() -> TestDynamicExtensionsBuilder {
                                                                                     result.hasDynamicEnumExtension = false
                                                                                     result.dynamicEnumExtension = .TestDynamicExtensionsDynamicEnumTypeDynamicFoo
                                                                                     return self
                                                                                  }
                                                                                var hasMessageExtension:Bool {
                                                                                     get {
                                                                                         return result.hasMessageExtension
                                                                                     }
                                                                                }
                                                                                var messageExtension:ForeignMessage {
                                                                                     get {
                                                                                         return result.messageExtension     }
                                                                                     set (value) {
                                                                                         result.hasMessageExtension = true
                                                                                         result.messageExtension = value
                                                                                     }
                                                                                }
                                                                                func setMessageExtensionBuilder(builderForValue:ForeignMessageBuilder) -> TestDynamicExtensionsBuilder {
                                                                                  messageExtension = builderForValue.build()
                                                                                  return self
                                                                                }
                                                                                func mergeMessageExtension(value:ForeignMessage) -> TestDynamicExtensionsBuilder {
                                                                                  if (result.hasMessageExtension && result.messageExtension != ForeignMessage()) {
                                                                                    result.messageExtension = ForeignMessage.builderWithPrototype(result.messageExtension).mergeFrom(value).buildPartial()
                                                                                  } else {
                                                                                    result.messageExtension = value
                                                                                  }
                                                                                  result.hasMessageExtension = true
                                                                                  return self
                                                                                }
                                                                                func clearMessageExtension() -> TestDynamicExtensionsBuilder {
                                                                                  result.hasMessageExtension = false
                                                                                  result.messageExtension = ForeignMessage()
                                                                                  return self
                                                                                }
                                                                                var hasDynamicMessageExtension:Bool {
                                                                                     get {
                                                                                         return result.hasDynamicMessageExtension
                                                                                     }
                                                                                }
                                                                                var dynamicMessageExtension:TestDynamicExtensionsDynamicMessageType {
                                                                                     get {
                                                                                         return result.dynamicMessageExtension     }
                                                                                     set (value) {
                                                                                         result.hasDynamicMessageExtension = true
                                                                                         result.dynamicMessageExtension = value
                                                                                     }
                                                                                }
                                                                                func setDynamicMessageExtensionBuilder(builderForValue:TestDynamicExtensionsDynamicMessageTypeBuilder) -> TestDynamicExtensionsBuilder {
                                                                                  dynamicMessageExtension = builderForValue.build()
                                                                                  return self
                                                                                }
                                                                                func mergeDynamicMessageExtension(value:TestDynamicExtensionsDynamicMessageType) -> TestDynamicExtensionsBuilder {
                                                                                  if (result.hasDynamicMessageExtension && result.dynamicMessageExtension != TestDynamicExtensionsDynamicMessageType()) {
                                                                                    result.dynamicMessageExtension = TestDynamicExtensionsDynamicMessageType.builderWithPrototype(result.dynamicMessageExtension).mergeFrom(value).buildPartial()
                                                                                  } else {
                                                                                    result.dynamicMessageExtension = value
                                                                                  }
                                                                                  result.hasDynamicMessageExtension = true
                                                                                  return self
                                                                                }
                                                                                func clearDynamicMessageExtension() -> TestDynamicExtensionsBuilder {
                                                                                  result.hasDynamicMessageExtension = false
                                                                                  result.dynamicMessageExtension = TestDynamicExtensionsDynamicMessageType()
                                                                                  return self
                                                                                }
                                                                                var repeatedExtension:[String] {
                                                                                     get {
                                                                                         return result.repeatedExtension
                                                                                     }
                                                                                     set (array) {
                                                                                         result.repeatedExtension = array
                                                                                     }
                                                                                }
                                                                                func clearRepeatedExtension() -> TestDynamicExtensionsBuilder {
                                                                                   result.repeatedExtension.removeAll(keepCapacity: false)
                                                                                   return self
                                                                                }
                                                                                var packedExtension:[Int32] {
                                                                                     get {
                                                                                         return result.packedExtension
                                                                                     }
                                                                                     set (array) {
                                                                                         result.packedExtension = array
                                                                                     }
                                                                                }
                                                                                func clearPackedExtension() -> TestDynamicExtensionsBuilder {
                                                                                   result.packedExtension.removeAll(keepCapacity: false)
                                                                                   return self
                                                                                }
                                                                                override var internalGetResult:GeneratedMessage {
                                                                                     get {
                                                                                        return result
                                                                                     }
                                                                                }
                                                                                override func clear() -> TestDynamicExtensionsBuilder {
                                                                                  result = TestDynamicExtensions()
                                                                                  return self
                                                                                }
                                                                                override func clone() -> TestDynamicExtensionsBuilder {
                                                                                  return TestDynamicExtensions.builderWithPrototype(result)
                                                                                }
                                                                                func build() -> TestDynamicExtensions {
                                                                                     checkInitialized()
                                                                                     return buildPartial()
                                                                                }
                                                                                func buildPartial() -> TestDynamicExtensions {
                                                                                  var returnMe:TestDynamicExtensions = result
                                                                                  return returnMe
                                                                                }
                                                                                func mergeFrom(other:TestDynamicExtensions) -> TestDynamicExtensionsBuilder {
                                                                                  if (other == TestDynamicExtensions()) {
                                                                                    return self
                                                                                  }
                                                                                  if other.hasScalarExtension {
                                                                                       scalarExtension = other.scalarExtension
                                                                                  }
                                                                                  if other.hasEnumExtension {
                                                                                       enumExtension = other.enumExtension
                                                                                  }
                                                                                  if other.hasDynamicEnumExtension {
                                                                                       dynamicEnumExtension = other.dynamicEnumExtension
                                                                                  }
                                                                                  if (other.hasMessageExtension) {
                                                                                      mergeMessageExtension(other.messageExtension)
                                                                                  }
                                                                                  if (other.hasDynamicMessageExtension) {
                                                                                      mergeDynamicMessageExtension(other.dynamicMessageExtension)
                                                                                  }
                                                                                  if !other.repeatedExtension.isEmpty {
                                                                                      result.repeatedExtension += other.repeatedExtension
                                                                                  }
                                                                                  if !other.packedExtension.isEmpty {
                                                                                      result.packedExtension += other.packedExtension
                                                                                  }
                                                                                    mergeUnknownFields(other.unknownFields)
                                                                                  return self
                                                                                }
                                                                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDynamicExtensionsBuilder {
                                                                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                }
                                                                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDynamicExtensionsBuilder {
                                                                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                  while (true) {
                                                                                    var tag:Int32 = input.readTag()
                                                                                      if tag == 0 {
                                                                                           self.unknownFields = unknownFieldsBuilder.build()
                                                                                           return self}
                                                                                      else if tag == 16005 {
                                                                                        scalarExtension = input.readFixed32()
                                                                                      }
                                                                                      else if tag == 16008 {
                                                                                        var value = input.readEnum()
                                                                                        var enums:ForeignEnum = ForeignEnum.fromRaw(value)!
                                                                                        if (ForeignEnum.ForeignEnumIsValidValue(enums)) {
                                                                                             enumExtension = enums
                                                                                        } else {
                                                                                             unknownFieldsBuilder.mergeVarintField(2001, value:Int64(value))
                                                                                        }
                                                                                      }
                                                                                      else if tag == 16016 {
                                                                                        var value = input.readEnum()
                                                                                        var enums:TestDynamicExtensionsDynamicEnumType = TestDynamicExtensionsDynamicEnumType.fromRaw(value)!
                                                                                        if (TestDynamicExtensionsDynamicEnumType.TestDynamicExtensionsDynamicEnumTypeIsValidValue(enums)) {
                                                                                             dynamicEnumExtension = enums
                                                                                        } else {
                                                                                             unknownFieldsBuilder.mergeVarintField(2002, value:Int64(value))
                                                                                        }
                                                                                      }
                                                                                      else if tag == 16026 {
                                                                                        var subBuilder:ForeignMessageBuilder = ForeignMessage.builder()
                                                                                        if hasMessageExtension {
                                                                                          subBuilder.mergeFrom(messageExtension)
                                                                                        }
                                                                                        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                        messageExtension = subBuilder.buildPartial()
                                                                                      }
                                                                                      else if tag == 16034 {
                                                                                        var subBuilder:TestDynamicExtensionsDynamicMessageTypeBuilder = TestDynamicExtensionsDynamicMessageType.builder()
                                                                                        if hasDynamicMessageExtension {
                                                                                          subBuilder.mergeFrom(dynamicMessageExtension)
                                                                                        }
                                                                                        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                        dynamicMessageExtension = subBuilder.buildPartial()
                                                                                      }
                                                                                      else if tag == 16042 {
                                                                                        repeatedExtension += [input.readString()]
                                                                                      }
                                                                                      else if tag == 16050 {
                                                                                        var length:Int32 = input.readRawVarint32()
                                                                                        var limit:Int32 = input.pushLimit(length)
                                                                                        while (input.bytesUntilLimit() > 0) {
                                                                                          result.packedExtension += [input.readSInt32()]
                                                                                        }
                                                                                        input.popLimit(limit)
                                                                                      }
                                                                                      else {
                                                                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                unknownFields = unknownFieldsBuilder.build()
                                                                                                return self
                                                                                            }
                                                                                      }
                                                                                      }
                                                                                   }
                                                                                }

                                                                                func == (lhs: TestRepeatedScalarDifferentTagSizes, rhs: TestRepeatedScalarDifferentTagSizes) -> Bool {
                                                                                      if (lhs === rhs) {
                                                                                        return true
                                                                                      }
                                                                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                      fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
                                                                                       fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
                                                                                       fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
                                                                                       fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
                                                                                       fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
                                                                                       fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
                                                                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                }
                                                                                class TestRepeatedScalarDifferentTagSizes : GeneratedMessage {
                                                                                  private(set) var repeatedFixed32:[UInt32] = [UInt32]()
                                                                                  private(set) var repeatedInt32:[Int32] = [Int32]()
                                                                                  private(set) var repeatedFixed64:[UInt64] = [UInt64]()
                                                                                  private(set) var repeatedInt64:[Int64] = [Int64]()
                                                                                  private(set) var repeatedFloat:[Float] = [Float]()
                                                                                  private(set) var repeatedUint64:[UInt64] = [UInt64]()
                                                                                  override init() {
                                                                                       super.init()
                                                                                  }
                                                                                  override func isInitialized() -> Bool {
                                                                                    return true
                                                                                  }
                                                                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                    if !repeatedFixed32.isEmpty {
                                                                                      for value in repeatedFixed32 {
                                                                                        output.writeFixed32(12, value:value)
                                                                                      }
                                                                                    }
                                                                                    if !repeatedInt32.isEmpty {
                                                                                      for value in repeatedInt32 {
                                                                                        output.writeInt32(13, value:value)
                                                                                      }
                                                                                    }
                                                                                    if !repeatedFixed64.isEmpty {
                                                                                      for value in repeatedFixed64 {
                                                                                        output.writeFixed64(2046, value:value)
                                                                                      }
                                                                                    }
                                                                                    if !repeatedInt64.isEmpty {
                                                                                      for value in repeatedInt64 {
                                                                                        output.writeInt64(2047, value:value)
                                                                                      }
                                                                                    }
                                                                                    if !repeatedFloat.isEmpty {
                                                                                      for value in repeatedFloat {
                                                                                        output.writeFloat(262142, value:value)
                                                                                      }
                                                                                    }
                                                                                    if !repeatedUint64.isEmpty {
                                                                                      for value in repeatedUint64 {
                                                                                        output.writeUInt64(262143, value:value)
                                                                                      }
                                                                                    }
                                                                                    unknownFields.writeToCodedOutputStream(output)
                                                                                  }
                                                                                  override func serializedSize() -> Int32 {
                                                                                    var size:Int32 = memoizedSerializedSize
                                                                                    if size != -1 {
                                                                                      return size
                                                                                    }

                                                                                    size = 0
                                                                                      var dataSizeRepeatedFixed32:Int32 = 0
                                                                                      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
                                                                                      size += dataSizeRepeatedFixed32
                                                                                      size += 1 * Int32(repeatedFixed32.count)
                                                                                      var dataSizeRepeatedInt32:Int32 = 0
                                                                                      for element in repeatedInt32 {
                                                                                          dataSizeRepeatedInt32 += WireFormat.computeInt32SizeNoTag(element)
                                                                                      }
                                                                                      size += dataSizeRepeatedInt32
                                                                                      size += 1 * Int32(repeatedInt32.count)
                                                                                      var dataSizeRepeatedFixed64:Int32 = 0
                                                                                      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
                                                                                      size += dataSizeRepeatedFixed64
                                                                                      size += 2 * Int32(repeatedFixed64.count)
                                                                                      var dataSizeRepeatedInt64:Int32 = 0
                                                                                      for element in repeatedInt64 {
                                                                                          dataSizeRepeatedInt64 += WireFormat.computeInt64SizeNoTag(element)
                                                                                      }
                                                                                      size += dataSizeRepeatedInt64
                                                                                      size += 2 * Int32(repeatedInt64.count)
                                                                                      var dataSizeRepeatedFloat:Int32 = 0
                                                                                      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
                                                                                      size += dataSizeRepeatedFloat
                                                                                      size += 3 * Int32(repeatedFloat.count)
                                                                                      var dataSizeRepeatedUint64:Int32 = 0
                                                                                      for element in repeatedUint64 {
                                                                                          dataSizeRepeatedUint64 += WireFormat.computeUInt64SizeNoTag(element)
                                                                                      }
                                                                                      size += dataSizeRepeatedUint64
                                                                                      size += 3 * Int32(repeatedUint64.count)
                                                                                    size += unknownFields.serializedSize()
                                                                                    memoizedSerializedSize = size
                                                                                    return size
                                                                                  }
                                                                                  class func parseFromData(data:[Byte]) -> TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromData(data).build()
                                                                                  }
                                                                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                  }
                                                                                  class func parseFromInputStream(input:NSInputStream) -> TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromInputStream(input).build()
                                                                                  }
                                                                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                  }
                                                                                  class func parseFromCodedInputStream(input:CodedInputStream) -> TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromCodedInputStream(input).build()
                                                                                  }
                                                                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRepeatedScalarDifferentTagSizes {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                  }
                                                                                  class func builder() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    return TestRepeatedScalarDifferentTagSizesBuilder()
                                                                                  }
                                                                                  class func builderWithPrototype(prototype:TestRepeatedScalarDifferentTagSizes) -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder().mergeFrom(prototype)
                                                                                  }
                                                                                  func builder() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builder()
                                                                                  }
                                                                                  func toBuilder() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builderWithPrototype(self)
                                                                                  }
                                                                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                    var repeatedFixed32ElementIndex:Int = 0
                                                                                    for element in repeatedFixed32  {
                                                                                        output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(element)\n"
                                                                                        repeatedFixed32ElementIndex++
                                                                                    }
                                                                                    var repeatedInt32ElementIndex:Int = 0
                                                                                    for element in repeatedInt32  {
                                                                                        output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(element)\n"
                                                                                        repeatedInt32ElementIndex++
                                                                                    }
                                                                                    var repeatedFixed64ElementIndex:Int = 0
                                                                                    for element in repeatedFixed64  {
                                                                                        output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(element)\n"
                                                                                        repeatedFixed64ElementIndex++
                                                                                    }
                                                                                    var repeatedInt64ElementIndex:Int = 0
                                                                                    for element in repeatedInt64  {
                                                                                        output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(element)\n"
                                                                                        repeatedInt64ElementIndex++
                                                                                    }
                                                                                    var repeatedFloatElementIndex:Int = 0
                                                                                    for element in repeatedFloat  {
                                                                                        output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(element)\n"
                                                                                        repeatedFloatElementIndex++
                                                                                    }
                                                                                    var repeatedUint64ElementIndex:Int = 0
                                                                                    for element in repeatedUint64  {
                                                                                        output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(element)\n"
                                                                                        repeatedUint64ElementIndex++
                                                                                    }
                                                                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                  }
                                                                                  override var hashValue:Int {
                                                                                   get {
                                                                                        var hashCode:Int = 7
                                                                                        for element in repeatedFixed32 {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        for element in repeatedInt32 {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        for element in repeatedFixed64 {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        for element in repeatedInt64 {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        for element in repeatedFloat {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        for element in repeatedUint64 {
                                                                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                        }
                                                                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                        return hashCode
                                                                                      }
                                                                                    }
                                                                                  }

                                                                                  class TestRepeatedScalarDifferentTagSizesBuilder : GeneratedMessageBuilder {
                                                                                  private var result:TestRepeatedScalarDifferentTagSizes

                                                                                  override init () {
                                                                                     result = TestRepeatedScalarDifferentTagSizes()
                                                                                  }
                                                                                  var repeatedFixed32:[UInt32] {
                                                                                       get {
                                                                                           return result.repeatedFixed32
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedFixed32 = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedFixed32() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedFixed32.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  var repeatedInt32:[Int32] {
                                                                                       get {
                                                                                           return result.repeatedInt32
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedInt32 = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedInt32() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedInt32.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  var repeatedFixed64:[UInt64] {
                                                                                       get {
                                                                                           return result.repeatedFixed64
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedFixed64 = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedFixed64() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedFixed64.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  var repeatedInt64:[Int64] {
                                                                                       get {
                                                                                           return result.repeatedInt64
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedInt64 = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedInt64() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedInt64.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  var repeatedFloat:[Float] {
                                                                                       get {
                                                                                           return result.repeatedFloat
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedFloat = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedFloat() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedFloat.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  var repeatedUint64:[UInt64] {
                                                                                       get {
                                                                                           return result.repeatedUint64
                                                                                       }
                                                                                       set (array) {
                                                                                           result.repeatedUint64 = array
                                                                                       }
                                                                                  }
                                                                                  func clearRepeatedUint64() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                     result.repeatedUint64.removeAll(keepCapacity: false)
                                                                                     return self
                                                                                  }
                                                                                  override var internalGetResult:GeneratedMessage {
                                                                                       get {
                                                                                          return result
                                                                                       }
                                                                                  }
                                                                                  override func clear() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    result = TestRepeatedScalarDifferentTagSizes()
                                                                                    return self
                                                                                  }
                                                                                  override func clone() -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    return TestRepeatedScalarDifferentTagSizes.builderWithPrototype(result)
                                                                                  }
                                                                                  func build() -> TestRepeatedScalarDifferentTagSizes {
                                                                                       checkInitialized()
                                                                                       return buildPartial()
                                                                                  }
                                                                                  func buildPartial() -> TestRepeatedScalarDifferentTagSizes {
                                                                                    var returnMe:TestRepeatedScalarDifferentTagSizes = result
                                                                                    return returnMe
                                                                                  }
                                                                                  func mergeFrom(other:TestRepeatedScalarDifferentTagSizes) -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    if (other == TestRepeatedScalarDifferentTagSizes()) {
                                                                                      return self
                                                                                    }
                                                                                    if !other.repeatedFixed32.isEmpty {
                                                                                        result.repeatedFixed32 += other.repeatedFixed32
                                                                                    }
                                                                                    if !other.repeatedInt32.isEmpty {
                                                                                        result.repeatedInt32 += other.repeatedInt32
                                                                                    }
                                                                                    if !other.repeatedFixed64.isEmpty {
                                                                                        result.repeatedFixed64 += other.repeatedFixed64
                                                                                    }
                                                                                    if !other.repeatedInt64.isEmpty {
                                                                                        result.repeatedInt64 += other.repeatedInt64
                                                                                    }
                                                                                    if !other.repeatedFloat.isEmpty {
                                                                                        result.repeatedFloat += other.repeatedFloat
                                                                                    }
                                                                                    if !other.repeatedUint64.isEmpty {
                                                                                        result.repeatedUint64 += other.repeatedUint64
                                                                                    }
                                                                                      mergeUnknownFields(other.unknownFields)
                                                                                    return self
                                                                                  }
                                                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                  }
                                                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestRepeatedScalarDifferentTagSizesBuilder {
                                                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                    while (true) {
                                                                                      var tag:Int32 = input.readTag()
                                                                                        if tag == 0 {
                                                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                                                             return self}
                                                                                        else if tag == 101 {
                                                                                          repeatedFixed32 += [input.readFixed32()]
                                                                                        }
                                                                                        else if tag == 104 {
                                                                                          repeatedInt32 += [input.readInt32()]
                                                                                        }
                                                                                        else if tag == 16369 {
                                                                                          repeatedFixed64 += [input.readFixed64()]
                                                                                        }
                                                                                        else if tag == 16376 {
                                                                                          repeatedInt64 += [input.readInt64()]
                                                                                        }
                                                                                        else if tag == 2097141 {
                                                                                          repeatedFloat += [input.readFloat()]
                                                                                        }
                                                                                        else if tag == 2097144 {
                                                                                          repeatedUint64 += [input.readUInt64()]
                                                                                        }
                                                                                        else {
                                                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                                                  return self
                                                                                              }
                                                                                        }
                                                                                        }
                                                                                     }
                                                                                  }

                                                                                  func == (lhs: TestParsingMerge, rhs: TestParsingMerge) -> Bool {
                                                                                        if (lhs === rhs) {
                                                                                          return true
                                                                                        }
                                                                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                        fieldCheck = fieldCheck && (lhs.hasRequiredAllTypes == rhs.hasRequiredAllTypes) && (!lhs.hasRequiredAllTypes || lhs.requiredAllTypes == rhs.requiredAllTypes)
                                                                                         fieldCheck = fieldCheck && (lhs.hasOptionalAllTypes == rhs.hasOptionalAllTypes) && (!lhs.hasOptionalAllTypes || lhs.optionalAllTypes == rhs.optionalAllTypes)
                                                                                         fieldCheck = fieldCheck && (lhs.repeatedAllTypes == rhs.repeatedAllTypes)
                                                                                         fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
                                                                                         fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
                                                                                         fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                                                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                  }
                                                                                  class TestParsingMerge : ExtendableMessage {
                                                                                    private(set) var hasRequiredAllTypes:Bool = false
                                                                                    private(set) var requiredAllTypes:TestAllTypes = TestAllTypes()
                                                                                    private(set) var hasOptionalAllTypes:Bool = false
                                                                                    private(set) var optionalAllTypes:TestAllTypes = TestAllTypes()
                                                                                    private(set) var hasOptionalGroup:Bool = false
                                                                                    private(set) var optionalGroup:TestParsingMergeOptionalGroup = TestParsingMergeOptionalGroup()
                                                                                    var optionalExt:ExtensionField {
                                                                                         get {
                                                                                             return TestParsingMerge_optionalExt
                                                                                         }
                                                                                    }
                                                                                    var repeatedExt:ExtensionField {
                                                                                         get {
                                                                                             return TestParsingMerge_repeatedExt
                                                                                         }
                                                                                    }
                                                                                    private(set) var repeatedAllTypes:[TestAllTypes]  = [TestAllTypes]()
                                                                                    private(set) var repeatedGroup:[TestParsingMergeRepeatedGroup]  = [TestParsingMergeRepeatedGroup]()
                                                                                    override init() {
                                                                                         super.init()
                                                                                    }
                                                                                    override func isInitialized() -> Bool {
                                                                                      if !hasRequiredAllTypes {
                                                                                        return false
                                                                                      }
                                                                                      if !extensionsAreInitialized() {
                                                                                        return false
                                                                                      }
                                                                                      return true
                                                                                    }
                                                                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                      if hasRequiredAllTypes {
                                                                                        output.writeMessage(1, value:requiredAllTypes)
                                                                                      }
                                                                                      if hasOptionalAllTypes {
                                                                                        output.writeMessage(2, value:optionalAllTypes)
                                                                                      }
                                                                                      for element in repeatedAllTypes {
                                                                                          output.writeMessage(3, value:element)
                                                                                      }
                                                                                      if hasOptionalGroup {
                                                                                        output.writeGroup(10, value:optionalGroup)
                                                                                      }
                                                                                      for element in repeatedGroup {
                                                                                          output.writeGroup(20, value:element)
                                                                                      }
                                                                                      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                                                                      unknownFields.writeToCodedOutputStream(output)
                                                                                    }
                                                                                    override func serializedSize() -> Int32 {
                                                                                      var size:Int32 = memoizedSerializedSize
                                                                                      if size != -1 {
                                                                                        return size
                                                                                      }

                                                                                      size = 0
                                                                                      if hasRequiredAllTypes {
                                                                                        size += WireFormat.computeMessageSize(1, value:requiredAllTypes)
                                                                                      }
                                                                                      if hasOptionalAllTypes {
                                                                                        size += WireFormat.computeMessageSize(2, value:optionalAllTypes)
                                                                                      }
                                                                                      for element in repeatedAllTypes {
                                                                                          size += WireFormat.computeMessageSize(3, value:element)
                                                                                      }
                                                                                      if hasOptionalGroup {
                                                                                        size += WireFormat.computeGroupSize(10, value:optionalGroup)
                                                                                      }
                                                                                      for element in repeatedGroup {
                                                                                          size += WireFormat.computeGroupSize(20, value:element)
                                                                                      }
                                                                                      size += extensionsSerializedSize()
                                                                                      size += unknownFields.serializedSize()
                                                                                      memoizedSerializedSize = size
                                                                                      return size
                                                                                    }
                                                                                    class func parseFromData(data:[Byte]) -> TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromData(data).build()
                                                                                    }
                                                                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                    }
                                                                                    class func parseFromInputStream(input:NSInputStream) -> TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromInputStream(input).build()
                                                                                    }
                                                                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                    }
                                                                                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromCodedInputStream(input).build()
                                                                                    }
                                                                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMerge {
                                                                                      return TestParsingMerge.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                    }
                                                                                    class func builder() -> TestParsingMergeBuilder {
                                                                                      return TestParsingMergeBuilder()
                                                                                    }
                                                                                    class func builderWithPrototype(prototype:TestParsingMerge) -> TestParsingMergeBuilder {
                                                                                      return TestParsingMerge.builder().mergeFrom(prototype)
                                                                                    }
                                                                                    func builder() -> TestParsingMergeBuilder {
                                                                                      return TestParsingMerge.builder()
                                                                                    }
                                                                                    func toBuilder() -> TestParsingMergeBuilder {
                                                                                      return TestParsingMerge.builderWithPrototype(self)
                                                                                    }
                                                                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                      if hasRequiredAllTypes {
                                                                                        output += "\(indent) requiredAllTypes {\n"
                                                                                        requiredAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                        output += "\(indent) }\n"
                                                                                      }
                                                                                      if hasOptionalAllTypes {
                                                                                        output += "\(indent) optionalAllTypes {\n"
                                                                                        optionalAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                        output += "\(indent) }\n"
                                                                                      }
                                                                                      var repeatedAllTypesElementIndex:Int = 0
                                                                                      for element in repeatedAllTypes {
                                                                                          output += "\(indent) repeatedAllTypes[\(repeatedAllTypesElementIndex)] {\n"
                                                                                          element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                          output += "\(indent)}\n"
                                                                                          repeatedAllTypesElementIndex++
                                                                                      }
                                                                                      if hasOptionalGroup {
                                                                                        output += "\(indent) optionalGroup {\n"
                                                                                        optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                        output += "\(indent) }\n"
                                                                                      }
                                                                                      var repeatedGroupElementIndex:Int = 0
                                                                                      for element in repeatedGroup {
                                                                                          output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
                                                                                          element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                          output += "\(indent)}\n"
                                                                                          repeatedGroupElementIndex++
                                                                                      }
                                                                                      writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                                                                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                    }
                                                                                    override var hashValue:Int {
                                                                                     get {
                                                                                          var hashCode:Int = 7
                                                                                          if hasRequiredAllTypes {
                                                                                            hashCode = (hashCode &* 31) &+ requiredAllTypes.hashValue
                                                                                          }
                                                                                          if hasOptionalAllTypes {
                                                                                            hashCode = (hashCode &* 31) &+ optionalAllTypes.hashValue
                                                                                          }
                                                                                          for element in repeatedAllTypes {
                                                                                              hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                          }
                                                                                          if hasOptionalGroup {
                                                                                            hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
                                                                                          }
                                                                                          for element in repeatedGroup {
                                                                                              hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                          }
                                                                                          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                                                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                          return hashCode
                                                                                        }
                                                                                      }
                                                                                    }

                                                                                    func == (lhs: TestParsingMergeRepeatedFieldsGenerator, rhs: TestParsingMergeRepeatedFieldsGenerator) -> Bool {
                                                                                          if (lhs === rhs) {
                                                                                            return true
                                                                                          }
                                                                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                          fieldCheck = fieldCheck && (lhs.field1 == rhs.field1)
                                                                                           fieldCheck = fieldCheck && (lhs.field2 == rhs.field2)
                                                                                           fieldCheck = fieldCheck && (lhs.field3 == rhs.field3)
                                                                                           fieldCheck = fieldCheck && (lhs.group1 == rhs.group1)
                                                                                           fieldCheck = fieldCheck && (lhs.group2 == rhs.group2)
                                                                                           fieldCheck = fieldCheck && (lhs.ext1 == rhs.ext1)
                                                                                           fieldCheck = fieldCheck && (lhs.ext2 == rhs.ext2)
                                                                                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                    }
                                                                                    class TestParsingMergeRepeatedFieldsGenerator : GeneratedMessage {
                                                                                      private(set) var field1:[TestAllTypes]  = [TestAllTypes]()
                                                                                      private(set) var field2:[TestAllTypes]  = [TestAllTypes]()
                                                                                      private(set) var field3:[TestAllTypes]  = [TestAllTypes]()
                                                                                      private(set) var group1:[TestParsingMergeRepeatedFieldsGeneratorGroup1]  = [TestParsingMergeRepeatedFieldsGeneratorGroup1]()
                                                                                      private(set) var group2:[TestParsingMergeRepeatedFieldsGeneratorGroup2]  = [TestParsingMergeRepeatedFieldsGeneratorGroup2]()
                                                                                      private(set) var ext1:[TestAllTypes]  = [TestAllTypes]()
                                                                                      private(set) var ext2:[TestAllTypes]  = [TestAllTypes]()
                                                                                      override init() {
                                                                                           super.init()
                                                                                      }
                                                                                      override func isInitialized() -> Bool {
                                                                                        return true
                                                                                      }
                                                                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                        for element in field1 {
                                                                                            output.writeMessage(1, value:element)
                                                                                        }
                                                                                        for element in field2 {
                                                                                            output.writeMessage(2, value:element)
                                                                                        }
                                                                                        for element in field3 {
                                                                                            output.writeMessage(3, value:element)
                                                                                        }
                                                                                        for element in group1 {
                                                                                            output.writeGroup(10, value:element)
                                                                                        }
                                                                                        for element in group2 {
                                                                                            output.writeGroup(20, value:element)
                                                                                        }
                                                                                        for element in ext1 {
                                                                                            output.writeMessage(1000, value:element)
                                                                                        }
                                                                                        for element in ext2 {
                                                                                            output.writeMessage(1001, value:element)
                                                                                        }
                                                                                        unknownFields.writeToCodedOutputStream(output)
                                                                                      }
                                                                                      override func serializedSize() -> Int32 {
                                                                                        var size:Int32 = memoizedSerializedSize
                                                                                        if size != -1 {
                                                                                          return size
                                                                                        }

                                                                                        size = 0
                                                                                        for element in field1 {
                                                                                            size += WireFormat.computeMessageSize(1, value:element)
                                                                                        }
                                                                                        for element in field2 {
                                                                                            size += WireFormat.computeMessageSize(2, value:element)
                                                                                        }
                                                                                        for element in field3 {
                                                                                            size += WireFormat.computeMessageSize(3, value:element)
                                                                                        }
                                                                                        for element in group1 {
                                                                                            size += WireFormat.computeGroupSize(10, value:element)
                                                                                        }
                                                                                        for element in group2 {
                                                                                            size += WireFormat.computeGroupSize(20, value:element)
                                                                                        }
                                                                                        for element in ext1 {
                                                                                            size += WireFormat.computeMessageSize(1000, value:element)
                                                                                        }
                                                                                        for element in ext2 {
                                                                                            size += WireFormat.computeMessageSize(1001, value:element)
                                                                                        }
                                                                                        size += unknownFields.serializedSize()
                                                                                        memoizedSerializedSize = size
                                                                                        return size
                                                                                      }
                                                                                      class func parseFromData(data:[Byte]) -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromData(data).build()
                                                                                      }
                                                                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                      }
                                                                                      class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromInputStream(input).build()
                                                                                      }
                                                                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                      }
                                                                                      class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input).build()
                                                                                      }
                                                                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                      }
                                                                                      class func builder() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                        return TestParsingMergeRepeatedFieldsGeneratorBuilder()
                                                                                      }
                                                                                      class func builderWithPrototype(prototype:TestParsingMergeRepeatedFieldsGenerator) -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder().mergeFrom(prototype)
                                                                                      }
                                                                                      func builder() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builder()
                                                                                      }
                                                                                      func toBuilder() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                        return TestParsingMergeRepeatedFieldsGenerator.builderWithPrototype(self)
                                                                                      }
                                                                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                        var field1ElementIndex:Int = 0
                                                                                        for element in field1 {
                                                                                            output += "\(indent) field1[\(field1ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            field1ElementIndex++
                                                                                        }
                                                                                        var field2ElementIndex:Int = 0
                                                                                        for element in field2 {
                                                                                            output += "\(indent) field2[\(field2ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            field2ElementIndex++
                                                                                        }
                                                                                        var field3ElementIndex:Int = 0
                                                                                        for element in field3 {
                                                                                            output += "\(indent) field3[\(field3ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            field3ElementIndex++
                                                                                        }
                                                                                        var group1ElementIndex:Int = 0
                                                                                        for element in group1 {
                                                                                            output += "\(indent) group1[\(group1ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            group1ElementIndex++
                                                                                        }
                                                                                        var group2ElementIndex:Int = 0
                                                                                        for element in group2 {
                                                                                            output += "\(indent) group2[\(group2ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            group2ElementIndex++
                                                                                        }
                                                                                        var ext1ElementIndex:Int = 0
                                                                                        for element in ext1 {
                                                                                            output += "\(indent) ext1[\(ext1ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            ext1ElementIndex++
                                                                                        }
                                                                                        var ext2ElementIndex:Int = 0
                                                                                        for element in ext2 {
                                                                                            output += "\(indent) ext2[\(ext2ElementIndex)] {\n"
                                                                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent)}\n"
                                                                                            ext2ElementIndex++
                                                                                        }
                                                                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                      }
                                                                                      override var hashValue:Int {
                                                                                       get {
                                                                                            var hashCode:Int = 7
                                                                                            for element in field1 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in field2 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in field3 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in group1 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in group2 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in ext1 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            for element in ext2 {
                                                                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                                                                            }
                                                                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                            return hashCode
                                                                                          }
                                                                                        }
                                                                                      }

                                                                                      func == (lhs: TestParsingMergeRepeatedFieldsGeneratorGroup1, rhs: TestParsingMergeRepeatedFieldsGeneratorGroup1) -> Bool {
                                                                                            if (lhs === rhs) {
                                                                                              return true
                                                                                            }
                                                                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                            fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
                                                                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                      }
                                                                                      class TestParsingMergeRepeatedFieldsGeneratorGroup1 : GeneratedMessage {
                                                                                        private(set) var hasField1:Bool = false
                                                                                        private(set) var field1:TestAllTypes = TestAllTypes()
                                                                                        override init() {
                                                                                             super.init()
                                                                                        }
                                                                                        override func isInitialized() -> Bool {
                                                                                          return true
                                                                                        }
                                                                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                          if hasField1 {
                                                                                            output.writeMessage(11, value:field1)
                                                                                          }
                                                                                          unknownFields.writeToCodedOutputStream(output)
                                                                                        }
                                                                                        override func serializedSize() -> Int32 {
                                                                                          var size:Int32 = memoizedSerializedSize
                                                                                          if size != -1 {
                                                                                            return size
                                                                                          }

                                                                                          size = 0
                                                                                          if hasField1 {
                                                                                            size += WireFormat.computeMessageSize(11, value:field1)
                                                                                          }
                                                                                          size += unknownFields.serializedSize()
                                                                                          memoizedSerializedSize = size
                                                                                          return size
                                                                                        }
                                                                                        class func parseFromData(data:[Byte]) -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromData(data).build()
                                                                                        }
                                                                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                        }
                                                                                        class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromInputStream(input).build()
                                                                                        }
                                                                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                        }
                                                                                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromCodedInputStream(input).build()
                                                                                        }
                                                                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                        }
                                                                                        class func builder() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1Builder()
                                                                                        }
                                                                                        class func builderWithPrototype(prototype:TestParsingMergeRepeatedFieldsGeneratorGroup1) -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder().mergeFrom(prototype)
                                                                                        }
                                                                                        func builder() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builder()
                                                                                        }
                                                                                        func toBuilder() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builderWithPrototype(self)
                                                                                        }
                                                                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                          if hasField1 {
                                                                                            output += "\(indent) field1 {\n"
                                                                                            field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                            output += "\(indent) }\n"
                                                                                          }
                                                                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                        }
                                                                                        override var hashValue:Int {
                                                                                         get {
                                                                                              var hashCode:Int = 7
                                                                                              if hasField1 {
                                                                                                hashCode = (hashCode &* 31) &+ field1.hashValue
                                                                                              }
                                                                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                              return hashCode
                                                                                            }
                                                                                          }
                                                                                        }

                                                                                        class TestParsingMergeRepeatedFieldsGeneratorGroup1Builder : GeneratedMessageBuilder {
                                                                                        private var result:TestParsingMergeRepeatedFieldsGeneratorGroup1

                                                                                        override init () {
                                                                                           result = TestParsingMergeRepeatedFieldsGeneratorGroup1()
                                                                                        }
                                                                                        var hasField1:Bool {
                                                                                             get {
                                                                                                 return result.hasField1
                                                                                             }
                                                                                        }
                                                                                        var field1:TestAllTypes {
                                                                                             get {
                                                                                                 return result.field1     }
                                                                                             set (value) {
                                                                                                 result.hasField1 = true
                                                                                                 result.field1 = value
                                                                                             }
                                                                                        }
                                                                                        func setField1Builder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          field1 = builderForValue.build()
                                                                                          return self
                                                                                        }
                                                                                        func mergeField1(value:TestAllTypes) -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          if (result.hasField1 && result.field1 != TestAllTypes()) {
                                                                                            result.field1 = TestAllTypes.builderWithPrototype(result.field1).mergeFrom(value).buildPartial()
                                                                                          } else {
                                                                                            result.field1 = value
                                                                                          }
                                                                                          result.hasField1 = true
                                                                                          return self
                                                                                        }
                                                                                        func clearField1() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          result.hasField1 = false
                                                                                          result.field1 = TestAllTypes()
                                                                                          return self
                                                                                        }
                                                                                        override var internalGetResult:GeneratedMessage {
                                                                                             get {
                                                                                                return result
                                                                                             }
                                                                                        }
                                                                                        override func clear() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          result = TestParsingMergeRepeatedFieldsGeneratorGroup1()
                                                                                          return self
                                                                                        }
                                                                                        override func clone() -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          return TestParsingMergeRepeatedFieldsGeneratorGroup1.builderWithPrototype(result)
                                                                                        }
                                                                                        func build() -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                             checkInitialized()
                                                                                             return buildPartial()
                                                                                        }
                                                                                        func buildPartial() -> TestParsingMergeRepeatedFieldsGeneratorGroup1 {
                                                                                          var returnMe:TestParsingMergeRepeatedFieldsGeneratorGroup1 = result
                                                                                          return returnMe
                                                                                        }
                                                                                        func mergeFrom(other:TestParsingMergeRepeatedFieldsGeneratorGroup1) -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          if (other == TestParsingMergeRepeatedFieldsGeneratorGroup1()) {
                                                                                            return self
                                                                                          }
                                                                                          if (other.hasField1) {
                                                                                              mergeField1(other.field1)
                                                                                          }
                                                                                            mergeUnknownFields(other.unknownFields)
                                                                                          return self
                                                                                        }
                                                                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                        }
                                                                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup1Builder {
                                                                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                          while (true) {
                                                                                            var tag:Int32 = input.readTag()
                                                                                              if tag == 0 {
                                                                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                                                                   return self}
                                                                                              else if tag == 90 {
                                                                                                var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                if hasField1 {
                                                                                                  subBuilder.mergeFrom(field1)
                                                                                                }
                                                                                                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                field1 = subBuilder.buildPartial()
                                                                                              }
                                                                                              else {
                                                                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                        unknownFields = unknownFieldsBuilder.build()
                                                                                                        return self
                                                                                                    }
                                                                                              }
                                                                                              }
                                                                                           }
                                                                                        }

                                                                                        func == (lhs: TestParsingMergeRepeatedFieldsGeneratorGroup2, rhs: TestParsingMergeRepeatedFieldsGeneratorGroup2) -> Bool {
                                                                                              if (lhs === rhs) {
                                                                                                return true
                                                                                              }
                                                                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                              fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
                                                                                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                        }
                                                                                        class TestParsingMergeRepeatedFieldsGeneratorGroup2 : GeneratedMessage {
                                                                                          private(set) var hasField1:Bool = false
                                                                                          private(set) var field1:TestAllTypes = TestAllTypes()
                                                                                          override init() {
                                                                                               super.init()
                                                                                          }
                                                                                          override func isInitialized() -> Bool {
                                                                                            return true
                                                                                          }
                                                                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                            if hasField1 {
                                                                                              output.writeMessage(21, value:field1)
                                                                                            }
                                                                                            unknownFields.writeToCodedOutputStream(output)
                                                                                          }
                                                                                          override func serializedSize() -> Int32 {
                                                                                            var size:Int32 = memoizedSerializedSize
                                                                                            if size != -1 {
                                                                                              return size
                                                                                            }

                                                                                            size = 0
                                                                                            if hasField1 {
                                                                                              size += WireFormat.computeMessageSize(21, value:field1)
                                                                                            }
                                                                                            size += unknownFields.serializedSize()
                                                                                            memoizedSerializedSize = size
                                                                                            return size
                                                                                          }
                                                                                          class func parseFromData(data:[Byte]) -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromData(data).build()
                                                                                          }
                                                                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                          }
                                                                                          class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromInputStream(input).build()
                                                                                          }
                                                                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                          }
                                                                                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromCodedInputStream(input).build()
                                                                                          }
                                                                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                          }
                                                                                          class func builder() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2Builder()
                                                                                          }
                                                                                          class func builderWithPrototype(prototype:TestParsingMergeRepeatedFieldsGeneratorGroup2) -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder().mergeFrom(prototype)
                                                                                          }
                                                                                          func builder() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builder()
                                                                                          }
                                                                                          func toBuilder() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builderWithPrototype(self)
                                                                                          }
                                                                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                            if hasField1 {
                                                                                              output += "\(indent) field1 {\n"
                                                                                              field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                              output += "\(indent) }\n"
                                                                                            }
                                                                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                          }
                                                                                          override var hashValue:Int {
                                                                                           get {
                                                                                                var hashCode:Int = 7
                                                                                                if hasField1 {
                                                                                                  hashCode = (hashCode &* 31) &+ field1.hashValue
                                                                                                }
                                                                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                return hashCode
                                                                                              }
                                                                                            }
                                                                                          }

                                                                                          class TestParsingMergeRepeatedFieldsGeneratorGroup2Builder : GeneratedMessageBuilder {
                                                                                          private var result:TestParsingMergeRepeatedFieldsGeneratorGroup2

                                                                                          override init () {
                                                                                             result = TestParsingMergeRepeatedFieldsGeneratorGroup2()
                                                                                          }
                                                                                          var hasField1:Bool {
                                                                                               get {
                                                                                                   return result.hasField1
                                                                                               }
                                                                                          }
                                                                                          var field1:TestAllTypes {
                                                                                               get {
                                                                                                   return result.field1     }
                                                                                               set (value) {
                                                                                                   result.hasField1 = true
                                                                                                   result.field1 = value
                                                                                               }
                                                                                          }
                                                                                          func setField1Builder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            field1 = builderForValue.build()
                                                                                            return self
                                                                                          }
                                                                                          func mergeField1(value:TestAllTypes) -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            if (result.hasField1 && result.field1 != TestAllTypes()) {
                                                                                              result.field1 = TestAllTypes.builderWithPrototype(result.field1).mergeFrom(value).buildPartial()
                                                                                            } else {
                                                                                              result.field1 = value
                                                                                            }
                                                                                            result.hasField1 = true
                                                                                            return self
                                                                                          }
                                                                                          func clearField1() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            result.hasField1 = false
                                                                                            result.field1 = TestAllTypes()
                                                                                            return self
                                                                                          }
                                                                                          override var internalGetResult:GeneratedMessage {
                                                                                               get {
                                                                                                  return result
                                                                                               }
                                                                                          }
                                                                                          override func clear() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            result = TestParsingMergeRepeatedFieldsGeneratorGroup2()
                                                                                            return self
                                                                                          }
                                                                                          override func clone() -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            return TestParsingMergeRepeatedFieldsGeneratorGroup2.builderWithPrototype(result)
                                                                                          }
                                                                                          func build() -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                               checkInitialized()
                                                                                               return buildPartial()
                                                                                          }
                                                                                          func buildPartial() -> TestParsingMergeRepeatedFieldsGeneratorGroup2 {
                                                                                            var returnMe:TestParsingMergeRepeatedFieldsGeneratorGroup2 = result
                                                                                            return returnMe
                                                                                          }
                                                                                          func mergeFrom(other:TestParsingMergeRepeatedFieldsGeneratorGroup2) -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            if (other == TestParsingMergeRepeatedFieldsGeneratorGroup2()) {
                                                                                              return self
                                                                                            }
                                                                                            if (other.hasField1) {
                                                                                                mergeField1(other.field1)
                                                                                            }
                                                                                              mergeUnknownFields(other.unknownFields)
                                                                                            return self
                                                                                          }
                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                          }
                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorGroup2Builder {
                                                                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                            while (true) {
                                                                                              var tag:Int32 = input.readTag()
                                                                                                if tag == 0 {
                                                                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                                                                     return self}
                                                                                                else if tag == 170 {
                                                                                                  var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                  if hasField1 {
                                                                                                    subBuilder.mergeFrom(field1)
                                                                                                  }
                                                                                                  input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                  field1 = subBuilder.buildPartial()
                                                                                                }
                                                                                                else {
                                                                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                          unknownFields = unknownFieldsBuilder.build()
                                                                                                          return self
                                                                                                      }
                                                                                                }
                                                                                                }
                                                                                             }
                                                                                          }

                                                                                          class TestParsingMergeRepeatedFieldsGeneratorBuilder : GeneratedMessageBuilder {
                                                                                          private var result:TestParsingMergeRepeatedFieldsGenerator

                                                                                          override init () {
                                                                                             result = TestParsingMergeRepeatedFieldsGenerator()
                                                                                          }
                                                                                          var field1:[TestAllTypes] {
                                                                                               get {
                                                                                                   return result.field1
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.field1 = value
                                                                                               }
                                                                                          }
                                                                                          func clearField1() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.field1.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var field2:[TestAllTypes] {
                                                                                               get {
                                                                                                   return result.field2
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.field2 = value
                                                                                               }
                                                                                          }
                                                                                          func clearField2() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.field2.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var field3:[TestAllTypes] {
                                                                                               get {
                                                                                                   return result.field3
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.field3 = value
                                                                                               }
                                                                                          }
                                                                                          func clearField3() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.field3.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var group1:[TestParsingMergeRepeatedFieldsGeneratorGroup1] {
                                                                                               get {
                                                                                                   return result.group1
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.group1 = value
                                                                                               }
                                                                                          }
                                                                                          func clearGroup1() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.group1.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var group2:[TestParsingMergeRepeatedFieldsGeneratorGroup2] {
                                                                                               get {
                                                                                                   return result.group2
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.group2 = value
                                                                                               }
                                                                                          }
                                                                                          func clearGroup2() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.group2.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var ext1:[TestAllTypes] {
                                                                                               get {
                                                                                                   return result.ext1
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.ext1 = value
                                                                                               }
                                                                                          }
                                                                                          func clearExt1() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.ext1.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          var ext2:[TestAllTypes] {
                                                                                               get {
                                                                                                   return result.ext2
                                                                                               }
                                                                                               set (value) {
                                                                                                   result.ext2 = value
                                                                                               }
                                                                                          }
                                                                                          func clearExt2() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result.ext2.removeAll(keepCapacity: false)
                                                                                            return self
                                                                                          }
                                                                                          override var internalGetResult:GeneratedMessage {
                                                                                               get {
                                                                                                  return result
                                                                                               }
                                                                                          }
                                                                                          override func clear() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            result = TestParsingMergeRepeatedFieldsGenerator()
                                                                                            return self
                                                                                          }
                                                                                          override func clone() -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            return TestParsingMergeRepeatedFieldsGenerator.builderWithPrototype(result)
                                                                                          }
                                                                                          func build() -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                               checkInitialized()
                                                                                               return buildPartial()
                                                                                          }
                                                                                          func buildPartial() -> TestParsingMergeRepeatedFieldsGenerator {
                                                                                            var returnMe:TestParsingMergeRepeatedFieldsGenerator = result
                                                                                            return returnMe
                                                                                          }
                                                                                          func mergeFrom(other:TestParsingMergeRepeatedFieldsGenerator) -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            if (other == TestParsingMergeRepeatedFieldsGenerator()) {
                                                                                              return self
                                                                                            }
                                                                                            if !other.field1.isEmpty  {
                                                                                               result.field1 += other.field1
                                                                                            }
                                                                                            if !other.field2.isEmpty  {
                                                                                               result.field2 += other.field2
                                                                                            }
                                                                                            if !other.field3.isEmpty  {
                                                                                               result.field3 += other.field3
                                                                                            }
                                                                                            if !other.group1.isEmpty  {
                                                                                               result.group1 += other.group1
                                                                                            }
                                                                                            if !other.group2.isEmpty  {
                                                                                               result.group2 += other.group2
                                                                                            }
                                                                                            if !other.ext1.isEmpty  {
                                                                                               result.ext1 += other.ext1
                                                                                            }
                                                                                            if !other.ext2.isEmpty  {
                                                                                               result.ext2 += other.ext2
                                                                                            }
                                                                                              mergeUnknownFields(other.unknownFields)
                                                                                            return self
                                                                                          }
                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                          }
                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedFieldsGeneratorBuilder {
                                                                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                            while (true) {
                                                                                              var tag:Int32 = input.readTag()
                                                                                                if tag == 0 {
                                                                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                                                                     return self}
                                                                                                else if tag == 10 {
                                                                                                  var subBuilder = TestAllTypes.builder()
                                                                                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  field1 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 18 {
                                                                                                  var subBuilder = TestAllTypes.builder()
                                                                                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  field2 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 26 {
                                                                                                  var subBuilder = TestAllTypes.builder()
                                                                                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  field3 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 83 {
                                                                                                  var subBuilder = TestParsingMergeRepeatedFieldsGeneratorGroup1.builder()
                                                                                                  input.readGroup(10,builder:subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  group1 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 163 {
                                                                                                  var subBuilder = TestParsingMergeRepeatedFieldsGeneratorGroup2.builder()
                                                                                                  input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  group2 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 8002 {
                                                                                                  var subBuilder = TestAllTypes.builder()
                                                                                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  ext1 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else if tag == 8010 {
                                                                                                  var subBuilder = TestAllTypes.builder()
                                                                                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                  ext2 += [subBuilder.buildPartial()]
                                                                                                }
                                                                                                else {
                                                                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                          unknownFields = unknownFieldsBuilder.build()
                                                                                                          return self
                                                                                                      }
                                                                                                }
                                                                                                }
                                                                                             }
                                                                                          }

                                                                                          func == (lhs: TestParsingMergeOptionalGroup, rhs: TestParsingMergeOptionalGroup) -> Bool {
                                                                                                if (lhs === rhs) {
                                                                                                  return true
                                                                                                }
                                                                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                fieldCheck = fieldCheck && (lhs.hasOptionalGroupAllTypes == rhs.hasOptionalGroupAllTypes) && (!lhs.hasOptionalGroupAllTypes || lhs.optionalGroupAllTypes == rhs.optionalGroupAllTypes)
                                                                                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                          }
                                                                                          class TestParsingMergeOptionalGroup : GeneratedMessage {
                                                                                            private(set) var hasOptionalGroupAllTypes:Bool = false
                                                                                            private(set) var optionalGroupAllTypes:TestAllTypes = TestAllTypes()
                                                                                            override init() {
                                                                                                 super.init()
                                                                                            }
                                                                                            override func isInitialized() -> Bool {
                                                                                              return true
                                                                                            }
                                                                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                              if hasOptionalGroupAllTypes {
                                                                                                output.writeMessage(11, value:optionalGroupAllTypes)
                                                                                              }
                                                                                              unknownFields.writeToCodedOutputStream(output)
                                                                                            }
                                                                                            override func serializedSize() -> Int32 {
                                                                                              var size:Int32 = memoizedSerializedSize
                                                                                              if size != -1 {
                                                                                                return size
                                                                                              }

                                                                                              size = 0
                                                                                              if hasOptionalGroupAllTypes {
                                                                                                size += WireFormat.computeMessageSize(11, value:optionalGroupAllTypes)
                                                                                              }
                                                                                              size += unknownFields.serializedSize()
                                                                                              memoizedSerializedSize = size
                                                                                              return size
                                                                                            }
                                                                                            class func parseFromData(data:[Byte]) -> TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromData(data).build()
                                                                                            }
                                                                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                            }
                                                                                            class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromInputStream(input).build()
                                                                                            }
                                                                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                            }
                                                                                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromCodedInputStream(input).build()
                                                                                            }
                                                                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeOptionalGroup {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                            }
                                                                                            class func builder() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              return TestParsingMergeOptionalGroupBuilder()
                                                                                            }
                                                                                            class func builderWithPrototype(prototype:TestParsingMergeOptionalGroup) -> TestParsingMergeOptionalGroupBuilder {
                                                                                              return TestParsingMergeOptionalGroup.builder().mergeFrom(prototype)
                                                                                            }
                                                                                            func builder() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              return TestParsingMergeOptionalGroup.builder()
                                                                                            }
                                                                                            func toBuilder() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              return TestParsingMergeOptionalGroup.builderWithPrototype(self)
                                                                                            }
                                                                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                              if hasOptionalGroupAllTypes {
                                                                                                output += "\(indent) optionalGroupAllTypes {\n"
                                                                                                optionalGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                                output += "\(indent) }\n"
                                                                                              }
                                                                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                            }
                                                                                            override var hashValue:Int {
                                                                                             get {
                                                                                                  var hashCode:Int = 7
                                                                                                  if hasOptionalGroupAllTypes {
                                                                                                    hashCode = (hashCode &* 31) &+ optionalGroupAllTypes.hashValue
                                                                                                  }
                                                                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                  return hashCode
                                                                                                }
                                                                                              }
                                                                                            }

                                                                                            class TestParsingMergeOptionalGroupBuilder : GeneratedMessageBuilder {
                                                                                            private var result:TestParsingMergeOptionalGroup

                                                                                            override init () {
                                                                                               result = TestParsingMergeOptionalGroup()
                                                                                            }
                                                                                            var hasOptionalGroupAllTypes:Bool {
                                                                                                 get {
                                                                                                     return result.hasOptionalGroupAllTypes
                                                                                                 }
                                                                                            }
                                                                                            var optionalGroupAllTypes:TestAllTypes {
                                                                                                 get {
                                                                                                     return result.optionalGroupAllTypes     }
                                                                                                 set (value) {
                                                                                                     result.hasOptionalGroupAllTypes = true
                                                                                                     result.optionalGroupAllTypes = value
                                                                                                 }
                                                                                            }
                                                                                            func setOptionalGroupAllTypesBuilder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeOptionalGroupBuilder {
                                                                                              optionalGroupAllTypes = builderForValue.build()
                                                                                              return self
                                                                                            }
                                                                                            func mergeOptionalGroupAllTypes(value:TestAllTypes) -> TestParsingMergeOptionalGroupBuilder {
                                                                                              if (result.hasOptionalGroupAllTypes && result.optionalGroupAllTypes != TestAllTypes()) {
                                                                                                result.optionalGroupAllTypes = TestAllTypes.builderWithPrototype(result.optionalGroupAllTypes).mergeFrom(value).buildPartial()
                                                                                              } else {
                                                                                                result.optionalGroupAllTypes = value
                                                                                              }
                                                                                              result.hasOptionalGroupAllTypes = true
                                                                                              return self
                                                                                            }
                                                                                            func clearOptionalGroupAllTypes() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              result.hasOptionalGroupAllTypes = false
                                                                                              result.optionalGroupAllTypes = TestAllTypes()
                                                                                              return self
                                                                                            }
                                                                                            override var internalGetResult:GeneratedMessage {
                                                                                                 get {
                                                                                                    return result
                                                                                                 }
                                                                                            }
                                                                                            override func clear() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              result = TestParsingMergeOptionalGroup()
                                                                                              return self
                                                                                            }
                                                                                            override func clone() -> TestParsingMergeOptionalGroupBuilder {
                                                                                              return TestParsingMergeOptionalGroup.builderWithPrototype(result)
                                                                                            }
                                                                                            func build() -> TestParsingMergeOptionalGroup {
                                                                                                 checkInitialized()
                                                                                                 return buildPartial()
                                                                                            }
                                                                                            func buildPartial() -> TestParsingMergeOptionalGroup {
                                                                                              var returnMe:TestParsingMergeOptionalGroup = result
                                                                                              return returnMe
                                                                                            }
                                                                                            func mergeFrom(other:TestParsingMergeOptionalGroup) -> TestParsingMergeOptionalGroupBuilder {
                                                                                              if (other == TestParsingMergeOptionalGroup()) {
                                                                                                return self
                                                                                              }
                                                                                              if (other.hasOptionalGroupAllTypes) {
                                                                                                  mergeOptionalGroupAllTypes(other.optionalGroupAllTypes)
                                                                                              }
                                                                                                mergeUnknownFields(other.unknownFields)
                                                                                              return self
                                                                                            }
                                                                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeOptionalGroupBuilder {
                                                                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                            }
                                                                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeOptionalGroupBuilder {
                                                                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                              while (true) {
                                                                                                var tag:Int32 = input.readTag()
                                                                                                  if tag == 0 {
                                                                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                                                                       return self}
                                                                                                  else if tag == 90 {
                                                                                                    var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                    if hasOptionalGroupAllTypes {
                                                                                                      subBuilder.mergeFrom(optionalGroupAllTypes)
                                                                                                    }
                                                                                                    input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                    optionalGroupAllTypes = subBuilder.buildPartial()
                                                                                                  }
                                                                                                  else {
                                                                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                            unknownFields = unknownFieldsBuilder.build()
                                                                                                            return self
                                                                                                        }
                                                                                                  }
                                                                                                  }
                                                                                               }
                                                                                            }

                                                                                            func == (lhs: TestParsingMergeRepeatedGroup, rhs: TestParsingMergeRepeatedGroup) -> Bool {
                                                                                                  if (lhs === rhs) {
                                                                                                    return true
                                                                                                  }
                                                                                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                  fieldCheck = fieldCheck && (lhs.hasRepeatedGroupAllTypes == rhs.hasRepeatedGroupAllTypes) && (!lhs.hasRepeatedGroupAllTypes || lhs.repeatedGroupAllTypes == rhs.repeatedGroupAllTypes)
                                                                                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                            }
                                                                                            class TestParsingMergeRepeatedGroup : GeneratedMessage {
                                                                                              private(set) var hasRepeatedGroupAllTypes:Bool = false
                                                                                              private(set) var repeatedGroupAllTypes:TestAllTypes = TestAllTypes()
                                                                                              override init() {
                                                                                                   super.init()
                                                                                              }
                                                                                              override func isInitialized() -> Bool {
                                                                                                return true
                                                                                              }
                                                                                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                if hasRepeatedGroupAllTypes {
                                                                                                  output.writeMessage(21, value:repeatedGroupAllTypes)
                                                                                                }
                                                                                                unknownFields.writeToCodedOutputStream(output)
                                                                                              }
                                                                                              override func serializedSize() -> Int32 {
                                                                                                var size:Int32 = memoizedSerializedSize
                                                                                                if size != -1 {
                                                                                                  return size
                                                                                                }

                                                                                                size = 0
                                                                                                if hasRepeatedGroupAllTypes {
                                                                                                  size += WireFormat.computeMessageSize(21, value:repeatedGroupAllTypes)
                                                                                                }
                                                                                                size += unknownFields.serializedSize()
                                                                                                memoizedSerializedSize = size
                                                                                                return size
                                                                                              }
                                                                                              class func parseFromData(data:[Byte]) -> TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromData(data).build()
                                                                                              }
                                                                                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                              }
                                                                                              class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromInputStream(input).build()
                                                                                              }
                                                                                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                              }
                                                                                              class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromCodedInputStream(input).build()
                                                                                              }
                                                                                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedGroup {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                              }
                                                                                              class func builder() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                return TestParsingMergeRepeatedGroupBuilder()
                                                                                              }
                                                                                              class func builderWithPrototype(prototype:TestParsingMergeRepeatedGroup) -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                return TestParsingMergeRepeatedGroup.builder().mergeFrom(prototype)
                                                                                              }
                                                                                              func builder() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                return TestParsingMergeRepeatedGroup.builder()
                                                                                              }
                                                                                              func toBuilder() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                return TestParsingMergeRepeatedGroup.builderWithPrototype(self)
                                                                                              }
                                                                                              override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                if hasRepeatedGroupAllTypes {
                                                                                                  output += "\(indent) repeatedGroupAllTypes {\n"
                                                                                                  repeatedGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                                                                                  output += "\(indent) }\n"
                                                                                                }
                                                                                                unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                              }
                                                                                              override var hashValue:Int {
                                                                                               get {
                                                                                                    var hashCode:Int = 7
                                                                                                    if hasRepeatedGroupAllTypes {
                                                                                                      hashCode = (hashCode &* 31) &+ repeatedGroupAllTypes.hashValue
                                                                                                    }
                                                                                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                    return hashCode
                                                                                                  }
                                                                                                }
                                                                                              }

                                                                                              class TestParsingMergeRepeatedGroupBuilder : GeneratedMessageBuilder {
                                                                                              private var result:TestParsingMergeRepeatedGroup

                                                                                              override init () {
                                                                                                 result = TestParsingMergeRepeatedGroup()
                                                                                              }
                                                                                              var hasRepeatedGroupAllTypes:Bool {
                                                                                                   get {
                                                                                                       return result.hasRepeatedGroupAllTypes
                                                                                                   }
                                                                                              }
                                                                                              var repeatedGroupAllTypes:TestAllTypes {
                                                                                                   get {
                                                                                                       return result.repeatedGroupAllTypes     }
                                                                                                   set (value) {
                                                                                                       result.hasRepeatedGroupAllTypes = true
                                                                                                       result.repeatedGroupAllTypes = value
                                                                                                   }
                                                                                              }
                                                                                              func setRepeatedGroupAllTypesBuilder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                repeatedGroupAllTypes = builderForValue.build()
                                                                                                return self
                                                                                              }
                                                                                              func mergeRepeatedGroupAllTypes(value:TestAllTypes) -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                if (result.hasRepeatedGroupAllTypes && result.repeatedGroupAllTypes != TestAllTypes()) {
                                                                                                  result.repeatedGroupAllTypes = TestAllTypes.builderWithPrototype(result.repeatedGroupAllTypes).mergeFrom(value).buildPartial()
                                                                                                } else {
                                                                                                  result.repeatedGroupAllTypes = value
                                                                                                }
                                                                                                result.hasRepeatedGroupAllTypes = true
                                                                                                return self
                                                                                              }
                                                                                              func clearRepeatedGroupAllTypes() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                result.hasRepeatedGroupAllTypes = false
                                                                                                result.repeatedGroupAllTypes = TestAllTypes()
                                                                                                return self
                                                                                              }
                                                                                              override var internalGetResult:GeneratedMessage {
                                                                                                   get {
                                                                                                      return result
                                                                                                   }
                                                                                              }
                                                                                              override func clear() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                result = TestParsingMergeRepeatedGroup()
                                                                                                return self
                                                                                              }
                                                                                              override func clone() -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                return TestParsingMergeRepeatedGroup.builderWithPrototype(result)
                                                                                              }
                                                                                              func build() -> TestParsingMergeRepeatedGroup {
                                                                                                   checkInitialized()
                                                                                                   return buildPartial()
                                                                                              }
                                                                                              func buildPartial() -> TestParsingMergeRepeatedGroup {
                                                                                                var returnMe:TestParsingMergeRepeatedGroup = result
                                                                                                return returnMe
                                                                                              }
                                                                                              func mergeFrom(other:TestParsingMergeRepeatedGroup) -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                if (other == TestParsingMergeRepeatedGroup()) {
                                                                                                  return self
                                                                                                }
                                                                                                if (other.hasRepeatedGroupAllTypes) {
                                                                                                    mergeRepeatedGroupAllTypes(other.repeatedGroupAllTypes)
                                                                                                }
                                                                                                  mergeUnknownFields(other.unknownFields)
                                                                                                return self
                                                                                              }
                                                                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeRepeatedGroupBuilder {
                                                                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                              }
                                                                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeRepeatedGroupBuilder {
                                                                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                while (true) {
                                                                                                  var tag:Int32 = input.readTag()
                                                                                                    if tag == 0 {
                                                                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                                                                         return self}
                                                                                                    else if tag == 170 {
                                                                                                      var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                      if hasRepeatedGroupAllTypes {
                                                                                                        subBuilder.mergeFrom(repeatedGroupAllTypes)
                                                                                                      }
                                                                                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                      repeatedGroupAllTypes = subBuilder.buildPartial()
                                                                                                    }
                                                                                                    else {
                                                                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                              unknownFields = unknownFieldsBuilder.build()
                                                                                                              return self
                                                                                                          }
                                                                                                    }
                                                                                                    }
                                                                                                 }
                                                                                              }

                                                                                              class TestParsingMergeBuilder : ExtendableMessageBuilder {
                                                                                              private var result:TestParsingMerge

                                                                                              override init () {
                                                                                                 result = TestParsingMerge()
                                                                                              }
                                                                                              var hasRequiredAllTypes:Bool {
                                                                                                   get {
                                                                                                       return result.hasRequiredAllTypes
                                                                                                   }
                                                                                              }
                                                                                              var requiredAllTypes:TestAllTypes {
                                                                                                   get {
                                                                                                       return result.requiredAllTypes     }
                                                                                                   set (value) {
                                                                                                       result.hasRequiredAllTypes = true
                                                                                                       result.requiredAllTypes = value
                                                                                                   }
                                                                                              }
                                                                                              func setRequiredAllTypesBuilder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeBuilder {
                                                                                                requiredAllTypes = builderForValue.build()
                                                                                                return self
                                                                                              }
                                                                                              func mergeRequiredAllTypes(value:TestAllTypes) -> TestParsingMergeBuilder {
                                                                                                if (result.hasRequiredAllTypes && result.requiredAllTypes != TestAllTypes()) {
                                                                                                  result.requiredAllTypes = TestAllTypes.builderWithPrototype(result.requiredAllTypes).mergeFrom(value).buildPartial()
                                                                                                } else {
                                                                                                  result.requiredAllTypes = value
                                                                                                }
                                                                                                result.hasRequiredAllTypes = true
                                                                                                return self
                                                                                              }
                                                                                              func clearRequiredAllTypes() -> TestParsingMergeBuilder {
                                                                                                result.hasRequiredAllTypes = false
                                                                                                result.requiredAllTypes = TestAllTypes()
                                                                                                return self
                                                                                              }
                                                                                              var hasOptionalAllTypes:Bool {
                                                                                                   get {
                                                                                                       return result.hasOptionalAllTypes
                                                                                                   }
                                                                                              }
                                                                                              var optionalAllTypes:TestAllTypes {
                                                                                                   get {
                                                                                                       return result.optionalAllTypes     }
                                                                                                   set (value) {
                                                                                                       result.hasOptionalAllTypes = true
                                                                                                       result.optionalAllTypes = value
                                                                                                   }
                                                                                              }
                                                                                              func setOptionalAllTypesBuilder(builderForValue:TestAllTypesBuilder) -> TestParsingMergeBuilder {
                                                                                                optionalAllTypes = builderForValue.build()
                                                                                                return self
                                                                                              }
                                                                                              func mergeOptionalAllTypes(value:TestAllTypes) -> TestParsingMergeBuilder {
                                                                                                if (result.hasOptionalAllTypes && result.optionalAllTypes != TestAllTypes()) {
                                                                                                  result.optionalAllTypes = TestAllTypes.builderWithPrototype(result.optionalAllTypes).mergeFrom(value).buildPartial()
                                                                                                } else {
                                                                                                  result.optionalAllTypes = value
                                                                                                }
                                                                                                result.hasOptionalAllTypes = true
                                                                                                return self
                                                                                              }
                                                                                              func clearOptionalAllTypes() -> TestParsingMergeBuilder {
                                                                                                result.hasOptionalAllTypes = false
                                                                                                result.optionalAllTypes = TestAllTypes()
                                                                                                return self
                                                                                              }
                                                                                              var repeatedAllTypes:[TestAllTypes] {
                                                                                                   get {
                                                                                                       return result.repeatedAllTypes
                                                                                                   }
                                                                                                   set (value) {
                                                                                                       result.repeatedAllTypes = value
                                                                                                   }
                                                                                              }
                                                                                              func clearRepeatedAllTypes() -> TestParsingMergeBuilder {
                                                                                                result.repeatedAllTypes.removeAll(keepCapacity: false)
                                                                                                return self
                                                                                              }
                                                                                              var hasOptionalGroup:Bool {
                                                                                                   get {
                                                                                                       return result.hasOptionalGroup
                                                                                                   }
                                                                                              }
                                                                                              var optionalGroup:TestParsingMergeOptionalGroup {
                                                                                                   get {
                                                                                                       return result.optionalGroup     }
                                                                                                   set (value) {
                                                                                                       result.hasOptionalGroup = true
                                                                                                       result.optionalGroup = value
                                                                                                   }
                                                                                              }
                                                                                              func setOptionalGroupBuilder(builderForValue:TestParsingMergeOptionalGroupBuilder) -> TestParsingMergeBuilder {
                                                                                                optionalGroup = builderForValue.build()
                                                                                                return self
                                                                                              }
                                                                                              func mergeOptionalGroup(value:TestParsingMergeOptionalGroup) -> TestParsingMergeBuilder {
                                                                                                if (result.hasOptionalGroup && result.optionalGroup != TestParsingMergeOptionalGroup()) {
                                                                                                  result.optionalGroup = TestParsingMergeOptionalGroup.builderWithPrototype(result.optionalGroup).mergeFrom(value).buildPartial()
                                                                                                } else {
                                                                                                  result.optionalGroup = value
                                                                                                }
                                                                                                result.hasOptionalGroup = true
                                                                                                return self
                                                                                              }
                                                                                              func clearOptionalGroup() -> TestParsingMergeBuilder {
                                                                                                result.hasOptionalGroup = false
                                                                                                result.optionalGroup = TestParsingMergeOptionalGroup()
                                                                                                return self
                                                                                              }
                                                                                              var repeatedGroup:[TestParsingMergeRepeatedGroup] {
                                                                                                   get {
                                                                                                       return result.repeatedGroup
                                                                                                   }
                                                                                                   set (value) {
                                                                                                       result.repeatedGroup = value
                                                                                                   }
                                                                                              }
                                                                                              func clearRepeatedGroup() -> TestParsingMergeBuilder {
                                                                                                result.repeatedGroup.removeAll(keepCapacity: false)
                                                                                                return self
                                                                                              }
                                                                                              override var internalGetResult:ExtendableMessage {
                                                                                                   get {
                                                                                                       return result
                                                                                                   }
                                                                                              }
                                                                                              override func clear() -> TestParsingMergeBuilder {
                                                                                                result = TestParsingMerge()
                                                                                                return self
                                                                                              }
                                                                                              override func clone() -> TestParsingMergeBuilder {
                                                                                                return TestParsingMerge.builderWithPrototype(result)
                                                                                              }
                                                                                              func build() -> TestParsingMerge {
                                                                                                   checkInitialized()
                                                                                                   return buildPartial()
                                                                                              }
                                                                                              func buildPartial() -> TestParsingMerge {
                                                                                                var returnMe:TestParsingMerge = result
                                                                                                return returnMe
                                                                                              }
                                                                                              func mergeFrom(other:TestParsingMerge) -> TestParsingMergeBuilder {
                                                                                                if (other == TestParsingMerge()) {
                                                                                                  return self
                                                                                                }
                                                                                                if (other.hasRequiredAllTypes) {
                                                                                                    mergeRequiredAllTypes(other.requiredAllTypes)
                                                                                                }
                                                                                                if (other.hasOptionalAllTypes) {
                                                                                                    mergeOptionalAllTypes(other.optionalAllTypes)
                                                                                                }
                                                                                                if !other.repeatedAllTypes.isEmpty  {
                                                                                                   result.repeatedAllTypes += other.repeatedAllTypes
                                                                                                }
                                                                                                if (other.hasOptionalGroup) {
                                                                                                    mergeOptionalGroup(other.optionalGroup)
                                                                                                }
                                                                                                if !other.repeatedGroup.isEmpty  {
                                                                                                   result.repeatedGroup += other.repeatedGroup
                                                                                                }
                                                                                                mergeExtensionFields(other)
                                                                                                  mergeUnknownFields(other.unknownFields)
                                                                                                return self
                                                                                              }
                                                                                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeBuilder {
                                                                                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                              }
                                                                                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeBuilder {
                                                                                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                while (true) {
                                                                                                  var tag:Int32 = input.readTag()
                                                                                                    if tag == 0 {
                                                                                                         self.unknownFields = unknownFieldsBuilder.build()
                                                                                                         return self}
                                                                                                    else if tag == 10 {
                                                                                                      var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                      if hasRequiredAllTypes {
                                                                                                        subBuilder.mergeFrom(requiredAllTypes)
                                                                                                      }
                                                                                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                      requiredAllTypes = subBuilder.buildPartial()
                                                                                                    }
                                                                                                    else if tag == 18 {
                                                                                                      var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
                                                                                                      if hasOptionalAllTypes {
                                                                                                        subBuilder.mergeFrom(optionalAllTypes)
                                                                                                      }
                                                                                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                                                                                      optionalAllTypes = subBuilder.buildPartial()
                                                                                                    }
                                                                                                    else if tag == 26 {
                                                                                                      var subBuilder = TestAllTypes.builder()
                                                                                                      input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                                                                      repeatedAllTypes += [subBuilder.buildPartial()]
                                                                                                    }
                                                                                                    else if tag == 83 {
                                                                                                      var subBuilder:TestParsingMergeOptionalGroupBuilder = TestParsingMergeOptionalGroup.builder()
                                                                                                      if hasOptionalGroup {
                                                                                                        subBuilder.mergeFrom(optionalGroup)
                                                                                                      }
                                                                                                      input.readGroup(10, builder:subBuilder, extensionRegistry:extensionRegistry)
                                                                                                      optionalGroup = subBuilder.buildPartial()
                                                                                                    }
                                                                                                    else if tag == 163 {
                                                                                                      var subBuilder = TestParsingMergeRepeatedGroup.builder()
                                                                                                      input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
                                                                                                      repeatedGroup += [subBuilder.buildPartial()]
                                                                                                    }
                                                                                                    else {
                                                                                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                              unknownFields = unknownFieldsBuilder.build()
                                                                                                              return self
                                                                                                          }
                                                                                                    }
                                                                                                    }
                                                                                                 }
                                                                                              }

                                                                                              func == (lhs: TestCommentInjectionMessage, rhs: TestCommentInjectionMessage) -> Bool {
                                                                                                    if (lhs === rhs) {
                                                                                                      return true
                                                                                                    }
                                                                                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                    fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                                                                                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                              }
                                                                                              class TestCommentInjectionMessage : GeneratedMessage {
                                                                                                private(set) var hasA:Bool = false
                                                                                                private(set) var a:String = "*/ <- Neither should this."

                                                                                                override init() {
                                                                                                     super.init()
                                                                                                }
                                                                                                override func isInitialized() -> Bool {
                                                                                                  return true
                                                                                                }
                                                                                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                  if hasA {
                                                                                                    output.writeString(1, value:a)
                                                                                                  }
                                                                                                  unknownFields.writeToCodedOutputStream(output)
                                                                                                }
                                                                                                override func serializedSize() -> Int32 {
                                                                                                  var size:Int32 = memoizedSerializedSize
                                                                                                  if size != -1 {
                                                                                                    return size
                                                                                                  }

                                                                                                  size = 0
                                                                                                  if hasA {
                                                                                                    size += WireFormat.computeStringSize(1, value:a)
                                                                                                  }
                                                                                                  size += unknownFields.serializedSize()
                                                                                                  memoizedSerializedSize = size
                                                                                                  return size
                                                                                                }
                                                                                                class func parseFromData(data:[Byte]) -> TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromData(data).build()
                                                                                                }
                                                                                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                }
                                                                                                class func parseFromInputStream(input:NSInputStream) -> TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromInputStream(input).build()
                                                                                                }
                                                                                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                }
                                                                                                class func parseFromCodedInputStream(input:CodedInputStream) -> TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromCodedInputStream(input).build()
                                                                                                }
                                                                                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestCommentInjectionMessage {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                }
                                                                                                class func builder() -> TestCommentInjectionMessageBuilder {
                                                                                                  return TestCommentInjectionMessageBuilder()
                                                                                                }
                                                                                                class func builderWithPrototype(prototype:TestCommentInjectionMessage) -> TestCommentInjectionMessageBuilder {
                                                                                                  return TestCommentInjectionMessage.builder().mergeFrom(prototype)
                                                                                                }
                                                                                                func builder() -> TestCommentInjectionMessageBuilder {
                                                                                                  return TestCommentInjectionMessage.builder()
                                                                                                }
                                                                                                func toBuilder() -> TestCommentInjectionMessageBuilder {
                                                                                                  return TestCommentInjectionMessage.builderWithPrototype(self)
                                                                                                }
                                                                                                override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                  if hasA {
                                                                                                    output += "\(indent) a: \(a) \n"
                                                                                                  }
                                                                                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                }
                                                                                                override var hashValue:Int {
                                                                                                 get {
                                                                                                      var hashCode:Int = 7
                                                                                                      if hasA {
                                                                                                         hashCode = (hashCode &* 31) &+ a.hashValue
                                                                                                      }
                                                                                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                      return hashCode
                                                                                                    }
                                                                                                  }
                                                                                                }

                                                                                                class TestCommentInjectionMessageBuilder : GeneratedMessageBuilder {
                                                                                                private var result:TestCommentInjectionMessage

                                                                                                override init () {
                                                                                                   result = TestCommentInjectionMessage()
                                                                                                }
                                                                                                var hasA:Bool {
                                                                                                     get {
                                                                                                          return result.hasA
                                                                                                     }
                                                                                                }
                                                                                                var a:String {
                                                                                                     get {
                                                                                                          return result.a
                                                                                                     }
                                                                                                     set (value) {
                                                                                                         result.hasA = true
                                                                                                         result.a = value
                                                                                                     }
                                                                                                }
                                                                                                func clearA() -> TestCommentInjectionMessageBuilder{
                                                                                                     result.hasA = false
                                                                                                     result.a = "*/ <- Neither should this."
                                                                                                     return self
                                                                                                }
                                                                                                override var internalGetResult:GeneratedMessage {
                                                                                                     get {
                                                                                                        return result
                                                                                                     }
                                                                                                }
                                                                                                override func clear() -> TestCommentInjectionMessageBuilder {
                                                                                                  result = TestCommentInjectionMessage()
                                                                                                  return self
                                                                                                }
                                                                                                override func clone() -> TestCommentInjectionMessageBuilder {
                                                                                                  return TestCommentInjectionMessage.builderWithPrototype(result)
                                                                                                }
                                                                                                func build() -> TestCommentInjectionMessage {
                                                                                                     checkInitialized()
                                                                                                     return buildPartial()
                                                                                                }
                                                                                                func buildPartial() -> TestCommentInjectionMessage {
                                                                                                  var returnMe:TestCommentInjectionMessage = result
                                                                                                  return returnMe
                                                                                                }
                                                                                                func mergeFrom(other:TestCommentInjectionMessage) -> TestCommentInjectionMessageBuilder {
                                                                                                  if (other == TestCommentInjectionMessage()) {
                                                                                                    return self
                                                                                                  }
                                                                                                  if other.hasA {
                                                                                                       a = other.a
                                                                                                  }
                                                                                                    mergeUnknownFields(other.unknownFields)
                                                                                                  return self
                                                                                                }
                                                                                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestCommentInjectionMessageBuilder {
                                                                                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                }
                                                                                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestCommentInjectionMessageBuilder {
                                                                                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                  while (true) {
                                                                                                    var tag:Int32 = input.readTag()
                                                                                                      if tag == 0 {
                                                                                                           self.unknownFields = unknownFieldsBuilder.build()
                                                                                                           return self}
                                                                                                      else if tag == 10 {
                                                                                                        a = input.readString()
                                                                                                      }
                                                                                                      else {
                                                                                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                unknownFields = unknownFieldsBuilder.build()
                                                                                                                return self
                                                                                                            }
                                                                                                      }
                                                                                                      }
                                                                                                   }
                                                                                                }

                                                                                                func == (lhs: FooRequest, rhs: FooRequest) -> Bool {
                                                                                                      if (lhs === rhs) {
                                                                                                        return true
                                                                                                      }
                                                                                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                      return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                }
                                                                                                class FooRequest : GeneratedMessage {
                                                                                                  override init() {
                                                                                                       super.init()
                                                                                                  }
                                                                                                  override func isInitialized() -> Bool {
                                                                                                    return true
                                                                                                  }
                                                                                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                    unknownFields.writeToCodedOutputStream(output)
                                                                                                  }
                                                                                                  override func serializedSize() -> Int32 {
                                                                                                    var size:Int32 = memoizedSerializedSize
                                                                                                    if size != -1 {
                                                                                                      return size
                                                                                                    }

                                                                                                    size = 0
                                                                                                    size += unknownFields.serializedSize()
                                                                                                    memoizedSerializedSize = size
                                                                                                    return size
                                                                                                  }
                                                                                                  class func parseFromData(data:[Byte]) -> FooRequest {
                                                                                                    return FooRequest.builder().mergeFromData(data).build()
                                                                                                  }
                                                                                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> FooRequest {
                                                                                                    return FooRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                  }
                                                                                                  class func parseFromInputStream(input:NSInputStream) -> FooRequest {
                                                                                                    return FooRequest.builder().mergeFromInputStream(input).build()
                                                                                                  }
                                                                                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->FooRequest {
                                                                                                    return FooRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                  }
                                                                                                  class func parseFromCodedInputStream(input:CodedInputStream) -> FooRequest {
                                                                                                    return FooRequest.builder().mergeFromCodedInputStream(input).build()
                                                                                                  }
                                                                                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooRequest {
                                                                                                    return FooRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                  }
                                                                                                  class func builder() -> FooRequestBuilder {
                                                                                                    return FooRequestBuilder()
                                                                                                  }
                                                                                                  class func builderWithPrototype(prototype:FooRequest) -> FooRequestBuilder {
                                                                                                    return FooRequest.builder().mergeFrom(prototype)
                                                                                                  }
                                                                                                  func builder() -> FooRequestBuilder {
                                                                                                    return FooRequest.builder()
                                                                                                  }
                                                                                                  func toBuilder() -> FooRequestBuilder {
                                                                                                    return FooRequest.builderWithPrototype(self)
                                                                                                  }
                                                                                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                  }
                                                                                                  override var hashValue:Int {
                                                                                                   get {
                                                                                                        var hashCode:Int = 7
                                                                                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                        return hashCode
                                                                                                      }
                                                                                                    }
                                                                                                  }

                                                                                                  class FooRequestBuilder : GeneratedMessageBuilder {
                                                                                                  private var result:FooRequest

                                                                                                  override init () {
                                                                                                     result = FooRequest()
                                                                                                  }
                                                                                                  override var internalGetResult:GeneratedMessage {
                                                                                                       get {
                                                                                                          return result
                                                                                                       }
                                                                                                  }
                                                                                                  override func clear() -> FooRequestBuilder {
                                                                                                    result = FooRequest()
                                                                                                    return self
                                                                                                  }
                                                                                                  override func clone() -> FooRequestBuilder {
                                                                                                    return FooRequest.builderWithPrototype(result)
                                                                                                  }
                                                                                                  func build() -> FooRequest {
                                                                                                       checkInitialized()
                                                                                                       return buildPartial()
                                                                                                  }
                                                                                                  func buildPartial() -> FooRequest {
                                                                                                    var returnMe:FooRequest = result
                                                                                                    return returnMe
                                                                                                  }
                                                                                                  func mergeFrom(other:FooRequest) -> FooRequestBuilder {
                                                                                                    if (other == FooRequest()) {
                                                                                                      return self
                                                                                                    }
                                                                                                      mergeUnknownFields(other.unknownFields)
                                                                                                    return self
                                                                                                  }
                                                                                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->FooRequestBuilder {
                                                                                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                  }
                                                                                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooRequestBuilder {
                                                                                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                    while (true) {
                                                                                                      var tag:Int32 = input.readTag()
                                                                                                        if tag == 0 {
                                                                                                             self.unknownFields = unknownFieldsBuilder.build()
                                                                                                             return self}
                                                                                                        else {
                                                                                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                  unknownFields = unknownFieldsBuilder.build()
                                                                                                                  return self
                                                                                                              }
                                                                                                        }
                                                                                                        }
                                                                                                     }
                                                                                                  }

                                                                                                  func == (lhs: FooResponse, rhs: FooResponse) -> Bool {
                                                                                                        if (lhs === rhs) {
                                                                                                          return true
                                                                                                        }
                                                                                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                        return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                  }
                                                                                                  class FooResponse : GeneratedMessage {
                                                                                                    override init() {
                                                                                                         super.init()
                                                                                                    }
                                                                                                    override func isInitialized() -> Bool {
                                                                                                      return true
                                                                                                    }
                                                                                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                      unknownFields.writeToCodedOutputStream(output)
                                                                                                    }
                                                                                                    override func serializedSize() -> Int32 {
                                                                                                      var size:Int32 = memoizedSerializedSize
                                                                                                      if size != -1 {
                                                                                                        return size
                                                                                                      }

                                                                                                      size = 0
                                                                                                      size += unknownFields.serializedSize()
                                                                                                      memoizedSerializedSize = size
                                                                                                      return size
                                                                                                    }
                                                                                                    class func parseFromData(data:[Byte]) -> FooResponse {
                                                                                                      return FooResponse.builder().mergeFromData(data).build()
                                                                                                    }
                                                                                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> FooResponse {
                                                                                                      return FooResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                    }
                                                                                                    class func parseFromInputStream(input:NSInputStream) -> FooResponse {
                                                                                                      return FooResponse.builder().mergeFromInputStream(input).build()
                                                                                                    }
                                                                                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->FooResponse {
                                                                                                      return FooResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                    }
                                                                                                    class func parseFromCodedInputStream(input:CodedInputStream) -> FooResponse {
                                                                                                      return FooResponse.builder().mergeFromCodedInputStream(input).build()
                                                                                                    }
                                                                                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooResponse {
                                                                                                      return FooResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                    }
                                                                                                    class func builder() -> FooResponseBuilder {
                                                                                                      return FooResponseBuilder()
                                                                                                    }
                                                                                                    class func builderWithPrototype(prototype:FooResponse) -> FooResponseBuilder {
                                                                                                      return FooResponse.builder().mergeFrom(prototype)
                                                                                                    }
                                                                                                    func builder() -> FooResponseBuilder {
                                                                                                      return FooResponse.builder()
                                                                                                    }
                                                                                                    func toBuilder() -> FooResponseBuilder {
                                                                                                      return FooResponse.builderWithPrototype(self)
                                                                                                    }
                                                                                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                    }
                                                                                                    override var hashValue:Int {
                                                                                                     get {
                                                                                                          var hashCode:Int = 7
                                                                                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                          return hashCode
                                                                                                        }
                                                                                                      }
                                                                                                    }

                                                                                                    class FooResponseBuilder : GeneratedMessageBuilder {
                                                                                                    private var result:FooResponse

                                                                                                    override init () {
                                                                                                       result = FooResponse()
                                                                                                    }
                                                                                                    override var internalGetResult:GeneratedMessage {
                                                                                                         get {
                                                                                                            return result
                                                                                                         }
                                                                                                    }
                                                                                                    override func clear() -> FooResponseBuilder {
                                                                                                      result = FooResponse()
                                                                                                      return self
                                                                                                    }
                                                                                                    override func clone() -> FooResponseBuilder {
                                                                                                      return FooResponse.builderWithPrototype(result)
                                                                                                    }
                                                                                                    func build() -> FooResponse {
                                                                                                         checkInitialized()
                                                                                                         return buildPartial()
                                                                                                    }
                                                                                                    func buildPartial() -> FooResponse {
                                                                                                      var returnMe:FooResponse = result
                                                                                                      return returnMe
                                                                                                    }
                                                                                                    func mergeFrom(other:FooResponse) -> FooResponseBuilder {
                                                                                                      if (other == FooResponse()) {
                                                                                                        return self
                                                                                                      }
                                                                                                        mergeUnknownFields(other.unknownFields)
                                                                                                      return self
                                                                                                    }
                                                                                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->FooResponseBuilder {
                                                                                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                    }
                                                                                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooResponseBuilder {
                                                                                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                      while (true) {
                                                                                                        var tag:Int32 = input.readTag()
                                                                                                          if tag == 0 {
                                                                                                               self.unknownFields = unknownFieldsBuilder.build()
                                                                                                               return self}
                                                                                                          else {
                                                                                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                    unknownFields = unknownFieldsBuilder.build()
                                                                                                                    return self
                                                                                                                }
                                                                                                          }
                                                                                                          }
                                                                                                       }
                                                                                                    }

                                                                                                    func == (lhs: FooClientMessage, rhs: FooClientMessage) -> Bool {
                                                                                                          if (lhs === rhs) {
                                                                                                            return true
                                                                                                          }
                                                                                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                          return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                    }
                                                                                                    class FooClientMessage : GeneratedMessage {
                                                                                                      override init() {
                                                                                                           super.init()
                                                                                                      }
                                                                                                      override func isInitialized() -> Bool {
                                                                                                        return true
                                                                                                      }
                                                                                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                        unknownFields.writeToCodedOutputStream(output)
                                                                                                      }
                                                                                                      override func serializedSize() -> Int32 {
                                                                                                        var size:Int32 = memoizedSerializedSize
                                                                                                        if size != -1 {
                                                                                                          return size
                                                                                                        }

                                                                                                        size = 0
                                                                                                        size += unknownFields.serializedSize()
                                                                                                        memoizedSerializedSize = size
                                                                                                        return size
                                                                                                      }
                                                                                                      class func parseFromData(data:[Byte]) -> FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromData(data).build()
                                                                                                      }
                                                                                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                      }
                                                                                                      class func parseFromInputStream(input:NSInputStream) -> FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromInputStream(input).build()
                                                                                                      }
                                                                                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                      }
                                                                                                      class func parseFromCodedInputStream(input:CodedInputStream) -> FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromCodedInputStream(input).build()
                                                                                                      }
                                                                                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooClientMessage {
                                                                                                        return FooClientMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                      }
                                                                                                      class func builder() -> FooClientMessageBuilder {
                                                                                                        return FooClientMessageBuilder()
                                                                                                      }
                                                                                                      class func builderWithPrototype(prototype:FooClientMessage) -> FooClientMessageBuilder {
                                                                                                        return FooClientMessage.builder().mergeFrom(prototype)
                                                                                                      }
                                                                                                      func builder() -> FooClientMessageBuilder {
                                                                                                        return FooClientMessage.builder()
                                                                                                      }
                                                                                                      func toBuilder() -> FooClientMessageBuilder {
                                                                                                        return FooClientMessage.builderWithPrototype(self)
                                                                                                      }
                                                                                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                      }
                                                                                                      override var hashValue:Int {
                                                                                                       get {
                                                                                                            var hashCode:Int = 7
                                                                                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                            return hashCode
                                                                                                          }
                                                                                                        }
                                                                                                      }

                                                                                                      class FooClientMessageBuilder : GeneratedMessageBuilder {
                                                                                                      private var result:FooClientMessage

                                                                                                      override init () {
                                                                                                         result = FooClientMessage()
                                                                                                      }
                                                                                                      override var internalGetResult:GeneratedMessage {
                                                                                                           get {
                                                                                                              return result
                                                                                                           }
                                                                                                      }
                                                                                                      override func clear() -> FooClientMessageBuilder {
                                                                                                        result = FooClientMessage()
                                                                                                        return self
                                                                                                      }
                                                                                                      override func clone() -> FooClientMessageBuilder {
                                                                                                        return FooClientMessage.builderWithPrototype(result)
                                                                                                      }
                                                                                                      func build() -> FooClientMessage {
                                                                                                           checkInitialized()
                                                                                                           return buildPartial()
                                                                                                      }
                                                                                                      func buildPartial() -> FooClientMessage {
                                                                                                        var returnMe:FooClientMessage = result
                                                                                                        return returnMe
                                                                                                      }
                                                                                                      func mergeFrom(other:FooClientMessage) -> FooClientMessageBuilder {
                                                                                                        if (other == FooClientMessage()) {
                                                                                                          return self
                                                                                                        }
                                                                                                          mergeUnknownFields(other.unknownFields)
                                                                                                        return self
                                                                                                      }
                                                                                                      override func mergeFromCodedInputStream(input:CodedInputStream) ->FooClientMessageBuilder {
                                                                                                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                      }
                                                                                                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooClientMessageBuilder {
                                                                                                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                        while (true) {
                                                                                                          var tag:Int32 = input.readTag()
                                                                                                            if tag == 0 {
                                                                                                                 self.unknownFields = unknownFieldsBuilder.build()
                                                                                                                 return self}
                                                                                                            else {
                                                                                                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                      unknownFields = unknownFieldsBuilder.build()
                                                                                                                      return self
                                                                                                                  }
                                                                                                            }
                                                                                                            }
                                                                                                         }
                                                                                                      }

                                                                                                      func == (lhs: FooServerMessage, rhs: FooServerMessage) -> Bool {
                                                                                                            if (lhs === rhs) {
                                                                                                              return true
                                                                                                            }
                                                                                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                            return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                      }
                                                                                                      class FooServerMessage : GeneratedMessage {
                                                                                                        override init() {
                                                                                                             super.init()
                                                                                                        }
                                                                                                        override func isInitialized() -> Bool {
                                                                                                          return true
                                                                                                        }
                                                                                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                          unknownFields.writeToCodedOutputStream(output)
                                                                                                        }
                                                                                                        override func serializedSize() -> Int32 {
                                                                                                          var size:Int32 = memoizedSerializedSize
                                                                                                          if size != -1 {
                                                                                                            return size
                                                                                                          }

                                                                                                          size = 0
                                                                                                          size += unknownFields.serializedSize()
                                                                                                          memoizedSerializedSize = size
                                                                                                          return size
                                                                                                        }
                                                                                                        class func parseFromData(data:[Byte]) -> FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromData(data).build()
                                                                                                        }
                                                                                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                        }
                                                                                                        class func parseFromInputStream(input:NSInputStream) -> FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromInputStream(input).build()
                                                                                                        }
                                                                                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                        }
                                                                                                        class func parseFromCodedInputStream(input:CodedInputStream) -> FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromCodedInputStream(input).build()
                                                                                                        }
                                                                                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooServerMessage {
                                                                                                          return FooServerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                        }
                                                                                                        class func builder() -> FooServerMessageBuilder {
                                                                                                          return FooServerMessageBuilder()
                                                                                                        }
                                                                                                        class func builderWithPrototype(prototype:FooServerMessage) -> FooServerMessageBuilder {
                                                                                                          return FooServerMessage.builder().mergeFrom(prototype)
                                                                                                        }
                                                                                                        func builder() -> FooServerMessageBuilder {
                                                                                                          return FooServerMessage.builder()
                                                                                                        }
                                                                                                        func toBuilder() -> FooServerMessageBuilder {
                                                                                                          return FooServerMessage.builderWithPrototype(self)
                                                                                                        }
                                                                                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                        }
                                                                                                        override var hashValue:Int {
                                                                                                         get {
                                                                                                              var hashCode:Int = 7
                                                                                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                              return hashCode
                                                                                                            }
                                                                                                          }
                                                                                                        }

                                                                                                        class FooServerMessageBuilder : GeneratedMessageBuilder {
                                                                                                        private var result:FooServerMessage

                                                                                                        override init () {
                                                                                                           result = FooServerMessage()
                                                                                                        }
                                                                                                        override var internalGetResult:GeneratedMessage {
                                                                                                             get {
                                                                                                                return result
                                                                                                             }
                                                                                                        }
                                                                                                        override func clear() -> FooServerMessageBuilder {
                                                                                                          result = FooServerMessage()
                                                                                                          return self
                                                                                                        }
                                                                                                        override func clone() -> FooServerMessageBuilder {
                                                                                                          return FooServerMessage.builderWithPrototype(result)
                                                                                                        }
                                                                                                        func build() -> FooServerMessage {
                                                                                                             checkInitialized()
                                                                                                             return buildPartial()
                                                                                                        }
                                                                                                        func buildPartial() -> FooServerMessage {
                                                                                                          var returnMe:FooServerMessage = result
                                                                                                          return returnMe
                                                                                                        }
                                                                                                        func mergeFrom(other:FooServerMessage) -> FooServerMessageBuilder {
                                                                                                          if (other == FooServerMessage()) {
                                                                                                            return self
                                                                                                          }
                                                                                                            mergeUnknownFields(other.unknownFields)
                                                                                                          return self
                                                                                                        }
                                                                                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->FooServerMessageBuilder {
                                                                                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                        }
                                                                                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooServerMessageBuilder {
                                                                                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                          while (true) {
                                                                                                            var tag:Int32 = input.readTag()
                                                                                                              if tag == 0 {
                                                                                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                                                                                   return self}
                                                                                                              else {
                                                                                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                        unknownFields = unknownFieldsBuilder.build()
                                                                                                                        return self
                                                                                                                    }
                                                                                                              }
                                                                                                              }
                                                                                                           }
                                                                                                        }

                                                                                                        func == (lhs: BarRequest, rhs: BarRequest) -> Bool {
                                                                                                              if (lhs === rhs) {
                                                                                                                return true
                                                                                                              }
                                                                                                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                              return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                        }
                                                                                                        class BarRequest : GeneratedMessage {
                                                                                                          override init() {
                                                                                                               super.init()
                                                                                                          }
                                                                                                          override func isInitialized() -> Bool {
                                                                                                            return true
                                                                                                          }
                                                                                                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                            unknownFields.writeToCodedOutputStream(output)
                                                                                                          }
                                                                                                          override func serializedSize() -> Int32 {
                                                                                                            var size:Int32 = memoizedSerializedSize
                                                                                                            if size != -1 {
                                                                                                              return size
                                                                                                            }

                                                                                                            size = 0
                                                                                                            size += unknownFields.serializedSize()
                                                                                                            memoizedSerializedSize = size
                                                                                                            return size
                                                                                                          }
                                                                                                          class func parseFromData(data:[Byte]) -> BarRequest {
                                                                                                            return BarRequest.builder().mergeFromData(data).build()
                                                                                                          }
                                                                                                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> BarRequest {
                                                                                                            return BarRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                          }
                                                                                                          class func parseFromInputStream(input:NSInputStream) -> BarRequest {
                                                                                                            return BarRequest.builder().mergeFromInputStream(input).build()
                                                                                                          }
                                                                                                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->BarRequest {
                                                                                                            return BarRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                          }
                                                                                                          class func parseFromCodedInputStream(input:CodedInputStream) -> BarRequest {
                                                                                                            return BarRequest.builder().mergeFromCodedInputStream(input).build()
                                                                                                          }
                                                                                                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> BarRequest {
                                                                                                            return BarRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                          }
                                                                                                          class func builder() -> BarRequestBuilder {
                                                                                                            return BarRequestBuilder()
                                                                                                          }
                                                                                                          class func builderWithPrototype(prototype:BarRequest) -> BarRequestBuilder {
                                                                                                            return BarRequest.builder().mergeFrom(prototype)
                                                                                                          }
                                                                                                          func builder() -> BarRequestBuilder {
                                                                                                            return BarRequest.builder()
                                                                                                          }
                                                                                                          func toBuilder() -> BarRequestBuilder {
                                                                                                            return BarRequest.builderWithPrototype(self)
                                                                                                          }
                                                                                                          override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                            unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                          }
                                                                                                          override var hashValue:Int {
                                                                                                           get {
                                                                                                                var hashCode:Int = 7
                                                                                                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                                return hashCode
                                                                                                              }
                                                                                                            }
                                                                                                          }

                                                                                                          class BarRequestBuilder : GeneratedMessageBuilder {
                                                                                                          private var result:BarRequest

                                                                                                          override init () {
                                                                                                             result = BarRequest()
                                                                                                          }
                                                                                                          override var internalGetResult:GeneratedMessage {
                                                                                                               get {
                                                                                                                  return result
                                                                                                               }
                                                                                                          }
                                                                                                          override func clear() -> BarRequestBuilder {
                                                                                                            result = BarRequest()
                                                                                                            return self
                                                                                                          }
                                                                                                          override func clone() -> BarRequestBuilder {
                                                                                                            return BarRequest.builderWithPrototype(result)
                                                                                                          }
                                                                                                          func build() -> BarRequest {
                                                                                                               checkInitialized()
                                                                                                               return buildPartial()
                                                                                                          }
                                                                                                          func buildPartial() -> BarRequest {
                                                                                                            var returnMe:BarRequest = result
                                                                                                            return returnMe
                                                                                                          }
                                                                                                          func mergeFrom(other:BarRequest) -> BarRequestBuilder {
                                                                                                            if (other == BarRequest()) {
                                                                                                              return self
                                                                                                            }
                                                                                                              mergeUnknownFields(other.unknownFields)
                                                                                                            return self
                                                                                                          }
                                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream) ->BarRequestBuilder {
                                                                                                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                          }
                                                                                                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> BarRequestBuilder {
                                                                                                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                            while (true) {
                                                                                                              var tag:Int32 = input.readTag()
                                                                                                                if tag == 0 {
                                                                                                                     self.unknownFields = unknownFieldsBuilder.build()
                                                                                                                     return self}
                                                                                                                else {
                                                                                                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                          unknownFields = unknownFieldsBuilder.build()
                                                                                                                          return self
                                                                                                                      }
                                                                                                                }
                                                                                                                }
                                                                                                             }
                                                                                                          }

                                                                                                          func == (lhs: BarResponse, rhs: BarResponse) -> Bool {
                                                                                                                if (lhs === rhs) {
                                                                                                                  return true
                                                                                                                }
                                                                                                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                                                                                                return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                                                                                          }
                                                                                                          class BarResponse : GeneratedMessage {
                                                                                                            override init() {
                                                                                                                 super.init()
                                                                                                            }
                                                                                                            override func isInitialized() -> Bool {
                                                                                                              return true
                                                                                                            }
                                                                                                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                                                                                                              unknownFields.writeToCodedOutputStream(output)
                                                                                                            }
                                                                                                            override func serializedSize() -> Int32 {
                                                                                                              var size:Int32 = memoizedSerializedSize
                                                                                                              if size != -1 {
                                                                                                                return size
                                                                                                              }

                                                                                                              size = 0
                                                                                                              size += unknownFields.serializedSize()
                                                                                                              memoizedSerializedSize = size
                                                                                                              return size
                                                                                                            }
                                                                                                            class func parseFromData(data:[Byte]) -> BarResponse {
                                                                                                              return BarResponse.builder().mergeFromData(data).build()
                                                                                                            }
                                                                                                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> BarResponse {
                                                                                                              return BarResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                                                                                            }
                                                                                                            class func parseFromInputStream(input:NSInputStream) -> BarResponse {
                                                                                                              return BarResponse.builder().mergeFromInputStream(input).build()
                                                                                                            }
                                                                                                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->BarResponse {
                                                                                                              return BarResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                            }
                                                                                                            class func parseFromCodedInputStream(input:CodedInputStream) -> BarResponse {
                                                                                                              return BarResponse.builder().mergeFromCodedInputStream(input).build()
                                                                                                            }
                                                                                                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> BarResponse {
                                                                                                              return BarResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                                                                                            }
                                                                                                            class func builder() -> BarResponseBuilder {
                                                                                                              return BarResponseBuilder()
                                                                                                            }
                                                                                                            class func builderWithPrototype(prototype:BarResponse) -> BarResponseBuilder {
                                                                                                              return BarResponse.builder().mergeFrom(prototype)
                                                                                                            }
                                                                                                            func builder() -> BarResponseBuilder {
                                                                                                              return BarResponse.builder()
                                                                                                            }
                                                                                                            func toBuilder() -> BarResponseBuilder {
                                                                                                              return BarResponse.builderWithPrototype(self)
                                                                                                            }
                                                                                                            override func writeDescriptionTo(inout output:String, indent:String) {
                                                                                                              unknownFields.writeDescriptionTo(&output, indent:indent)
                                                                                                            }
                                                                                                            override var hashValue:Int {
                                                                                                             get {
                                                                                                                  var hashCode:Int = 7
                                                                                                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                                                                                                  return hashCode
                                                                                                                }
                                                                                                              }
                                                                                                            }

                                                                                                            class BarResponseBuilder : GeneratedMessageBuilder {
                                                                                                            private var result:BarResponse

                                                                                                            override init () {
                                                                                                               result = BarResponse()
                                                                                                            }
                                                                                                            override var internalGetResult:GeneratedMessage {
                                                                                                                 get {
                                                                                                                    return result
                                                                                                                 }
                                                                                                            }
                                                                                                            override func clear() -> BarResponseBuilder {
                                                                                                              result = BarResponse()
                                                                                                              return self
                                                                                                            }
                                                                                                            override func clone() -> BarResponseBuilder {
                                                                                                              return BarResponse.builderWithPrototype(result)
                                                                                                            }
                                                                                                            func build() -> BarResponse {
                                                                                                                 checkInitialized()
                                                                                                                 return buildPartial()
                                                                                                            }
                                                                                                            func buildPartial() -> BarResponse {
                                                                                                              var returnMe:BarResponse = result
                                                                                                              return returnMe
                                                                                                            }
                                                                                                            func mergeFrom(other:BarResponse) -> BarResponseBuilder {
                                                                                                              if (other == BarResponse()) {
                                                                                                                return self
                                                                                                              }
                                                                                                                mergeUnknownFields(other.unknownFields)
                                                                                                              return self
                                                                                                            }
                                                                                                            override func mergeFromCodedInputStream(input:CodedInputStream) ->BarResponseBuilder {
                                                                                                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                                                                                            }
                                                                                                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> BarResponseBuilder {
                                                                                                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                                                                                              while (true) {
                                                                                                                var tag:Int32 = input.readTag()
                                                                                                                  if tag == 0 {
                                                                                                                       self.unknownFields = unknownFieldsBuilder.build()
                                                                                                                       return self}
                                                                                                                  else {
                                                                                                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                                                                                            unknownFields = unknownFieldsBuilder.build()
                                                                                                                            return self
                                                                                                                        }
                                                                                                                  }
                                                                                                                  }
                                                                                                               }
                                                                                                            }


                                                                                                            // @@protoc_insertion_point(global_scope)
