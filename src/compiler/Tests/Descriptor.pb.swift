// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class PBDescriptorRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

func == (lhs: PBFileDescriptorSet, rhs: PBFileDescriptorSet) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.file == rhs.file)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class PBFileDescriptorSet : GeneratedMessage {
  private(set) var file:[PBFileDescriptorProto]  = [PBFileDescriptorProto]()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    var isInitfile:Bool = true
    for element in file {
        if (!element.isInitialized()) {
            isInitfile = false
            break 
        }
    }
    if !isInitfile {
     return isInitfile
     }
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    for element in file {
        output.writeMessage(1, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    for element in file {
        size += WireFormat.computeMessageSize(1, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileDescriptorSet {
    return PBFileDescriptorSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PBFileDescriptorSetBuilder {
    return PBFileDescriptorSetBuilder()
  }
  class func builderWithPrototype(prototype:PBFileDescriptorSet) -> PBFileDescriptorSetBuilder {
    return PBFileDescriptorSet.builder().mergeFrom(prototype)
  }
  func builder() -> PBFileDescriptorSetBuilder {
    return PBFileDescriptorSet.builder()
  }
  func toBuilder() -> PBFileDescriptorSetBuilder {
    return PBFileDescriptorSet.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    var fileElementIndex:Int = 0
    for element in file {
        output += "\(indent) file[\(fileElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        fileElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        for element in file {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class PBFileDescriptorSetBuilder : GeneratedMessageBuilder {
  private var result:PBFileDescriptorSet

  override init () {
     result = PBFileDescriptorSet()
  }
  var file:[PBFileDescriptorProto] {
       get {
           return result.file
       }
       set (value) {
           result.file = value
       }
  }
  func clearFile() -> PBFileDescriptorSetBuilder {
    result.file.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> PBFileDescriptorSetBuilder {
    result = PBFileDescriptorSet()
    return self
  }
  override func clone() -> PBFileDescriptorSetBuilder {
    return PBFileDescriptorSet.builderWithPrototype(result)
  }
  func build() -> PBFileDescriptorSet {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PBFileDescriptorSet {
    var returnMe:PBFileDescriptorSet = result
    return returnMe
  }
  func mergeFrom(other:PBFileDescriptorSet) -> PBFileDescriptorSetBuilder {
    if (other == PBFileDescriptorSet()) {
      return self
    }
    if !other.file.isEmpty  {
       result.file += other.file
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PBFileDescriptorSetBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileDescriptorSetBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 10 {
          var subBuilder = PBFileDescriptorProto.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          file += [subBuilder.buildPartial()]
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }

  func == (lhs: PBFileDescriptorProto, rhs: PBFileDescriptorProto) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
         fieldCheck = fieldCheck && (lhs.hasPackage == rhs.hasPackage) && (!lhs.hasPackage || lhs.package == rhs.package)
         fieldCheck = fieldCheck && (lhs.dependency == rhs.dependency)
         fieldCheck = fieldCheck && (lhs.messageType == rhs.messageType)
         fieldCheck = fieldCheck && (lhs.enumType == rhs.enumType)
         fieldCheck = fieldCheck && (lhs.service == rhs.service)
         fieldCheck = fieldCheck && (lhs.extension == rhs.extension)
         fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
         fieldCheck = fieldCheck && (lhs.hasSourceCodeInfo == rhs.hasSourceCodeInfo) && (!lhs.hasSourceCodeInfo || lhs.sourceCodeInfo == rhs.sourceCodeInfo)
         fieldCheck = fieldCheck && (lhs.publicDependency == rhs.publicDependency)
         fieldCheck = fieldCheck && (lhs.weakDependency == rhs.weakDependency)
         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class PBFileDescriptorProto : GeneratedMessage {
    private(set) var hasName:Bool = false
    private(set) var name:String = ""

    private(set) var hasPackage:Bool = false
    private(set) var package:String = ""

    private(set) var hasOptions:Bool = false
    private(set) var options:PBFileOptions = PBFileOptions()
    private(set) var hasSourceCodeInfo:Bool = false
    private(set) var sourceCodeInfo:PBSourceCodeInfo = PBSourceCodeInfo()
    private(set) var dependency:[String] = [String]()
    private(set) var publicDependency:[Int32] = [Int32]()
    private(set) var weakDependency:[Int32] = [Int32]()
    private(set) var messageType:[PBDescriptorProto]  = [PBDescriptorProto]()
    private(set) var enumType:[PBEnumDescriptorProto]  = [PBEnumDescriptorProto]()
    private(set) var service:[PBServiceDescriptorProto]  = [PBServiceDescriptorProto]()
    private(set) var extension:[PBFieldDescriptorProto]  = [PBFieldDescriptorProto]()
    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      var isInitmessageType:Bool = true
      for element in messageType {
          if (!element.isInitialized()) {
              isInitmessageType = false
              break 
          }
      }
      if !isInitmessageType {
       return isInitmessageType
       }
      var isInitenumType:Bool = true
      for element in enumType {
          if (!element.isInitialized()) {
              isInitenumType = false
              break 
          }
      }
      if !isInitenumType {
       return isInitenumType
       }
      var isInitservice:Bool = true
      for element in service {
          if (!element.isInitialized()) {
              isInitservice = false
              break 
          }
      }
      if !isInitservice {
       return isInitservice
       }
      var isInitextension:Bool = true
      for element in extension {
          if (!element.isInitialized()) {
              isInitextension = false
              break 
          }
      }
      if !isInitextension {
       return isInitextension
       }
      if hasOptions {
        if !options.isInitialized() {
          return false
        }
      }
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasName {
        output.writeString(1, value:name)
      }
      if hasPackage {
        output.writeString(2, value:package)
      }
      if !dependency.isEmpty {
        for value in dependency {
          output.writeString(3, value:value)
        }
      }
      for element in messageType {
          output.writeMessage(4, value:element)
      }
      for element in enumType {
          output.writeMessage(5, value:element)
      }
      for element in service {
          output.writeMessage(6, value:element)
      }
      for element in extension {
          output.writeMessage(7, value:element)
      }
      if hasOptions {
        output.writeMessage(8, value:options)
      }
      if hasSourceCodeInfo {
        output.writeMessage(9, value:sourceCodeInfo)
      }
      if !publicDependency.isEmpty {
        for value in publicDependency {
          output.writeInt32(10, value:value)
        }
      }
      if !weakDependency.isEmpty {
        for value in weakDependency {
          output.writeInt32(11, value:value)
        }
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      if hasName {
        size += WireFormat.computeStringSize(1, value:name)
      }
      if hasPackage {
        size += WireFormat.computeStringSize(2, value:package)
      }
        var dataSizeDependency:Int32 = 0
        for element in dependency {
            dataSizeDependency += WireFormat.computeStringSizeNoTag(element)
        }
        size += dataSizeDependency
        size += 1 * Int32(dependency.count)
      for element in messageType {
          size += WireFormat.computeMessageSize(4, value:element)
      }
      for element in enumType {
          size += WireFormat.computeMessageSize(5, value:element)
      }
      for element in service {
          size += WireFormat.computeMessageSize(6, value:element)
      }
      for element in extension {
          size += WireFormat.computeMessageSize(7, value:element)
      }
      if hasOptions {
        size += WireFormat.computeMessageSize(8, value:options)
      }
      if hasSourceCodeInfo {
        size += WireFormat.computeMessageSize(9, value:sourceCodeInfo)
      }
        var dataSizePublicDependency:Int32 = 0
        for element in publicDependency {
            dataSizePublicDependency += WireFormat.computeInt32SizeNoTag(element)
        }
        size += dataSizePublicDependency
        size += 1 * Int32(publicDependency.count)
        var dataSizeWeakDependency:Int32 = 0
        for element in weakDependency {
            dataSizeWeakDependency += WireFormat.computeInt32SizeNoTag(element)
        }
        size += dataSizeWeakDependency
        size += 1 * Int32(weakDependency.count)
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileDescriptorProto {
      return PBFileDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> PBFileDescriptorProtoBuilder {
      return PBFileDescriptorProtoBuilder()
    }
    class func builderWithPrototype(prototype:PBFileDescriptorProto) -> PBFileDescriptorProtoBuilder {
      return PBFileDescriptorProto.builder().mergeFrom(prototype)
    }
    func builder() -> PBFileDescriptorProtoBuilder {
      return PBFileDescriptorProto.builder()
    }
    func toBuilder() -> PBFileDescriptorProtoBuilder {
      return PBFileDescriptorProto.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasPackage {
        output += "\(indent) package: \(package) \n"
      }
      var dependencyElementIndex:Int = 0
      for element in dependency  {
          output += "\(indent) dependency[\(dependencyElementIndex)]: \(element)\n"
          dependencyElementIndex++
      }
      var messageTypeElementIndex:Int = 0
      for element in messageType {
          output += "\(indent) messageType[\(messageTypeElementIndex)] {\n"
          element.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          messageTypeElementIndex++
      }
      var enumTypeElementIndex:Int = 0
      for element in enumType {
          output += "\(indent) enumType[\(enumTypeElementIndex)] {\n"
          element.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          enumTypeElementIndex++
      }
      var serviceElementIndex:Int = 0
      for element in service {
          output += "\(indent) service[\(serviceElementIndex)] {\n"
          element.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          serviceElementIndex++
      }
      var extensionElementIndex:Int = 0
      for element in extension {
          output += "\(indent) extension[\(extensionElementIndex)] {\n"
          element.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          extensionElementIndex++
      }
      if hasOptions {
        output += "\(indent) options {\n"
        options.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasSourceCodeInfo {
        output += "\(indent) sourceCodeInfo {\n"
        sourceCodeInfo.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var publicDependencyElementIndex:Int = 0
      for element in publicDependency  {
          output += "\(indent) publicDependency[\(publicDependencyElementIndex)]: \(element)\n"
          publicDependencyElementIndex++
      }
      var weakDependencyElementIndex:Int = 0
      for element in weakDependency  {
          output += "\(indent) weakDependency[\(weakDependencyElementIndex)]: \(element)\n"
          weakDependencyElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasPackage {
             hashCode = (hashCode &* 31) &+ package.hashValue
          }
          for element in dependency {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in messageType {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in enumType {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in service {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in extension {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasOptions {
            hashCode = (hashCode &* 31) &+ options.hashValue
          }
          if hasSourceCodeInfo {
            hashCode = (hashCode &* 31) &+ sourceCodeInfo.hashValue
          }
          for element in publicDependency {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          for element in weakDependency {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class PBFileDescriptorProtoBuilder : GeneratedMessageBuilder {
    private var result:PBFileDescriptorProto

    override init () {
       result = PBFileDescriptorProto()
    }
    var hasName:Bool {
         get {
              return result.hasName
         }
    }
    var name:String {
         get {
              return result.name
         }
         set (value) {
             result.hasName = true
             result.name = value
         }
    }
    func clearName() -> PBFileDescriptorProtoBuilder{
         result.hasName = false
         result.name = ""
         return self
    }
    var hasPackage:Bool {
         get {
              return result.hasPackage
         }
    }
    var package:String {
         get {
              return result.package
         }
         set (value) {
             result.hasPackage = true
             result.package = value
         }
    }
    func clearPackage() -> PBFileDescriptorProtoBuilder{
         result.hasPackage = false
         result.package = ""
         return self
    }
    var dependency:[String] {
         get {
             return result.dependency
         }
         set (array) {
             result.dependency = array
         }
    }
    func clearDependency() -> PBFileDescriptorProtoBuilder {
       result.dependency.removeAll(keepCapacity: false)
       return self
    }
    var publicDependency:[Int32] {
         get {
             return result.publicDependency
         }
         set (array) {
             result.publicDependency = array
         }
    }
    func clearPublicDependency() -> PBFileDescriptorProtoBuilder {
       result.publicDependency.removeAll(keepCapacity: false)
       return self
    }
    var weakDependency:[Int32] {
         get {
             return result.weakDependency
         }
         set (array) {
             result.weakDependency = array
         }
    }
    func clearWeakDependency() -> PBFileDescriptorProtoBuilder {
       result.weakDependency.removeAll(keepCapacity: false)
       return self
    }
    var messageType:[PBDescriptorProto] {
         get {
             return result.messageType
         }
         set (value) {
             result.messageType = value
         }
    }
    func clearMessageType() -> PBFileDescriptorProtoBuilder {
      result.messageType.removeAll(keepCapacity: false)
      return self
    }
    var enumType:[PBEnumDescriptorProto] {
         get {
             return result.enumType
         }
         set (value) {
             result.enumType = value
         }
    }
    func clearEnumType() -> PBFileDescriptorProtoBuilder {
      result.enumType.removeAll(keepCapacity: false)
      return self
    }
    var service:[PBServiceDescriptorProto] {
         get {
             return result.service
         }
         set (value) {
             result.service = value
         }
    }
    func clearService() -> PBFileDescriptorProtoBuilder {
      result.service.removeAll(keepCapacity: false)
      return self
    }
    var extension:[PBFieldDescriptorProto] {
         get {
             return result.extension
         }
         set (value) {
             result.extension = value
         }
    }
    func clearExtension() -> PBFileDescriptorProtoBuilder {
      result.extension.removeAll(keepCapacity: false)
      return self
    }
    var hasOptions:Bool {
         get {
             return result.hasOptions
         }
    }
    var options:PBFileOptions {
         get {
             return result.options     }
         set (value) {
             result.hasOptions = true
             result.options = value
         }
    }
    func setOptionsBuilder(builderForValue:PBFileOptionsBuilder) -> PBFileDescriptorProtoBuilder {
      options = builderForValue.build()
      return self
    }
    func mergeOptions(value:PBFileOptions) -> PBFileDescriptorProtoBuilder {
      if (result.hasOptions && result.options != PBFileOptions()) {
        result.options = PBFileOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
      } else {
        result.options = value
      }
      result.hasOptions = true
      return self
    }
    func clearOptions() -> PBFileDescriptorProtoBuilder {
      result.hasOptions = false
      result.options = PBFileOptions()
      return self
    }
    var hasSourceCodeInfo:Bool {
         get {
             return result.hasSourceCodeInfo
         }
    }
    var sourceCodeInfo:PBSourceCodeInfo {
         get {
             return result.sourceCodeInfo     }
         set (value) {
             result.hasSourceCodeInfo = true
             result.sourceCodeInfo = value
         }
    }
    func setSourceCodeInfoBuilder(builderForValue:PBSourceCodeInfoBuilder) -> PBFileDescriptorProtoBuilder {
      sourceCodeInfo = builderForValue.build()
      return self
    }
    func mergeSourceCodeInfo(value:PBSourceCodeInfo) -> PBFileDescriptorProtoBuilder {
      if (result.hasSourceCodeInfo && result.sourceCodeInfo != PBSourceCodeInfo()) {
        result.sourceCodeInfo = PBSourceCodeInfo.builderWithPrototype(result.sourceCodeInfo).mergeFrom(value).buildPartial()
      } else {
        result.sourceCodeInfo = value
      }
      result.hasSourceCodeInfo = true
      return self
    }
    func clearSourceCodeInfo() -> PBFileDescriptorProtoBuilder {
      result.hasSourceCodeInfo = false
      result.sourceCodeInfo = PBSourceCodeInfo()
      return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> PBFileDescriptorProtoBuilder {
      result = PBFileDescriptorProto()
      return self
    }
    override func clone() -> PBFileDescriptorProtoBuilder {
      return PBFileDescriptorProto.builderWithPrototype(result)
    }
    func build() -> PBFileDescriptorProto {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> PBFileDescriptorProto {
      var returnMe:PBFileDescriptorProto = result
      return returnMe
    }
    func mergeFrom(other:PBFileDescriptorProto) -> PBFileDescriptorProtoBuilder {
      if (other == PBFileDescriptorProto()) {
        return self
      }
      if other.hasName {
           name = other.name
      }
      if other.hasPackage {
           package = other.package
      }
      if !other.dependency.isEmpty {
          result.dependency += other.dependency
      }
      if !other.publicDependency.isEmpty {
          result.publicDependency += other.publicDependency
      }
      if !other.weakDependency.isEmpty {
          result.weakDependency += other.weakDependency
      }
      if !other.messageType.isEmpty  {
         result.messageType += other.messageType
      }
      if !other.enumType.isEmpty  {
         result.enumType += other.enumType
      }
      if !other.service.isEmpty  {
         result.service += other.service
      }
      if !other.extension.isEmpty  {
         result.extension += other.extension
      }
      if (other.hasOptions) {
          mergeOptions(other.options)
      }
      if (other.hasSourceCodeInfo) {
          mergeSourceCodeInfo(other.sourceCodeInfo)
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->PBFileDescriptorProtoBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileDescriptorProtoBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 10 {
            name = input.readString()
          }
          else if tag == 18 {
            package = input.readString()
          }
          else if tag == 26 {
            dependency += [input.readString()]
          }
          else if tag == 34 {
            var subBuilder = PBDescriptorProto.builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            messageType += [subBuilder.buildPartial()]
          }
          else if tag == 42 {
            var subBuilder = PBEnumDescriptorProto.builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            enumType += [subBuilder.buildPartial()]
          }
          else if tag == 50 {
            var subBuilder = PBServiceDescriptorProto.builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            service += [subBuilder.buildPartial()]
          }
          else if tag == 58 {
            var subBuilder = PBFieldDescriptorProto.builder()
            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            extension += [subBuilder.buildPartial()]
          }
          else if tag == 66 {
            var subBuilder:PBFileOptionsBuilder = PBFileOptions.builder()
            if hasOptions {
              subBuilder.mergeFrom(options)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            options = subBuilder.buildPartial()
          }
          else if tag == 74 {
            var subBuilder:PBSourceCodeInfoBuilder = PBSourceCodeInfo.builder()
            if hasSourceCodeInfo {
              subBuilder.mergeFrom(sourceCodeInfo)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            sourceCodeInfo = subBuilder.buildPartial()
          }
          else if tag == 80 {
            publicDependency += [input.readInt32()]
          }
          else if tag == 88 {
            weakDependency += [input.readInt32()]
          }
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    func == (lhs: PBDescriptorProto, rhs: PBDescriptorProto) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
           fieldCheck = fieldCheck && (lhs.field == rhs.field)
           fieldCheck = fieldCheck && (lhs.nestedType == rhs.nestedType)
           fieldCheck = fieldCheck && (lhs.enumType == rhs.enumType)
           fieldCheck = fieldCheck && (lhs.extensionRange == rhs.extensionRange)
           fieldCheck = fieldCheck && (lhs.extension == rhs.extension)
           fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    }
    class PBDescriptorProto : GeneratedMessage {
      private(set) var hasName:Bool = false
      private(set) var name:String = ""

      private(set) var hasOptions:Bool = false
      private(set) var options:PBMessageOptions = PBMessageOptions()
      private(set) var field:[PBFieldDescriptorProto]  = [PBFieldDescriptorProto]()
      private(set) var extension:[PBFieldDescriptorProto]  = [PBFieldDescriptorProto]()
      private(set) var nestedType:[PBDescriptorProto]  = [PBDescriptorProto]()
      private(set) var enumType:[PBEnumDescriptorProto]  = [PBEnumDescriptorProto]()
      private(set) var extensionRange:[PBDescriptorProtoExtensionRange]  = [PBDescriptorProtoExtensionRange]()
      override init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        var isInitfield:Bool = true
        for element in field {
            if (!element.isInitialized()) {
                isInitfield = false
                break 
            }
        }
        if !isInitfield {
         return isInitfield
         }
        var isInitextension:Bool = true
        for element in extension {
            if (!element.isInitialized()) {
                isInitextension = false
                break 
            }
        }
        if !isInitextension {
         return isInitextension
         }
        var isInitnestedType:Bool = true
        for element in nestedType {
            if (!element.isInitialized()) {
                isInitnestedType = false
                break 
            }
        }
        if !isInitnestedType {
         return isInitnestedType
         }
        var isInitenumType:Bool = true
        for element in enumType {
            if (!element.isInitialized()) {
                isInitenumType = false
                break 
            }
        }
        if !isInitenumType {
         return isInitenumType
         }
        if hasOptions {
          if !options.isInitialized() {
            return false
          }
        }
        return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasName {
          output.writeString(1, value:name)
        }
        for element in field {
            output.writeMessage(2, value:element)
        }
        for element in nestedType {
            output.writeMessage(3, value:element)
        }
        for element in enumType {
            output.writeMessage(4, value:element)
        }
        for element in extensionRange {
            output.writeMessage(5, value:element)
        }
        for element in extension {
            output.writeMessage(6, value:element)
        }
        if hasOptions {
          output.writeMessage(7, value:options)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
          return size
        }

        size = 0
        if hasName {
          size += WireFormat.computeStringSize(1, value:name)
        }
        for element in field {
            size += WireFormat.computeMessageSize(2, value:element)
        }
        for element in nestedType {
            size += WireFormat.computeMessageSize(3, value:element)
        }
        for element in enumType {
            size += WireFormat.computeMessageSize(4, value:element)
        }
        for element in extensionRange {
            size += WireFormat.computeMessageSize(5, value:element)
        }
        for element in extension {
            size += WireFormat.computeMessageSize(6, value:element)
        }
        if hasOptions {
          size += WireFormat.computeMessageSize(7, value:options)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBDescriptorProto {
        return PBDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> PBDescriptorProtoBuilder {
        return PBDescriptorProtoBuilder()
      }
      class func builderWithPrototype(prototype:PBDescriptorProto) -> PBDescriptorProtoBuilder {
        return PBDescriptorProto.builder().mergeFrom(prototype)
      }
      func builder() -> PBDescriptorProtoBuilder {
        return PBDescriptorProto.builder()
      }
      func toBuilder() -> PBDescriptorProtoBuilder {
        return PBDescriptorProto.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        if hasName {
          output += "\(indent) name: \(name) \n"
        }
        var fieldElementIndex:Int = 0
        for element in field {
            output += "\(indent) field[\(fieldElementIndex)] {\n"
            element.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent)}\n"
            fieldElementIndex++
        }
        var nestedTypeElementIndex:Int = 0
        for element in nestedType {
            output += "\(indent) nestedType[\(nestedTypeElementIndex)] {\n"
            element.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent)}\n"
            nestedTypeElementIndex++
        }
        var enumTypeElementIndex:Int = 0
        for element in enumType {
            output += "\(indent) enumType[\(enumTypeElementIndex)] {\n"
            element.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent)}\n"
            enumTypeElementIndex++
        }
        var extensionRangeElementIndex:Int = 0
        for element in extensionRange {
            output += "\(indent) extensionRange[\(extensionRangeElementIndex)] {\n"
            element.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent)}\n"
            extensionRangeElementIndex++
        }
        var extensionElementIndex:Int = 0
        for element in extension {
            output += "\(indent) extension[\(extensionElementIndex)] {\n"
            element.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent)}\n"
            extensionElementIndex++
        }
        if hasOptions {
          output += "\(indent) options {\n"
          options.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent) }\n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
       get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            for element in field {
                hashCode = (hashCode &* 31) &+ element.hashValue
            }
            for element in nestedType {
                hashCode = (hashCode &* 31) &+ element.hashValue
            }
            for element in enumType {
                hashCode = (hashCode &* 31) &+ element.hashValue
            }
            for element in extensionRange {
                hashCode = (hashCode &* 31) &+ element.hashValue
            }
            for element in extension {
                hashCode = (hashCode &* 31) &+ element.hashValue
            }
            if hasOptions {
              hashCode = (hashCode &* 31) &+ options.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
          }
        }
      }

      func == (lhs: PBDescriptorProtoExtensionRange, rhs: PBDescriptorProtoExtensionRange) -> Bool {
            if (lhs === rhs) {
              return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasStart == rhs.hasStart) && (!lhs.hasStart || lhs.start == rhs.start)
             fieldCheck = fieldCheck && (lhs.hasEnd == rhs.hasEnd) && (!lhs.hasEnd || lhs.end == rhs.end)
             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      }
      class PBDescriptorProtoExtensionRange : GeneratedMessage {
        private(set) var hasStart:Bool = false
        private(set) var start:Int32 = 0

        private(set) var hasEnd:Bool = false
        private(set) var end:Int32 = 0

        override init() {
             super.init()
        }
        override func isInitialized() -> Bool {
          return true
        }
        override func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasStart {
            output.writeInt32(1, value:start)
          }
          if hasEnd {
            output.writeInt32(2, value:end)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override func serializedSize() -> Int32 {
          var size:Int32 = memoizedSerializedSize
          if size != -1 {
            return size
          }

          size = 0
          if hasStart {
            size += WireFormat.computeInt32Size(1, value:start)
          }
          if hasEnd {
            size += WireFormat.computeInt32Size(2, value:end)
          }
          size += unknownFields.serializedSize()
          memoizedSerializedSize = size
          return size
        }
        class func parseFromData(data:[Byte]) -> PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromData(data).build()
        }
        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromInputStream(input:NSInputStream) -> PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromInputStream(input).build()
        }
        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream) -> PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromCodedInputStream(input).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBDescriptorProtoExtensionRange {
          return PBDescriptorProtoExtensionRange.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func builder() -> PBDescriptorProtoExtensionRangeBuilder {
          return PBDescriptorProtoExtensionRangeBuilder()
        }
        class func builderWithPrototype(prototype:PBDescriptorProtoExtensionRange) -> PBDescriptorProtoExtensionRangeBuilder {
          return PBDescriptorProtoExtensionRange.builder().mergeFrom(prototype)
        }
        func builder() -> PBDescriptorProtoExtensionRangeBuilder {
          return PBDescriptorProtoExtensionRange.builder()
        }
        func toBuilder() -> PBDescriptorProtoExtensionRangeBuilder {
          return PBDescriptorProtoExtensionRange.builderWithPrototype(self)
        }
        override func writeDescriptionTo(inout output:String, indent:String) {
          if hasStart {
            output += "\(indent) start: \(start) \n"
          }
          if hasEnd {
            output += "\(indent) end: \(end) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override var hashValue:Int {
         get {
              var hashCode:Int = 7
              if hasStart {
                 hashCode = (hashCode &* 31) &+ start.hashValue
              }
              if hasEnd {
                 hashCode = (hashCode &* 31) &+ end.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
            }
          }
        }

        class PBDescriptorProtoExtensionRangeBuilder : GeneratedMessageBuilder {
        private var result:PBDescriptorProtoExtensionRange

        override init () {
           result = PBDescriptorProtoExtensionRange()
        }
        var hasStart:Bool {
             get {
                  return result.hasStart
             }
        }
        var start:Int32 {
             get {
                  return result.start
             }
             set (value) {
                 result.hasStart = true
                 result.start = value
             }
        }
        func clearStart() -> PBDescriptorProtoExtensionRangeBuilder{
             result.hasStart = false
             result.start = 0
             return self
        }
        var hasEnd:Bool {
             get {
                  return result.hasEnd
             }
        }
        var end:Int32 {
             get {
                  return result.end
             }
             set (value) {
                 result.hasEnd = true
                 result.end = value
             }
        }
        func clearEnd() -> PBDescriptorProtoExtensionRangeBuilder{
             result.hasEnd = false
             result.end = 0
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> PBDescriptorProtoExtensionRangeBuilder {
          result = PBDescriptorProtoExtensionRange()
          return self
        }
        override func clone() -> PBDescriptorProtoExtensionRangeBuilder {
          return PBDescriptorProtoExtensionRange.builderWithPrototype(result)
        }
        func build() -> PBDescriptorProtoExtensionRange {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> PBDescriptorProtoExtensionRange {
          var returnMe:PBDescriptorProtoExtensionRange = result
          return returnMe
        }
        func mergeFrom(other:PBDescriptorProtoExtensionRange) -> PBDescriptorProtoExtensionRangeBuilder {
          if (other == PBDescriptorProtoExtensionRange()) {
            return self
          }
          if other.hasStart {
               start = other.start
          }
          if other.hasEnd {
               end = other.end
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->PBDescriptorProtoExtensionRangeBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBDescriptorProtoExtensionRangeBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 8 {
                start = input.readInt32()
              }
              else if tag == 16 {
                end = input.readInt32()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        class PBDescriptorProtoBuilder : GeneratedMessageBuilder {
        private var result:PBDescriptorProto

        override init () {
           result = PBDescriptorProto()
        }
        var hasName:Bool {
             get {
                  return result.hasName
             }
        }
        var name:String {
             get {
                  return result.name
             }
             set (value) {
                 result.hasName = true
                 result.name = value
             }
        }
        func clearName() -> PBDescriptorProtoBuilder{
             result.hasName = false
             result.name = ""
             return self
        }
        var field:[PBFieldDescriptorProto] {
             get {
                 return result.field
             }
             set (value) {
                 result.field = value
             }
        }
        func clearField() -> PBDescriptorProtoBuilder {
          result.field.removeAll(keepCapacity: false)
          return self
        }
        var extension:[PBFieldDescriptorProto] {
             get {
                 return result.extension
             }
             set (value) {
                 result.extension = value
             }
        }
        func clearExtension() -> PBDescriptorProtoBuilder {
          result.extension.removeAll(keepCapacity: false)
          return self
        }
        var nestedType:[PBDescriptorProto] {
             get {
                 return result.nestedType
             }
             set (value) {
                 result.nestedType = value
             }
        }
        func clearNestedType() -> PBDescriptorProtoBuilder {
          result.nestedType.removeAll(keepCapacity: false)
          return self
        }
        var enumType:[PBEnumDescriptorProto] {
             get {
                 return result.enumType
             }
             set (value) {
                 result.enumType = value
             }
        }
        func clearEnumType() -> PBDescriptorProtoBuilder {
          result.enumType.removeAll(keepCapacity: false)
          return self
        }
        var extensionRange:[PBDescriptorProtoExtensionRange] {
             get {
                 return result.extensionRange
             }
             set (value) {
                 result.extensionRange = value
             }
        }
        func clearExtensionRange() -> PBDescriptorProtoBuilder {
          result.extensionRange.removeAll(keepCapacity: false)
          return self
        }
        var hasOptions:Bool {
             get {
                 return result.hasOptions
             }
        }
        var options:PBMessageOptions {
             get {
                 return result.options     }
             set (value) {
                 result.hasOptions = true
                 result.options = value
             }
        }
        func setOptionsBuilder(builderForValue:PBMessageOptionsBuilder) -> PBDescriptorProtoBuilder {
          options = builderForValue.build()
          return self
        }
        func mergeOptions(value:PBMessageOptions) -> PBDescriptorProtoBuilder {
          if (result.hasOptions && result.options != PBMessageOptions()) {
            result.options = PBMessageOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
          } else {
            result.options = value
          }
          result.hasOptions = true
          return self
        }
        func clearOptions() -> PBDescriptorProtoBuilder {
          result.hasOptions = false
          result.options = PBMessageOptions()
          return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> PBDescriptorProtoBuilder {
          result = PBDescriptorProto()
          return self
        }
        override func clone() -> PBDescriptorProtoBuilder {
          return PBDescriptorProto.builderWithPrototype(result)
        }
        func build() -> PBDescriptorProto {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> PBDescriptorProto {
          var returnMe:PBDescriptorProto = result
          return returnMe
        }
        func mergeFrom(other:PBDescriptorProto) -> PBDescriptorProtoBuilder {
          if (other == PBDescriptorProto()) {
            return self
          }
          if other.hasName {
               name = other.name
          }
          if !other.field.isEmpty  {
             result.field += other.field
          }
          if !other.extension.isEmpty  {
             result.extension += other.extension
          }
          if !other.nestedType.isEmpty  {
             result.nestedType += other.nestedType
          }
          if !other.enumType.isEmpty  {
             result.enumType += other.enumType
          }
          if !other.extensionRange.isEmpty  {
             result.extensionRange += other.extensionRange
          }
          if (other.hasOptions) {
              mergeOptions(other.options)
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->PBDescriptorProtoBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBDescriptorProtoBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 10 {
                name = input.readString()
              }
              else if tag == 18 {
                var subBuilder = PBFieldDescriptorProto.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                field += [subBuilder.buildPartial()]
              }
              else if tag == 26 {
                var subBuilder = PBDescriptorProto.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                nestedType += [subBuilder.buildPartial()]
              }
              else if tag == 34 {
                var subBuilder = PBEnumDescriptorProto.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                enumType += [subBuilder.buildPartial()]
              }
              else if tag == 42 {
                var subBuilder = PBDescriptorProtoExtensionRange.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                extensionRange += [subBuilder.buildPartial()]
              }
              else if tag == 50 {
                var subBuilder = PBFieldDescriptorProto.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                extension += [subBuilder.buildPartial()]
              }
              else if tag == 58 {
                var subBuilder:PBMessageOptionsBuilder = PBMessageOptions.builder()
                if hasOptions {
                  subBuilder.mergeFrom(options)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                options = subBuilder.buildPartial()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        func == (lhs: PBFieldDescriptorProto, rhs: PBFieldDescriptorProto) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
               fieldCheck = fieldCheck && (lhs.hasExtendee == rhs.hasExtendee) && (!lhs.hasExtendee || lhs.extendee == rhs.extendee)
               fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
               fieldCheck = fieldCheck && (lhs.hasLabel == rhs.hasLabel) && (!lhs.hasLabel || lhs.label == rhs.label)
               fieldCheck = fieldCheck && (lhs.hasType == rhs.hasType) && (!lhs.hasType || lhs.type == rhs.type)
               fieldCheck = fieldCheck && (lhs.hasTypeName == rhs.hasTypeName) && (!lhs.hasTypeName || lhs.typeName == rhs.typeName)
               fieldCheck = fieldCheck && (lhs.hasDefaultValue == rhs.hasDefaultValue) && (!lhs.hasDefaultValue || lhs.defaultValue == rhs.defaultValue)
               fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        }
        class PBFieldDescriptorProto : GeneratedMessage {
          private(set) var hasName:Bool = false
          private(set) var name:String = ""

          private(set) var hasNumber:Bool = false
          private(set) var number:Int32 = 0

          private(set) var label:PBFieldDescriptorProtoLabel = .PBFieldDescriptorProtoLabelLabelOptional
          private(set) var hasLabel:Bool = false
          private(set) var type:PBFieldDescriptorProtoType = .PBFieldDescriptorProtoTypeTypeDouble
          private(set) var hasType:Bool = false
          private(set) var hasTypeName:Bool = false
          private(set) var typeName:String = ""

          private(set) var hasExtendee:Bool = false
          private(set) var extendee:String = ""

          private(set) var hasDefaultValue:Bool = false
          private(set) var defaultValue:String = ""

          private(set) var hasOptions:Bool = false
          private(set) var options:PBFieldOptions = PBFieldOptions()
          override init() {
               super.init()
          }
          override func isInitialized() -> Bool {
            if hasOptions {
              if !options.isInitialized() {
                return false
              }
            }
            return true
          }
          override func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasName {
              output.writeString(1, value:name)
            }
            if hasExtendee {
              output.writeString(2, value:extendee)
            }
            if hasNumber {
              output.writeInt32(3, value:number)
            }
            if hasLabel {
              output.writeEnum(4, value:label.toRaw())
            }
            if hasType {
              output.writeEnum(5, value:type.toRaw())
            }
            if hasTypeName {
              output.writeString(6, value:typeName)
            }
            if hasDefaultValue {
              output.writeString(7, value:defaultValue)
            }
            if hasOptions {
              output.writeMessage(8, value:options)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
              return size
            }

            size = 0
            if hasName {
              size += WireFormat.computeStringSize(1, value:name)
            }
            if hasExtendee {
              size += WireFormat.computeStringSize(2, value:extendee)
            }
            if hasNumber {
              size += WireFormat.computeInt32Size(3, value:number)
            }
            if (hasLabel) {
              size += WireFormat.computeEnumSize(4, value:label.toRaw())
            }
            if (hasType) {
              size += WireFormat.computeEnumSize(5, value:type.toRaw())
            }
            if hasTypeName {
              size += WireFormat.computeStringSize(6, value:typeName)
            }
            if hasDefaultValue {
              size += WireFormat.computeStringSize(7, value:defaultValue)
            }
            if hasOptions {
              size += WireFormat.computeMessageSize(8, value:options)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          class func parseFromData(data:[Byte]) -> PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromData(data).build()
          }
          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromInputStream(input:NSInputStream) -> PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromInputStream(input).build()
          }
          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream) -> PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromCodedInputStream(input).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFieldDescriptorProto {
            return PBFieldDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func builder() -> PBFieldDescriptorProtoBuilder {
            return PBFieldDescriptorProtoBuilder()
          }
          class func builderWithPrototype(prototype:PBFieldDescriptorProto) -> PBFieldDescriptorProtoBuilder {
            return PBFieldDescriptorProto.builder().mergeFrom(prototype)
          }
          func builder() -> PBFieldDescriptorProtoBuilder {
            return PBFieldDescriptorProto.builder()
          }
          func toBuilder() -> PBFieldDescriptorProtoBuilder {
            return PBFieldDescriptorProto.builderWithPrototype(self)
          }
          override func writeDescriptionTo(inout output:String, indent:String) {
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            if hasExtendee {
              output += "\(indent) extendee: \(extendee) \n"
            }
            if hasNumber {
              output += "\(indent) number: \(number) \n"
            }
            if (hasLabel) {
              output += "\(indent) label: \(label.toRaw())\n"
            }
            if (hasType) {
              output += "\(indent) type: \(type.toRaw())\n"
            }
            if hasTypeName {
              output += "\(indent) typeName: \(typeName) \n"
            }
            if hasDefaultValue {
              output += "\(indent) defaultValue: \(defaultValue) \n"
            }
            if hasOptions {
              output += "\(indent) options {\n"
              options.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override var hashValue:Int {
           get {
                var hashCode:Int = 7
                if hasName {
                   hashCode = (hashCode &* 31) &+ name.hashValue
                }
                if hasExtendee {
                   hashCode = (hashCode &* 31) &+ extendee.hashValue
                }
                if hasNumber {
                   hashCode = (hashCode &* 31) &+ number.hashValue
                }
                if hasLabel {
                   hashCode = (hashCode &* 31) &+ Int(label.toRaw())
                }
                if hasType {
                   hashCode = (hashCode &* 31) &+ Int(type.toRaw())
                }
                if hasTypeName {
                   hashCode = (hashCode &* 31) &+ typeName.hashValue
                }
                if hasDefaultValue {
                   hashCode = (hashCode &* 31) &+ defaultValue.hashValue
                }
                if hasOptions {
                  hashCode = (hashCode &* 31) &+ options.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
              }
            }
          }

          enum PBFieldDescriptorProtoType:Int32 {
            case PBFieldDescriptorProtoTypeTypeDouble = 1
            case PBFieldDescriptorProtoTypeTypeFloat = 2
            case PBFieldDescriptorProtoTypeTypeInt64 = 3
            case PBFieldDescriptorProtoTypeTypeUint64 = 4
            case PBFieldDescriptorProtoTypeTypeInt32 = 5
            case PBFieldDescriptorProtoTypeTypeFixed64 = 6
            case PBFieldDescriptorProtoTypeTypeFixed32 = 7
            case PBFieldDescriptorProtoTypeTypeBool = 8
            case PBFieldDescriptorProtoTypeTypeString = 9
            case PBFieldDescriptorProtoTypeTypeGroup = 10
            case PBFieldDescriptorProtoTypeTypeMessage = 11
            case PBFieldDescriptorProtoTypeTypeBytes = 12
            case PBFieldDescriptorProtoTypeTypeUint32 = 13
            case PBFieldDescriptorProtoTypeTypeEnum = 14
            case PBFieldDescriptorProtoTypeTypeSfixed32 = 15
            case PBFieldDescriptorProtoTypeTypeSfixed64 = 16
            case PBFieldDescriptorProtoTypeTypeSint32 = 17
            case PBFieldDescriptorProtoTypeTypeSint64 = 18

            static func PBFieldDescriptorProtoTypeIsValidValue(value:PBFieldDescriptorProtoType) ->Bool {
              switch value {
                case .PBFieldDescriptorProtoTypeTypeDouble, .PBFieldDescriptorProtoTypeTypeFloat, .PBFieldDescriptorProtoTypeTypeInt64, .PBFieldDescriptorProtoTypeTypeUint64, .PBFieldDescriptorProtoTypeTypeInt32, .PBFieldDescriptorProtoTypeTypeFixed64, .PBFieldDescriptorProtoTypeTypeFixed32, .PBFieldDescriptorProtoTypeTypeBool, .PBFieldDescriptorProtoTypeTypeString, .PBFieldDescriptorProtoTypeTypeGroup, .PBFieldDescriptorProtoTypeTypeMessage, .PBFieldDescriptorProtoTypeTypeBytes, .PBFieldDescriptorProtoTypeTypeUint32, .PBFieldDescriptorProtoTypeTypeEnum, .PBFieldDescriptorProtoTypeTypeSfixed32, .PBFieldDescriptorProtoTypeTypeSfixed64, .PBFieldDescriptorProtoTypeTypeSint32, .PBFieldDescriptorProtoTypeTypeSint64:
                  return true;
                default:
                  return false;
              }
            }
          }

          enum PBFieldDescriptorProtoLabel:Int32 {
            case PBFieldDescriptorProtoLabelLabelOptional = 1
            case PBFieldDescriptorProtoLabelLabelRequired = 2
            case PBFieldDescriptorProtoLabelLabelRepeated = 3

            static func PBFieldDescriptorProtoLabelIsValidValue(value:PBFieldDescriptorProtoLabel) ->Bool {
              switch value {
                case .PBFieldDescriptorProtoLabelLabelOptional, .PBFieldDescriptorProtoLabelLabelRequired, .PBFieldDescriptorProtoLabelLabelRepeated:
                  return true;
                default:
                  return false;
              }
            }
          }

          class PBFieldDescriptorProtoBuilder : GeneratedMessageBuilder {
          private var result:PBFieldDescriptorProto

          override init () {
             result = PBFieldDescriptorProto()
          }
          var hasName:Bool {
               get {
                    return result.hasName
               }
          }
          var name:String {
               get {
                    return result.name
               }
               set (value) {
                   result.hasName = true
                   result.name = value
               }
          }
          func clearName() -> PBFieldDescriptorProtoBuilder{
               result.hasName = false
               result.name = ""
               return self
          }
          var hasNumber:Bool {
               get {
                    return result.hasNumber
               }
          }
          var number:Int32 {
               get {
                    return result.number
               }
               set (value) {
                   result.hasNumber = true
                   result.number = value
               }
          }
          func clearNumber() -> PBFieldDescriptorProtoBuilder{
               result.hasNumber = false
               result.number = 0
               return self
          }
            var hasLabel:Bool{
                get {
                    return result.hasLabel
                }
            }
            var label:PBFieldDescriptorProtoLabel {
                get {
                    return result.label
                }
                set (value) {
                    result.hasLabel = true
                    result.label = value
                }
            }
            func clearLabel() -> PBFieldDescriptorProtoBuilder {
               result.hasLabel = false
               result.label = .PBFieldDescriptorProtoLabelLabelOptional
               return self
            }
            var hasType:Bool{
                get {
                    return result.hasType
                }
            }
            var type:PBFieldDescriptorProtoType {
                get {
                    return result.type
                }
                set (value) {
                    result.hasType = true
                    result.type = value
                }
            }
            func clearType() -> PBFieldDescriptorProtoBuilder {
               result.hasType = false
               result.type = .PBFieldDescriptorProtoTypeTypeDouble
               return self
            }
          var hasTypeName:Bool {
               get {
                    return result.hasTypeName
               }
          }
          var typeName:String {
               get {
                    return result.typeName
               }
               set (value) {
                   result.hasTypeName = true
                   result.typeName = value
               }
          }
          func clearTypeName() -> PBFieldDescriptorProtoBuilder{
               result.hasTypeName = false
               result.typeName = ""
               return self
          }
          var hasExtendee:Bool {
               get {
                    return result.hasExtendee
               }
          }
          var extendee:String {
               get {
                    return result.extendee
               }
               set (value) {
                   result.hasExtendee = true
                   result.extendee = value
               }
          }
          func clearExtendee() -> PBFieldDescriptorProtoBuilder{
               result.hasExtendee = false
               result.extendee = ""
               return self
          }
          var hasDefaultValue:Bool {
               get {
                    return result.hasDefaultValue
               }
          }
          var defaultValue:String {
               get {
                    return result.defaultValue
               }
               set (value) {
                   result.hasDefaultValue = true
                   result.defaultValue = value
               }
          }
          func clearDefaultValue() -> PBFieldDescriptorProtoBuilder{
               result.hasDefaultValue = false
               result.defaultValue = ""
               return self
          }
          var hasOptions:Bool {
               get {
                   return result.hasOptions
               }
          }
          var options:PBFieldOptions {
               get {
                   return result.options     }
               set (value) {
                   result.hasOptions = true
                   result.options = value
               }
          }
          func setOptionsBuilder(builderForValue:PBFieldOptionsBuilder) -> PBFieldDescriptorProtoBuilder {
            options = builderForValue.build()
            return self
          }
          func mergeOptions(value:PBFieldOptions) -> PBFieldDescriptorProtoBuilder {
            if (result.hasOptions && result.options != PBFieldOptions()) {
              result.options = PBFieldOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
            } else {
              result.options = value
            }
            result.hasOptions = true
            return self
          }
          func clearOptions() -> PBFieldDescriptorProtoBuilder {
            result.hasOptions = false
            result.options = PBFieldOptions()
            return self
          }
          override var internalGetResult:GeneratedMessage {
               get {
                  return result
               }
          }
          override func clear() -> PBFieldDescriptorProtoBuilder {
            result = PBFieldDescriptorProto()
            return self
          }
          override func clone() -> PBFieldDescriptorProtoBuilder {
            return PBFieldDescriptorProto.builderWithPrototype(result)
          }
          func build() -> PBFieldDescriptorProto {
               checkInitialized()
               return buildPartial()
          }
          func buildPartial() -> PBFieldDescriptorProto {
            var returnMe:PBFieldDescriptorProto = result
            return returnMe
          }
          func mergeFrom(other:PBFieldDescriptorProto) -> PBFieldDescriptorProtoBuilder {
            if (other == PBFieldDescriptorProto()) {
              return self
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasNumber {
                 number = other.number
            }
            if other.hasLabel {
                 label = other.label
            }
            if other.hasType {
                 type = other.type
            }
            if other.hasTypeName {
                 typeName = other.typeName
            }
            if other.hasExtendee {
                 extendee = other.extendee
            }
            if other.hasDefaultValue {
                 defaultValue = other.defaultValue
            }
            if (other.hasOptions) {
                mergeOptions(other.options)
            }
              mergeUnknownFields(other.unknownFields)
            return self
          }
          override func mergeFromCodedInputStream(input:CodedInputStream) ->PBFieldDescriptorProtoBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFieldDescriptorProtoBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag:Int32 = input.readTag()
                if tag == 0 {
                     self.unknownFields = unknownFieldsBuilder.build()
                     return self}
                else if tag == 10 {
                  name = input.readString()
                }
                else if tag == 18 {
                  extendee = input.readString()
                }
                else if tag == 24 {
                  number = input.readInt32()
                }
                else if tag == 32 {
                  var value = input.readEnum()
                  var enums:PBFieldDescriptorProtoLabel = PBFieldDescriptorProtoLabel.fromRaw(value)!
                  if (PBFieldDescriptorProtoLabel.PBFieldDescriptorProtoLabelIsValidValue(enums)) {
                       label = enums
                  } else {
                       unknownFieldsBuilder.mergeVarintField(4, value:Int64(value))
                  }
                }
                else if tag == 40 {
                  var value = input.readEnum()
                  var enums:PBFieldDescriptorProtoType = PBFieldDescriptorProtoType.fromRaw(value)!
                  if (PBFieldDescriptorProtoType.PBFieldDescriptorProtoTypeIsValidValue(enums)) {
                       type = enums
                  } else {
                       unknownFieldsBuilder.mergeVarintField(5, value:Int64(value))
                  }
                }
                else if tag == 50 {
                  typeName = input.readString()
                }
                else if tag == 58 {
                  defaultValue = input.readString()
                }
                else if tag == 66 {
                  var subBuilder:PBFieldOptionsBuilder = PBFieldOptions.builder()
                  if hasOptions {
                    subBuilder.mergeFrom(options)
                  }
                  input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                  options = subBuilder.buildPartial()
                }
                else {
                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                          unknownFields = unknownFieldsBuilder.build()
                          return self
                      }
                }
                }
             }
          }

          func == (lhs: PBEnumDescriptorProto, rhs: PBEnumDescriptorProto) -> Bool {
                if (lhs === rhs) {
                  return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
                 fieldCheck = fieldCheck && (lhs.value == rhs.value)
                 fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          }
          class PBEnumDescriptorProto : GeneratedMessage {
            private(set) var hasName:Bool = false
            private(set) var name:String = ""

            private(set) var hasOptions:Bool = false
            private(set) var options:PBEnumOptions = PBEnumOptions()
            private(set) var value:[PBEnumValueDescriptorProto]  = [PBEnumValueDescriptorProto]()
            override init() {
                 super.init()
            }
            override func isInitialized() -> Bool {
              var isInitvalue:Bool = true
              for element in value {
                  if (!element.isInitialized()) {
                      isInitvalue = false
                      break 
                  }
              }
              if !isInitvalue {
               return isInitvalue
               }
              if hasOptions {
                if !options.isInitialized() {
                  return false
                }
              }
              return true
            }
            override func writeToCodedOutputStream(output:CodedOutputStream) {
              if hasName {
                output.writeString(1, value:name)
              }
              for element in value {
                  output.writeMessage(2, value:element)
              }
              if hasOptions {
                output.writeMessage(3, value:options)
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override func serializedSize() -> Int32 {
              var size:Int32 = memoizedSerializedSize
              if size != -1 {
                return size
              }

              size = 0
              if hasName {
                size += WireFormat.computeStringSize(1, value:name)
              }
              for element in value {
                  size += WireFormat.computeMessageSize(2, value:element)
              }
              if hasOptions {
                size += WireFormat.computeMessageSize(3, value:options)
              }
              size += unknownFields.serializedSize()
              memoizedSerializedSize = size
              return size
            }
            class func parseFromData(data:[Byte]) -> PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromData(data).build()
            }
            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromInputStream(input:NSInputStream) -> PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromInputStream(input).build()
            }
            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream) -> PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromCodedInputStream(input).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumDescriptorProto {
              return PBEnumDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func builder() -> PBEnumDescriptorProtoBuilder {
              return PBEnumDescriptorProtoBuilder()
            }
            class func builderWithPrototype(prototype:PBEnumDescriptorProto) -> PBEnumDescriptorProtoBuilder {
              return PBEnumDescriptorProto.builder().mergeFrom(prototype)
            }
            func builder() -> PBEnumDescriptorProtoBuilder {
              return PBEnumDescriptorProto.builder()
            }
            func toBuilder() -> PBEnumDescriptorProtoBuilder {
              return PBEnumDescriptorProto.builderWithPrototype(self)
            }
            override func writeDescriptionTo(inout output:String, indent:String) {
              if hasName {
                output += "\(indent) name: \(name) \n"
              }
              var valueElementIndex:Int = 0
              for element in value {
                  output += "\(indent) value[\(valueElementIndex)] {\n"
                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                  output += "\(indent)}\n"
                  valueElementIndex++
              }
              if hasOptions {
                output += "\(indent) options {\n"
                options.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent) }\n"
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override var hashValue:Int {
             get {
                  var hashCode:Int = 7
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  for element in value {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  if hasOptions {
                    hashCode = (hashCode &* 31) &+ options.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
                }
              }
            }

            class PBEnumDescriptorProtoBuilder : GeneratedMessageBuilder {
            private var result:PBEnumDescriptorProto

            override init () {
               result = PBEnumDescriptorProto()
            }
            var hasName:Bool {
                 get {
                      return result.hasName
                 }
            }
            var name:String {
                 get {
                      return result.name
                 }
                 set (value) {
                     result.hasName = true
                     result.name = value
                 }
            }
            func clearName() -> PBEnumDescriptorProtoBuilder{
                 result.hasName = false
                 result.name = ""
                 return self
            }
            var value:[PBEnumValueDescriptorProto] {
                 get {
                     return result.value
                 }
                 set (value) {
                     result.value = value
                 }
            }
            func clearValue() -> PBEnumDescriptorProtoBuilder {
              result.value.removeAll(keepCapacity: false)
              return self
            }
            var hasOptions:Bool {
                 get {
                     return result.hasOptions
                 }
            }
            var options:PBEnumOptions {
                 get {
                     return result.options     }
                 set (value) {
                     result.hasOptions = true
                     result.options = value
                 }
            }
            func setOptionsBuilder(builderForValue:PBEnumOptionsBuilder) -> PBEnumDescriptorProtoBuilder {
              options = builderForValue.build()
              return self
            }
            func mergeOptions(value:PBEnumOptions) -> PBEnumDescriptorProtoBuilder {
              if (result.hasOptions && result.options != PBEnumOptions()) {
                result.options = PBEnumOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
              } else {
                result.options = value
              }
              result.hasOptions = true
              return self
            }
            func clearOptions() -> PBEnumDescriptorProtoBuilder {
              result.hasOptions = false
              result.options = PBEnumOptions()
              return self
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> PBEnumDescriptorProtoBuilder {
              result = PBEnumDescriptorProto()
              return self
            }
            override func clone() -> PBEnumDescriptorProtoBuilder {
              return PBEnumDescriptorProto.builderWithPrototype(result)
            }
            func build() -> PBEnumDescriptorProto {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> PBEnumDescriptorProto {
              var returnMe:PBEnumDescriptorProto = result
              return returnMe
            }
            func mergeFrom(other:PBEnumDescriptorProto) -> PBEnumDescriptorProtoBuilder {
              if (other == PBEnumDescriptorProto()) {
                return self
              }
              if other.hasName {
                   name = other.name
              }
              if !other.value.isEmpty  {
                 result.value += other.value
              }
              if (other.hasOptions) {
                  mergeOptions(other.options)
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->PBEnumDescriptorProtoBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumDescriptorProtoBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else if tag == 10 {
                    name = input.readString()
                  }
                  else if tag == 18 {
                    var subBuilder = PBEnumValueDescriptorProto.builder()
                    input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                    value += [subBuilder.buildPartial()]
                  }
                  else if tag == 26 {
                    var subBuilder:PBEnumOptionsBuilder = PBEnumOptions.builder()
                    if hasOptions {
                      subBuilder.mergeFrom(options)
                    }
                    input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                    options = subBuilder.buildPartial()
                  }
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }

            func == (lhs: PBEnumValueDescriptorProto, rhs: PBEnumValueDescriptorProto) -> Bool {
                  if (lhs === rhs) {
                    return true
                  }
                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
                   fieldCheck = fieldCheck && (lhs.hasNumber == rhs.hasNumber) && (!lhs.hasNumber || lhs.number == rhs.number)
                   fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            }
            class PBEnumValueDescriptorProto : GeneratedMessage {
              private(set) var hasName:Bool = false
              private(set) var name:String = ""

              private(set) var hasNumber:Bool = false
              private(set) var number:Int32 = 0

              private(set) var hasOptions:Bool = false
              private(set) var options:PBEnumValueOptions = PBEnumValueOptions()
              override init() {
                   super.init()
              }
              override func isInitialized() -> Bool {
                if hasOptions {
                  if !options.isInitialized() {
                    return false
                  }
                }
                return true
              }
              override func writeToCodedOutputStream(output:CodedOutputStream) {
                if hasName {
                  output.writeString(1, value:name)
                }
                if hasNumber {
                  output.writeInt32(2, value:number)
                }
                if hasOptions {
                  output.writeMessage(3, value:options)
                }
                unknownFields.writeToCodedOutputStream(output)
              }
              override func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                  return size
                }

                size = 0
                if hasName {
                  size += WireFormat.computeStringSize(1, value:name)
                }
                if hasNumber {
                  size += WireFormat.computeInt32Size(2, value:number)
                }
                if hasOptions {
                  size += WireFormat.computeMessageSize(3, value:options)
                }
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              class func parseFromData(data:[Byte]) -> PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromData(data).build()
              }
              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromInputStream(input:NSInputStream) -> PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromInputStream(input).build()
              }
              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream) -> PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromCodedInputStream(input).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumValueDescriptorProto {
                return PBEnumValueDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func builder() -> PBEnumValueDescriptorProtoBuilder {
                return PBEnumValueDescriptorProtoBuilder()
              }
              class func builderWithPrototype(prototype:PBEnumValueDescriptorProto) -> PBEnumValueDescriptorProtoBuilder {
                return PBEnumValueDescriptorProto.builder().mergeFrom(prototype)
              }
              func builder() -> PBEnumValueDescriptorProtoBuilder {
                return PBEnumValueDescriptorProto.builder()
              }
              func toBuilder() -> PBEnumValueDescriptorProtoBuilder {
                return PBEnumValueDescriptorProto.builderWithPrototype(self)
              }
              override func writeDescriptionTo(inout output:String, indent:String) {
                if hasName {
                  output += "\(indent) name: \(name) \n"
                }
                if hasNumber {
                  output += "\(indent) number: \(number) \n"
                }
                if hasOptions {
                  output += "\(indent) options {\n"
                  options.writeDescriptionTo(&output, indent:"\(indent)  ")
                  output += "\(indent) }\n"
                }
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override var hashValue:Int {
               get {
                    var hashCode:Int = 7
                    if hasName {
                       hashCode = (hashCode &* 31) &+ name.hashValue
                    }
                    if hasNumber {
                       hashCode = (hashCode &* 31) &+ number.hashValue
                    }
                    if hasOptions {
                      hashCode = (hashCode &* 31) &+ options.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                  }
                }
              }

              class PBEnumValueDescriptorProtoBuilder : GeneratedMessageBuilder {
              private var result:PBEnumValueDescriptorProto

              override init () {
                 result = PBEnumValueDescriptorProto()
              }
              var hasName:Bool {
                   get {
                        return result.hasName
                   }
              }
              var name:String {
                   get {
                        return result.name
                   }
                   set (value) {
                       result.hasName = true
                       result.name = value
                   }
              }
              func clearName() -> PBEnumValueDescriptorProtoBuilder{
                   result.hasName = false
                   result.name = ""
                   return self
              }
              var hasNumber:Bool {
                   get {
                        return result.hasNumber
                   }
              }
              var number:Int32 {
                   get {
                        return result.number
                   }
                   set (value) {
                       result.hasNumber = true
                       result.number = value
                   }
              }
              func clearNumber() -> PBEnumValueDescriptorProtoBuilder{
                   result.hasNumber = false
                   result.number = 0
                   return self
              }
              var hasOptions:Bool {
                   get {
                       return result.hasOptions
                   }
              }
              var options:PBEnumValueOptions {
                   get {
                       return result.options     }
                   set (value) {
                       result.hasOptions = true
                       result.options = value
                   }
              }
              func setOptionsBuilder(builderForValue:PBEnumValueOptionsBuilder) -> PBEnumValueDescriptorProtoBuilder {
                options = builderForValue.build()
                return self
              }
              func mergeOptions(value:PBEnumValueOptions) -> PBEnumValueDescriptorProtoBuilder {
                if (result.hasOptions && result.options != PBEnumValueOptions()) {
                  result.options = PBEnumValueOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
                } else {
                  result.options = value
                }
                result.hasOptions = true
                return self
              }
              func clearOptions() -> PBEnumValueDescriptorProtoBuilder {
                result.hasOptions = false
                result.options = PBEnumValueOptions()
                return self
              }
              override var internalGetResult:GeneratedMessage {
                   get {
                      return result
                   }
              }
              override func clear() -> PBEnumValueDescriptorProtoBuilder {
                result = PBEnumValueDescriptorProto()
                return self
              }
              override func clone() -> PBEnumValueDescriptorProtoBuilder {
                return PBEnumValueDescriptorProto.builderWithPrototype(result)
              }
              func build() -> PBEnumValueDescriptorProto {
                   checkInitialized()
                   return buildPartial()
              }
              func buildPartial() -> PBEnumValueDescriptorProto {
                var returnMe:PBEnumValueDescriptorProto = result
                return returnMe
              }
              func mergeFrom(other:PBEnumValueDescriptorProto) -> PBEnumValueDescriptorProtoBuilder {
                if (other == PBEnumValueDescriptorProto()) {
                  return self
                }
                if other.hasName {
                     name = other.name
                }
                if other.hasNumber {
                     number = other.number
                }
                if (other.hasOptions) {
                    mergeOptions(other.options)
                }
                  mergeUnknownFields(other.unknownFields)
                return self
              }
              override func mergeFromCodedInputStream(input:CodedInputStream) ->PBEnumValueDescriptorProtoBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumValueDescriptorProtoBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag:Int32 = input.readTag()
                    if tag == 0 {
                         self.unknownFields = unknownFieldsBuilder.build()
                         return self}
                    else if tag == 10 {
                      name = input.readString()
                    }
                    else if tag == 16 {
                      number = input.readInt32()
                    }
                    else if tag == 26 {
                      var subBuilder:PBEnumValueOptionsBuilder = PBEnumValueOptions.builder()
                      if hasOptions {
                        subBuilder.mergeFrom(options)
                      }
                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                      options = subBuilder.buildPartial()
                    }
                    else {
                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                              unknownFields = unknownFieldsBuilder.build()
                              return self
                          }
                    }
                    }
                 }
              }

              func == (lhs: PBServiceDescriptorProto, rhs: PBServiceDescriptorProto) -> Bool {
                    if (lhs === rhs) {
                      return true
                    }
                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                    fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
                     fieldCheck = fieldCheck && (lhs.method == rhs.method)
                     fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
              }
              class PBServiceDescriptorProto : GeneratedMessage {
                private(set) var hasName:Bool = false
                private(set) var name:String = ""

                private(set) var hasOptions:Bool = false
                private(set) var options:PBServiceOptions = PBServiceOptions()
                private(set) var method:[PBMethodDescriptorProto]  = [PBMethodDescriptorProto]()
                override init() {
                     super.init()
                }
                override func isInitialized() -> Bool {
                  var isInitmethod:Bool = true
                  for element in method {
                      if (!element.isInitialized()) {
                          isInitmethod = false
                          break 
                      }
                  }
                  if !isInitmethod {
                   return isInitmethod
                   }
                  if hasOptions {
                    if !options.isInitialized() {
                      return false
                    }
                  }
                  return true
                }
                override func writeToCodedOutputStream(output:CodedOutputStream) {
                  if hasName {
                    output.writeString(1, value:name)
                  }
                  for element in method {
                      output.writeMessage(2, value:element)
                  }
                  if hasOptions {
                    output.writeMessage(3, value:options)
                  }
                  unknownFields.writeToCodedOutputStream(output)
                }
                override func serializedSize() -> Int32 {
                  var size:Int32 = memoizedSerializedSize
                  if size != -1 {
                    return size
                  }

                  size = 0
                  if hasName {
                    size += WireFormat.computeStringSize(1, value:name)
                  }
                  for element in method {
                      size += WireFormat.computeMessageSize(2, value:element)
                  }
                  if hasOptions {
                    size += WireFormat.computeMessageSize(3, value:options)
                  }
                  size += unknownFields.serializedSize()
                  memoizedSerializedSize = size
                  return size
                }
                class func parseFromData(data:[Byte]) -> PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromData(data).build()
                }
                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromInputStream(input:NSInputStream) -> PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromInputStream(input).build()
                }
                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream) -> PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromCodedInputStream(input).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBServiceDescriptorProto {
                  return PBServiceDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func builder() -> PBServiceDescriptorProtoBuilder {
                  return PBServiceDescriptorProtoBuilder()
                }
                class func builderWithPrototype(prototype:PBServiceDescriptorProto) -> PBServiceDescriptorProtoBuilder {
                  return PBServiceDescriptorProto.builder().mergeFrom(prototype)
                }
                func builder() -> PBServiceDescriptorProtoBuilder {
                  return PBServiceDescriptorProto.builder()
                }
                func toBuilder() -> PBServiceDescriptorProtoBuilder {
                  return PBServiceDescriptorProto.builderWithPrototype(self)
                }
                override func writeDescriptionTo(inout output:String, indent:String) {
                  if hasName {
                    output += "\(indent) name: \(name) \n"
                  }
                  var methodElementIndex:Int = 0
                  for element in method {
                      output += "\(indent) method[\(methodElementIndex)] {\n"
                      element.writeDescriptionTo(&output, indent:"\(indent)  ")
                      output += "\(indent)}\n"
                      methodElementIndex++
                  }
                  if hasOptions {
                    output += "\(indent) options {\n"
                    options.writeDescriptionTo(&output, indent:"\(indent)  ")
                    output += "\(indent) }\n"
                  }
                  unknownFields.writeDescriptionTo(&output, indent:indent)
                }
                override var hashValue:Int {
                 get {
                      var hashCode:Int = 7
                      if hasName {
                         hashCode = (hashCode &* 31) &+ name.hashValue
                      }
                      for element in method {
                          hashCode = (hashCode &* 31) &+ element.hashValue
                      }
                      if hasOptions {
                        hashCode = (hashCode &* 31) &+ options.hashValue
                      }
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                    }
                  }
                }

                class PBServiceDescriptorProtoBuilder : GeneratedMessageBuilder {
                private var result:PBServiceDescriptorProto

                override init () {
                   result = PBServiceDescriptorProto()
                }
                var hasName:Bool {
                     get {
                          return result.hasName
                     }
                }
                var name:String {
                     get {
                          return result.name
                     }
                     set (value) {
                         result.hasName = true
                         result.name = value
                     }
                }
                func clearName() -> PBServiceDescriptorProtoBuilder{
                     result.hasName = false
                     result.name = ""
                     return self
                }
                var method:[PBMethodDescriptorProto] {
                     get {
                         return result.method
                     }
                     set (value) {
                         result.method = value
                     }
                }
                func clearMethod() -> PBServiceDescriptorProtoBuilder {
                  result.method.removeAll(keepCapacity: false)
                  return self
                }
                var hasOptions:Bool {
                     get {
                         return result.hasOptions
                     }
                }
                var options:PBServiceOptions {
                     get {
                         return result.options     }
                     set (value) {
                         result.hasOptions = true
                         result.options = value
                     }
                }
                func setOptionsBuilder(builderForValue:PBServiceOptionsBuilder) -> PBServiceDescriptorProtoBuilder {
                  options = builderForValue.build()
                  return self
                }
                func mergeOptions(value:PBServiceOptions) -> PBServiceDescriptorProtoBuilder {
                  if (result.hasOptions && result.options != PBServiceOptions()) {
                    result.options = PBServiceOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
                  } else {
                    result.options = value
                  }
                  result.hasOptions = true
                  return self
                }
                func clearOptions() -> PBServiceDescriptorProtoBuilder {
                  result.hasOptions = false
                  result.options = PBServiceOptions()
                  return self
                }
                override var internalGetResult:GeneratedMessage {
                     get {
                        return result
                     }
                }
                override func clear() -> PBServiceDescriptorProtoBuilder {
                  result = PBServiceDescriptorProto()
                  return self
                }
                override func clone() -> PBServiceDescriptorProtoBuilder {
                  return PBServiceDescriptorProto.builderWithPrototype(result)
                }
                func build() -> PBServiceDescriptorProto {
                     checkInitialized()
                     return buildPartial()
                }
                func buildPartial() -> PBServiceDescriptorProto {
                  var returnMe:PBServiceDescriptorProto = result
                  return returnMe
                }
                func mergeFrom(other:PBServiceDescriptorProto) -> PBServiceDescriptorProtoBuilder {
                  if (other == PBServiceDescriptorProto()) {
                    return self
                  }
                  if other.hasName {
                       name = other.name
                  }
                  if !other.method.isEmpty  {
                     result.method += other.method
                  }
                  if (other.hasOptions) {
                      mergeOptions(other.options)
                  }
                    mergeUnknownFields(other.unknownFields)
                  return self
                }
                override func mergeFromCodedInputStream(input:CodedInputStream) ->PBServiceDescriptorProtoBuilder {
                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                }
                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBServiceDescriptorProtoBuilder {
                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                  while (true) {
                    var tag:Int32 = input.readTag()
                      if tag == 0 {
                           self.unknownFields = unknownFieldsBuilder.build()
                           return self}
                      else if tag == 10 {
                        name = input.readString()
                      }
                      else if tag == 18 {
                        var subBuilder = PBMethodDescriptorProto.builder()
                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                        method += [subBuilder.buildPartial()]
                      }
                      else if tag == 26 {
                        var subBuilder:PBServiceOptionsBuilder = PBServiceOptions.builder()
                        if hasOptions {
                          subBuilder.mergeFrom(options)
                        }
                        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                        options = subBuilder.buildPartial()
                      }
                      else {
                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                unknownFields = unknownFieldsBuilder.build()
                                return self
                            }
                      }
                      }
                   }
                }

                func == (lhs: PBMethodDescriptorProto, rhs: PBMethodDescriptorProto) -> Bool {
                      if (lhs === rhs) {
                        return true
                      }
                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                      fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
                       fieldCheck = fieldCheck && (lhs.hasInputType == rhs.hasInputType) && (!lhs.hasInputType || lhs.inputType == rhs.inputType)
                       fieldCheck = fieldCheck && (lhs.hasOutputType == rhs.hasOutputType) && (!lhs.hasOutputType || lhs.outputType == rhs.outputType)
                       fieldCheck = fieldCheck && (lhs.hasOptions == rhs.hasOptions) && (!lhs.hasOptions || lhs.options == rhs.options)
                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                }
                class PBMethodDescriptorProto : GeneratedMessage {
                  private(set) var hasName:Bool = false
                  private(set) var name:String = ""

                  private(set) var hasInputType:Bool = false
                  private(set) var inputType:String = ""

                  private(set) var hasOutputType:Bool = false
                  private(set) var outputType:String = ""

                  private(set) var hasOptions:Bool = false
                  private(set) var options:PBMethodOptions = PBMethodOptions()
                  override init() {
                       super.init()
                  }
                  override func isInitialized() -> Bool {
                    if hasOptions {
                      if !options.isInitialized() {
                        return false
                      }
                    }
                    return true
                  }
                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                    if hasName {
                      output.writeString(1, value:name)
                    }
                    if hasInputType {
                      output.writeString(2, value:inputType)
                    }
                    if hasOutputType {
                      output.writeString(3, value:outputType)
                    }
                    if hasOptions {
                      output.writeMessage(4, value:options)
                    }
                    unknownFields.writeToCodedOutputStream(output)
                  }
                  override func serializedSize() -> Int32 {
                    var size:Int32 = memoizedSerializedSize
                    if size != -1 {
                      return size
                    }

                    size = 0
                    if hasName {
                      size += WireFormat.computeStringSize(1, value:name)
                    }
                    if hasInputType {
                      size += WireFormat.computeStringSize(2, value:inputType)
                    }
                    if hasOutputType {
                      size += WireFormat.computeStringSize(3, value:outputType)
                    }
                    if hasOptions {
                      size += WireFormat.computeMessageSize(4, value:options)
                    }
                    size += unknownFields.serializedSize()
                    memoizedSerializedSize = size
                    return size
                  }
                  class func parseFromData(data:[Byte]) -> PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromData(data).build()
                  }
                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromInputStream(input:NSInputStream) -> PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromInputStream(input).build()
                  }
                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream) -> PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromCodedInputStream(input).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMethodDescriptorProto {
                    return PBMethodDescriptorProto.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func builder() -> PBMethodDescriptorProtoBuilder {
                    return PBMethodDescriptorProtoBuilder()
                  }
                  class func builderWithPrototype(prototype:PBMethodDescriptorProto) -> PBMethodDescriptorProtoBuilder {
                    return PBMethodDescriptorProto.builder().mergeFrom(prototype)
                  }
                  func builder() -> PBMethodDescriptorProtoBuilder {
                    return PBMethodDescriptorProto.builder()
                  }
                  func toBuilder() -> PBMethodDescriptorProtoBuilder {
                    return PBMethodDescriptorProto.builderWithPrototype(self)
                  }
                  override func writeDescriptionTo(inout output:String, indent:String) {
                    if hasName {
                      output += "\(indent) name: \(name) \n"
                    }
                    if hasInputType {
                      output += "\(indent) inputType: \(inputType) \n"
                    }
                    if hasOutputType {
                      output += "\(indent) outputType: \(outputType) \n"
                    }
                    if hasOptions {
                      output += "\(indent) options {\n"
                      options.writeDescriptionTo(&output, indent:"\(indent)  ")
                      output += "\(indent) }\n"
                    }
                    unknownFields.writeDescriptionTo(&output, indent:indent)
                  }
                  override var hashValue:Int {
                   get {
                        var hashCode:Int = 7
                        if hasName {
                           hashCode = (hashCode &* 31) &+ name.hashValue
                        }
                        if hasInputType {
                           hashCode = (hashCode &* 31) &+ inputType.hashValue
                        }
                        if hasOutputType {
                           hashCode = (hashCode &* 31) &+ outputType.hashValue
                        }
                        if hasOptions {
                          hashCode = (hashCode &* 31) &+ options.hashValue
                        }
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                      }
                    }
                  }

                  class PBMethodDescriptorProtoBuilder : GeneratedMessageBuilder {
                  private var result:PBMethodDescriptorProto

                  override init () {
                     result = PBMethodDescriptorProto()
                  }
                  var hasName:Bool {
                       get {
                            return result.hasName
                       }
                  }
                  var name:String {
                       get {
                            return result.name
                       }
                       set (value) {
                           result.hasName = true
                           result.name = value
                       }
                  }
                  func clearName() -> PBMethodDescriptorProtoBuilder{
                       result.hasName = false
                       result.name = ""
                       return self
                  }
                  var hasInputType:Bool {
                       get {
                            return result.hasInputType
                       }
                  }
                  var inputType:String {
                       get {
                            return result.inputType
                       }
                       set (value) {
                           result.hasInputType = true
                           result.inputType = value
                       }
                  }
                  func clearInputType() -> PBMethodDescriptorProtoBuilder{
                       result.hasInputType = false
                       result.inputType = ""
                       return self
                  }
                  var hasOutputType:Bool {
                       get {
                            return result.hasOutputType
                       }
                  }
                  var outputType:String {
                       get {
                            return result.outputType
                       }
                       set (value) {
                           result.hasOutputType = true
                           result.outputType = value
                       }
                  }
                  func clearOutputType() -> PBMethodDescriptorProtoBuilder{
                       result.hasOutputType = false
                       result.outputType = ""
                       return self
                  }
                  var hasOptions:Bool {
                       get {
                           return result.hasOptions
                       }
                  }
                  var options:PBMethodOptions {
                       get {
                           return result.options     }
                       set (value) {
                           result.hasOptions = true
                           result.options = value
                       }
                  }
                  func setOptionsBuilder(builderForValue:PBMethodOptionsBuilder) -> PBMethodDescriptorProtoBuilder {
                    options = builderForValue.build()
                    return self
                  }
                  func mergeOptions(value:PBMethodOptions) -> PBMethodDescriptorProtoBuilder {
                    if (result.hasOptions && result.options != PBMethodOptions()) {
                      result.options = PBMethodOptions.builderWithPrototype(result.options).mergeFrom(value).buildPartial()
                    } else {
                      result.options = value
                    }
                    result.hasOptions = true
                    return self
                  }
                  func clearOptions() -> PBMethodDescriptorProtoBuilder {
                    result.hasOptions = false
                    result.options = PBMethodOptions()
                    return self
                  }
                  override var internalGetResult:GeneratedMessage {
                       get {
                          return result
                       }
                  }
                  override func clear() -> PBMethodDescriptorProtoBuilder {
                    result = PBMethodDescriptorProto()
                    return self
                  }
                  override func clone() -> PBMethodDescriptorProtoBuilder {
                    return PBMethodDescriptorProto.builderWithPrototype(result)
                  }
                  func build() -> PBMethodDescriptorProto {
                       checkInitialized()
                       return buildPartial()
                  }
                  func buildPartial() -> PBMethodDescriptorProto {
                    var returnMe:PBMethodDescriptorProto = result
                    return returnMe
                  }
                  func mergeFrom(other:PBMethodDescriptorProto) -> PBMethodDescriptorProtoBuilder {
                    if (other == PBMethodDescriptorProto()) {
                      return self
                    }
                    if other.hasName {
                         name = other.name
                    }
                    if other.hasInputType {
                         inputType = other.inputType
                    }
                    if other.hasOutputType {
                         outputType = other.outputType
                    }
                    if (other.hasOptions) {
                        mergeOptions(other.options)
                    }
                      mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream) ->PBMethodDescriptorProtoBuilder {
                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMethodDescriptorProtoBuilder {
                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      var tag:Int32 = input.readTag()
                        if tag == 0 {
                             self.unknownFields = unknownFieldsBuilder.build()
                             return self}
                        else if tag == 10 {
                          name = input.readString()
                        }
                        else if tag == 18 {
                          inputType = input.readString()
                        }
                        else if tag == 26 {
                          outputType = input.readString()
                        }
                        else if tag == 34 {
                          var subBuilder:PBMethodOptionsBuilder = PBMethodOptions.builder()
                          if hasOptions {
                            subBuilder.mergeFrom(options)
                          }
                          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                          options = subBuilder.buildPartial()
                        }
                        else {
                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                  unknownFields = unknownFieldsBuilder.build()
                                  return self
                              }
                        }
                        }
                     }
                  }

                  func == (lhs: PBFileOptions, rhs: PBFileOptions) -> Bool {
                        if (lhs === rhs) {
                          return true
                        }
                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                        fieldCheck = fieldCheck && (lhs.hasJavaPackage == rhs.hasJavaPackage) && (!lhs.hasJavaPackage || lhs.javaPackage == rhs.javaPackage)
                         fieldCheck = fieldCheck && (lhs.hasJavaOuterClassname == rhs.hasJavaOuterClassname) && (!lhs.hasJavaOuterClassname || lhs.javaOuterClassname == rhs.javaOuterClassname)
                         fieldCheck = fieldCheck && (lhs.hasOptimizeFor == rhs.hasOptimizeFor) && (!lhs.hasOptimizeFor || lhs.optimizeFor == rhs.optimizeFor)
                         fieldCheck = fieldCheck && (lhs.hasJavaMultipleFiles == rhs.hasJavaMultipleFiles) && (!lhs.hasJavaMultipleFiles || lhs.javaMultipleFiles == rhs.javaMultipleFiles)
                         fieldCheck = fieldCheck && (lhs.hasGoPackage == rhs.hasGoPackage) && (!lhs.hasGoPackage || lhs.goPackage == rhs.goPackage)
                         fieldCheck = fieldCheck && (lhs.hasCcGenericServices == rhs.hasCcGenericServices) && (!lhs.hasCcGenericServices || lhs.ccGenericServices == rhs.ccGenericServices)
                         fieldCheck = fieldCheck && (lhs.hasJavaGenericServices == rhs.hasJavaGenericServices) && (!lhs.hasJavaGenericServices || lhs.javaGenericServices == rhs.javaGenericServices)
                         fieldCheck = fieldCheck && (lhs.hasPyGenericServices == rhs.hasPyGenericServices) && (!lhs.hasPyGenericServices || lhs.pyGenericServices == rhs.pyGenericServices)
                         fieldCheck = fieldCheck && (lhs.hasJavaGenerateEqualsAndHash == rhs.hasJavaGenerateEqualsAndHash) && (!lhs.hasJavaGenerateEqualsAndHash || lhs.javaGenerateEqualsAndHash == rhs.javaGenerateEqualsAndHash)
                         fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                         fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                  }
                  class PBFileOptions : ExtendableMessage {
                    private(set) var hasJavaPackage:Bool = false
                    private(set) var javaPackage:String = ""

                    private(set) var hasJavaOuterClassname:Bool = false
                    private(set) var javaOuterClassname:String = ""

                    private(set) var hasJavaMultipleFiles:Bool = false
                    private(set) var javaMultipleFiles:Bool = false

                    private(set) var hasJavaGenerateEqualsAndHash:Bool = false
                    private(set) var javaGenerateEqualsAndHash:Bool = false

                    private(set) var optimizeFor:PBFileOptionsOptimizeMode = .PBFileOptionsOptimizeModeSpeed
                    private(set) var hasOptimizeFor:Bool = false
                    private(set) var hasGoPackage:Bool = false
                    private(set) var goPackage:String = ""

                    private(set) var hasCcGenericServices:Bool = false
                    private(set) var ccGenericServices:Bool = false

                    private(set) var hasJavaGenericServices:Bool = false
                    private(set) var javaGenericServices:Bool = false

                    private(set) var hasPyGenericServices:Bool = false
                    private(set) var pyGenericServices:Bool = false

                    private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                    override init() {
                         super.init()
                    }
                    override func isInitialized() -> Bool {
                      var isInituninterpretedOption:Bool = true
                      for element in uninterpretedOption {
                          if (!element.isInitialized()) {
                              isInituninterpretedOption = false
                              break 
                          }
                      }
                      if !isInituninterpretedOption {
                       return isInituninterpretedOption
                       }
                      if !extensionsAreInitialized() {
                        return false
                      }
                      return true
                    }
                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                      if hasJavaPackage {
                        output.writeString(1, value:javaPackage)
                      }
                      if hasJavaOuterClassname {
                        output.writeString(8, value:javaOuterClassname)
                      }
                      if hasOptimizeFor {
                        output.writeEnum(9, value:optimizeFor.toRaw())
                      }
                      if hasJavaMultipleFiles {
                        output.writeBool(10, value:javaMultipleFiles)
                      }
                      if hasGoPackage {
                        output.writeString(11, value:goPackage)
                      }
                      if hasCcGenericServices {
                        output.writeBool(16, value:ccGenericServices)
                      }
                      if hasJavaGenericServices {
                        output.writeBool(17, value:javaGenericServices)
                      }
                      if hasPyGenericServices {
                        output.writeBool(18, value:pyGenericServices)
                      }
                      if hasJavaGenerateEqualsAndHash {
                        output.writeBool(20, value:javaGenerateEqualsAndHash)
                      }
                      for element in uninterpretedOption {
                          output.writeMessage(999, value:element)
                      }
                      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                      unknownFields.writeToCodedOutputStream(output)
                    }
                    override func serializedSize() -> Int32 {
                      var size:Int32 = memoizedSerializedSize
                      if size != -1 {
                        return size
                      }

                      size = 0
                      if hasJavaPackage {
                        size += WireFormat.computeStringSize(1, value:javaPackage)
                      }
                      if hasJavaOuterClassname {
                        size += WireFormat.computeStringSize(8, value:javaOuterClassname)
                      }
                      if (hasOptimizeFor) {
                        size += WireFormat.computeEnumSize(9, value:optimizeFor.toRaw())
                      }
                      if hasJavaMultipleFiles {
                        size += WireFormat.computeBoolSize(10, value:javaMultipleFiles)
                      }
                      if hasGoPackage {
                        size += WireFormat.computeStringSize(11, value:goPackage)
                      }
                      if hasCcGenericServices {
                        size += WireFormat.computeBoolSize(16, value:ccGenericServices)
                      }
                      if hasJavaGenericServices {
                        size += WireFormat.computeBoolSize(17, value:javaGenericServices)
                      }
                      if hasPyGenericServices {
                        size += WireFormat.computeBoolSize(18, value:pyGenericServices)
                      }
                      if hasJavaGenerateEqualsAndHash {
                        size += WireFormat.computeBoolSize(20, value:javaGenerateEqualsAndHash)
                      }
                      for element in uninterpretedOption {
                          size += WireFormat.computeMessageSize(999, value:element)
                      }
                      size += extensionsSerializedSize()
                      size += unknownFields.serializedSize()
                      memoizedSerializedSize = size
                      return size
                    }
                    class func parseFromData(data:[Byte]) -> PBFileOptions {
                      return PBFileOptions.builder().mergeFromData(data).build()
                    }
                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBFileOptions {
                      return PBFileOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromInputStream(input:NSInputStream) -> PBFileOptions {
                      return PBFileOptions.builder().mergeFromInputStream(input).build()
                    }
                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBFileOptions {
                      return PBFileOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream) -> PBFileOptions {
                      return PBFileOptions.builder().mergeFromCodedInputStream(input).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileOptions {
                      return PBFileOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func builder() -> PBFileOptionsBuilder {
                      return PBFileOptionsBuilder()
                    }
                    class func builderWithPrototype(prototype:PBFileOptions) -> PBFileOptionsBuilder {
                      return PBFileOptions.builder().mergeFrom(prototype)
                    }
                    func builder() -> PBFileOptionsBuilder {
                      return PBFileOptions.builder()
                    }
                    func toBuilder() -> PBFileOptionsBuilder {
                      return PBFileOptions.builderWithPrototype(self)
                    }
                    override func writeDescriptionTo(inout output:String, indent:String) {
                      if hasJavaPackage {
                        output += "\(indent) javaPackage: \(javaPackage) \n"
                      }
                      if hasJavaOuterClassname {
                        output += "\(indent) javaOuterClassname: \(javaOuterClassname) \n"
                      }
                      if (hasOptimizeFor) {
                        output += "\(indent) optimizeFor: \(optimizeFor.toRaw())\n"
                      }
                      if hasJavaMultipleFiles {
                        output += "\(indent) javaMultipleFiles: \(javaMultipleFiles) \n"
                      }
                      if hasGoPackage {
                        output += "\(indent) goPackage: \(goPackage) \n"
                      }
                      if hasCcGenericServices {
                        output += "\(indent) ccGenericServices: \(ccGenericServices) \n"
                      }
                      if hasJavaGenericServices {
                        output += "\(indent) javaGenericServices: \(javaGenericServices) \n"
                      }
                      if hasPyGenericServices {
                        output += "\(indent) pyGenericServices: \(pyGenericServices) \n"
                      }
                      if hasJavaGenerateEqualsAndHash {
                        output += "\(indent) javaGenerateEqualsAndHash: \(javaGenerateEqualsAndHash) \n"
                      }
                      var uninterpretedOptionElementIndex:Int = 0
                      for element in uninterpretedOption {
                          output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                          element.writeDescriptionTo(&output, indent:"\(indent)  ")
                          output += "\(indent)}\n"
                          uninterpretedOptionElementIndex++
                      }
                      writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                      unknownFields.writeDescriptionTo(&output, indent:indent)
                    }
                    override var hashValue:Int {
                     get {
                          var hashCode:Int = 7
                          if hasJavaPackage {
                             hashCode = (hashCode &* 31) &+ javaPackage.hashValue
                          }
                          if hasJavaOuterClassname {
                             hashCode = (hashCode &* 31) &+ javaOuterClassname.hashValue
                          }
                          if hasOptimizeFor {
                             hashCode = (hashCode &* 31) &+ Int(optimizeFor.toRaw())
                          }
                          if hasJavaMultipleFiles {
                             hashCode = (hashCode &* 31) &+ javaMultipleFiles.hashValue
                          }
                          if hasGoPackage {
                             hashCode = (hashCode &* 31) &+ goPackage.hashValue
                          }
                          if hasCcGenericServices {
                             hashCode = (hashCode &* 31) &+ ccGenericServices.hashValue
                          }
                          if hasJavaGenericServices {
                             hashCode = (hashCode &* 31) &+ javaGenericServices.hashValue
                          }
                          if hasPyGenericServices {
                             hashCode = (hashCode &* 31) &+ pyGenericServices.hashValue
                          }
                          if hasJavaGenerateEqualsAndHash {
                             hashCode = (hashCode &* 31) &+ javaGenerateEqualsAndHash.hashValue
                          }
                          for element in uninterpretedOption {
                              hashCode = (hashCode &* 31) &+ element.hashValue
                          }
                          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                          return hashCode
                        }
                      }
                    }

                    enum PBFileOptionsOptimizeMode:Int32 {
                      case PBFileOptionsOptimizeModeSpeed = 1
                      case PBFileOptionsOptimizeModeCodeSize = 2
                      case PBFileOptionsOptimizeModeLiteRuntime = 3

                      static func PBFileOptionsOptimizeModeIsValidValue(value:PBFileOptionsOptimizeMode) ->Bool {
                        switch value {
                          case .PBFileOptionsOptimizeModeSpeed, .PBFileOptionsOptimizeModeCodeSize, .PBFileOptionsOptimizeModeLiteRuntime:
                            return true;
                          default:
                            return false;
                        }
                      }
                    }

                    class PBFileOptionsBuilder : ExtendableMessageBuilder {
                    private var result:PBFileOptions

                    override init () {
                       result = PBFileOptions()
                    }
                    var hasJavaPackage:Bool {
                         get {
                              return result.hasJavaPackage
                         }
                    }
                    var javaPackage:String {
                         get {
                              return result.javaPackage
                         }
                         set (value) {
                             result.hasJavaPackage = true
                             result.javaPackage = value
                         }
                    }
                    func clearJavaPackage() -> PBFileOptionsBuilder{
                         result.hasJavaPackage = false
                         result.javaPackage = ""
                         return self
                    }
                    var hasJavaOuterClassname:Bool {
                         get {
                              return result.hasJavaOuterClassname
                         }
                    }
                    var javaOuterClassname:String {
                         get {
                              return result.javaOuterClassname
                         }
                         set (value) {
                             result.hasJavaOuterClassname = true
                             result.javaOuterClassname = value
                         }
                    }
                    func clearJavaOuterClassname() -> PBFileOptionsBuilder{
                         result.hasJavaOuterClassname = false
                         result.javaOuterClassname = ""
                         return self
                    }
                    var hasJavaMultipleFiles:Bool {
                         get {
                              return result.hasJavaMultipleFiles
                         }
                    }
                    var javaMultipleFiles:Bool {
                         get {
                              return result.javaMultipleFiles
                         }
                         set (value) {
                             result.hasJavaMultipleFiles = true
                             result.javaMultipleFiles = value
                         }
                    }
                    func clearJavaMultipleFiles() -> PBFileOptionsBuilder{
                         result.hasJavaMultipleFiles = false
                         result.javaMultipleFiles = false
                         return self
                    }
                    var hasJavaGenerateEqualsAndHash:Bool {
                         get {
                              return result.hasJavaGenerateEqualsAndHash
                         }
                    }
                    var javaGenerateEqualsAndHash:Bool {
                         get {
                              return result.javaGenerateEqualsAndHash
                         }
                         set (value) {
                             result.hasJavaGenerateEqualsAndHash = true
                             result.javaGenerateEqualsAndHash = value
                         }
                    }
                    func clearJavaGenerateEqualsAndHash() -> PBFileOptionsBuilder{
                         result.hasJavaGenerateEqualsAndHash = false
                         result.javaGenerateEqualsAndHash = false
                         return self
                    }
                      var hasOptimizeFor:Bool{
                          get {
                              return result.hasOptimizeFor
                          }
                      }
                      var optimizeFor:PBFileOptionsOptimizeMode {
                          get {
                              return result.optimizeFor
                          }
                          set (value) {
                              result.hasOptimizeFor = true
                              result.optimizeFor = value
                          }
                      }
                      func clearOptimizeFor() -> PBFileOptionsBuilder {
                         result.hasOptimizeFor = false
                         result.optimizeFor = .PBFileOptionsOptimizeModeSpeed
                         return self
                      }
                    var hasGoPackage:Bool {
                         get {
                              return result.hasGoPackage
                         }
                    }
                    var goPackage:String {
                         get {
                              return result.goPackage
                         }
                         set (value) {
                             result.hasGoPackage = true
                             result.goPackage = value
                         }
                    }
                    func clearGoPackage() -> PBFileOptionsBuilder{
                         result.hasGoPackage = false
                         result.goPackage = ""
                         return self
                    }
                    var hasCcGenericServices:Bool {
                         get {
                              return result.hasCcGenericServices
                         }
                    }
                    var ccGenericServices:Bool {
                         get {
                              return result.ccGenericServices
                         }
                         set (value) {
                             result.hasCcGenericServices = true
                             result.ccGenericServices = value
                         }
                    }
                    func clearCcGenericServices() -> PBFileOptionsBuilder{
                         result.hasCcGenericServices = false
                         result.ccGenericServices = false
                         return self
                    }
                    var hasJavaGenericServices:Bool {
                         get {
                              return result.hasJavaGenericServices
                         }
                    }
                    var javaGenericServices:Bool {
                         get {
                              return result.javaGenericServices
                         }
                         set (value) {
                             result.hasJavaGenericServices = true
                             result.javaGenericServices = value
                         }
                    }
                    func clearJavaGenericServices() -> PBFileOptionsBuilder{
                         result.hasJavaGenericServices = false
                         result.javaGenericServices = false
                         return self
                    }
                    var hasPyGenericServices:Bool {
                         get {
                              return result.hasPyGenericServices
                         }
                    }
                    var pyGenericServices:Bool {
                         get {
                              return result.pyGenericServices
                         }
                         set (value) {
                             result.hasPyGenericServices = true
                             result.pyGenericServices = value
                         }
                    }
                    func clearPyGenericServices() -> PBFileOptionsBuilder{
                         result.hasPyGenericServices = false
                         result.pyGenericServices = false
                         return self
                    }
                    var uninterpretedOption:[PBUninterpretedOption] {
                         get {
                             return result.uninterpretedOption
                         }
                         set (value) {
                             result.uninterpretedOption = value
                         }
                    }
                    func clearUninterpretedOption() -> PBFileOptionsBuilder {
                      result.uninterpretedOption.removeAll(keepCapacity: false)
                      return self
                    }
                    override var internalGetResult:ExtendableMessage {
                         get {
                             return result
                         }
                    }
                    override func clear() -> PBFileOptionsBuilder {
                      result = PBFileOptions()
                      return self
                    }
                    override func clone() -> PBFileOptionsBuilder {
                      return PBFileOptions.builderWithPrototype(result)
                    }
                    func build() -> PBFileOptions {
                         checkInitialized()
                         return buildPartial()
                    }
                    func buildPartial() -> PBFileOptions {
                      var returnMe:PBFileOptions = result
                      return returnMe
                    }
                    func mergeFrom(other:PBFileOptions) -> PBFileOptionsBuilder {
                      if (other == PBFileOptions()) {
                        return self
                      }
                      if other.hasJavaPackage {
                           javaPackage = other.javaPackage
                      }
                      if other.hasJavaOuterClassname {
                           javaOuterClassname = other.javaOuterClassname
                      }
                      if other.hasJavaMultipleFiles {
                           javaMultipleFiles = other.javaMultipleFiles
                      }
                      if other.hasJavaGenerateEqualsAndHash {
                           javaGenerateEqualsAndHash = other.javaGenerateEqualsAndHash
                      }
                      if other.hasOptimizeFor {
                           optimizeFor = other.optimizeFor
                      }
                      if other.hasGoPackage {
                           goPackage = other.goPackage
                      }
                      if other.hasCcGenericServices {
                           ccGenericServices = other.ccGenericServices
                      }
                      if other.hasJavaGenericServices {
                           javaGenericServices = other.javaGenericServices
                      }
                      if other.hasPyGenericServices {
                           pyGenericServices = other.pyGenericServices
                      }
                      if !other.uninterpretedOption.isEmpty  {
                         result.uninterpretedOption += other.uninterpretedOption
                      }
                      mergeExtensionFields(other)
                        mergeUnknownFields(other.unknownFields)
                      return self
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream) ->PBFileOptionsBuilder {
                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFileOptionsBuilder {
                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                      while (true) {
                        var tag:Int32 = input.readTag()
                          if tag == 0 {
                               self.unknownFields = unknownFieldsBuilder.build()
                               return self}
                          else if tag == 10 {
                            javaPackage = input.readString()
                          }
                          else if tag == 66 {
                            javaOuterClassname = input.readString()
                          }
                          else if tag == 72 {
                            var value = input.readEnum()
                            var enums:PBFileOptionsOptimizeMode = PBFileOptionsOptimizeMode.fromRaw(value)!
                            if (PBFileOptionsOptimizeMode.PBFileOptionsOptimizeModeIsValidValue(enums)) {
                                 optimizeFor = enums
                            } else {
                                 unknownFieldsBuilder.mergeVarintField(9, value:Int64(value))
                            }
                          }
                          else if tag == 80 {
                            javaMultipleFiles = input.readBool()
                          }
                          else if tag == 90 {
                            goPackage = input.readString()
                          }
                          else if tag == 128 {
                            ccGenericServices = input.readBool()
                          }
                          else if tag == 136 {
                            javaGenericServices = input.readBool()
                          }
                          else if tag == 144 {
                            pyGenericServices = input.readBool()
                          }
                          else if tag == 160 {
                            javaGenerateEqualsAndHash = input.readBool()
                          }
                          else if tag == 7994 {
                            var subBuilder = PBUninterpretedOption.builder()
                            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                            uninterpretedOption += [subBuilder.buildPartial()]
                          }
                          else {
                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                    unknownFields = unknownFieldsBuilder.build()
                                    return self
                                }
                          }
                          }
                       }
                    }

                    func == (lhs: PBMessageOptions, rhs: PBMessageOptions) -> Bool {
                          if (lhs === rhs) {
                            return true
                          }
                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                          fieldCheck = fieldCheck && (lhs.hasMessageSetWireFormat == rhs.hasMessageSetWireFormat) && (!lhs.hasMessageSetWireFormat || lhs.messageSetWireFormat == rhs.messageSetWireFormat)
                           fieldCheck = fieldCheck && (lhs.hasNoStandardDescriptorAccessor == rhs.hasNoStandardDescriptorAccessor) && (!lhs.hasNoStandardDescriptorAccessor || lhs.noStandardDescriptorAccessor == rhs.noStandardDescriptorAccessor)
                           fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                           fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                    }
                    class PBMessageOptions : ExtendableMessage {
                      private(set) var hasMessageSetWireFormat:Bool = false
                      private(set) var messageSetWireFormat:Bool = false

                      private(set) var hasNoStandardDescriptorAccessor:Bool = false
                      private(set) var noStandardDescriptorAccessor:Bool = false

                      private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                      override init() {
                           super.init()
                      }
                      override func isInitialized() -> Bool {
                        var isInituninterpretedOption:Bool = true
                        for element in uninterpretedOption {
                            if (!element.isInitialized()) {
                                isInituninterpretedOption = false
                                break 
                            }
                        }
                        if !isInituninterpretedOption {
                         return isInituninterpretedOption
                         }
                        if !extensionsAreInitialized() {
                          return false
                        }
                        return true
                      }
                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                        if hasMessageSetWireFormat {
                          output.writeBool(1, value:messageSetWireFormat)
                        }
                        if hasNoStandardDescriptorAccessor {
                          output.writeBool(2, value:noStandardDescriptorAccessor)
                        }
                        for element in uninterpretedOption {
                            output.writeMessage(999, value:element)
                        }
                        writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                        unknownFields.writeToCodedOutputStream(output)
                      }
                      override func serializedSize() -> Int32 {
                        var size:Int32 = memoizedSerializedSize
                        if size != -1 {
                          return size
                        }

                        size = 0
                        if hasMessageSetWireFormat {
                          size += WireFormat.computeBoolSize(1, value:messageSetWireFormat)
                        }
                        if hasNoStandardDescriptorAccessor {
                          size += WireFormat.computeBoolSize(2, value:noStandardDescriptorAccessor)
                        }
                        for element in uninterpretedOption {
                            size += WireFormat.computeMessageSize(999, value:element)
                        }
                        size += extensionsSerializedSize()
                        size += unknownFields.serializedSize()
                        memoizedSerializedSize = size
                        return size
                      }
                      class func parseFromData(data:[Byte]) -> PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromData(data).build()
                      }
                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromInputStream(input:NSInputStream) -> PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromInputStream(input).build()
                      }
                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream) -> PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromCodedInputStream(input).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMessageOptions {
                        return PBMessageOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func builder() -> PBMessageOptionsBuilder {
                        return PBMessageOptionsBuilder()
                      }
                      class func builderWithPrototype(prototype:PBMessageOptions) -> PBMessageOptionsBuilder {
                        return PBMessageOptions.builder().mergeFrom(prototype)
                      }
                      func builder() -> PBMessageOptionsBuilder {
                        return PBMessageOptions.builder()
                      }
                      func toBuilder() -> PBMessageOptionsBuilder {
                        return PBMessageOptions.builderWithPrototype(self)
                      }
                      override func writeDescriptionTo(inout output:String, indent:String) {
                        if hasMessageSetWireFormat {
                          output += "\(indent) messageSetWireFormat: \(messageSetWireFormat) \n"
                        }
                        if hasNoStandardDescriptorAccessor {
                          output += "\(indent) noStandardDescriptorAccessor: \(noStandardDescriptorAccessor) \n"
                        }
                        var uninterpretedOptionElementIndex:Int = 0
                        for element in uninterpretedOption {
                            output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                            output += "\(indent)}\n"
                            uninterpretedOptionElementIndex++
                        }
                        writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                        unknownFields.writeDescriptionTo(&output, indent:indent)
                      }
                      override var hashValue:Int {
                       get {
                            var hashCode:Int = 7
                            if hasMessageSetWireFormat {
                               hashCode = (hashCode &* 31) &+ messageSetWireFormat.hashValue
                            }
                            if hasNoStandardDescriptorAccessor {
                               hashCode = (hashCode &* 31) &+ noStandardDescriptorAccessor.hashValue
                            }
                            for element in uninterpretedOption {
                                hashCode = (hashCode &* 31) &+ element.hashValue
                            }
                            hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                            return hashCode
                          }
                        }
                      }

                      class PBMessageOptionsBuilder : ExtendableMessageBuilder {
                      private var result:PBMessageOptions

                      override init () {
                         result = PBMessageOptions()
                      }
                      var hasMessageSetWireFormat:Bool {
                           get {
                                return result.hasMessageSetWireFormat
                           }
                      }
                      var messageSetWireFormat:Bool {
                           get {
                                return result.messageSetWireFormat
                           }
                           set (value) {
                               result.hasMessageSetWireFormat = true
                               result.messageSetWireFormat = value
                           }
                      }
                      func clearMessageSetWireFormat() -> PBMessageOptionsBuilder{
                           result.hasMessageSetWireFormat = false
                           result.messageSetWireFormat = false
                           return self
                      }
                      var hasNoStandardDescriptorAccessor:Bool {
                           get {
                                return result.hasNoStandardDescriptorAccessor
                           }
                      }
                      var noStandardDescriptorAccessor:Bool {
                           get {
                                return result.noStandardDescriptorAccessor
                           }
                           set (value) {
                               result.hasNoStandardDescriptorAccessor = true
                               result.noStandardDescriptorAccessor = value
                           }
                      }
                      func clearNoStandardDescriptorAccessor() -> PBMessageOptionsBuilder{
                           result.hasNoStandardDescriptorAccessor = false
                           result.noStandardDescriptorAccessor = false
                           return self
                      }
                      var uninterpretedOption:[PBUninterpretedOption] {
                           get {
                               return result.uninterpretedOption
                           }
                           set (value) {
                               result.uninterpretedOption = value
                           }
                      }
                      func clearUninterpretedOption() -> PBMessageOptionsBuilder {
                        result.uninterpretedOption.removeAll(keepCapacity: false)
                        return self
                      }
                      override var internalGetResult:ExtendableMessage {
                           get {
                               return result
                           }
                      }
                      override func clear() -> PBMessageOptionsBuilder {
                        result = PBMessageOptions()
                        return self
                      }
                      override func clone() -> PBMessageOptionsBuilder {
                        return PBMessageOptions.builderWithPrototype(result)
                      }
                      func build() -> PBMessageOptions {
                           checkInitialized()
                           return buildPartial()
                      }
                      func buildPartial() -> PBMessageOptions {
                        var returnMe:PBMessageOptions = result
                        return returnMe
                      }
                      func mergeFrom(other:PBMessageOptions) -> PBMessageOptionsBuilder {
                        if (other == PBMessageOptions()) {
                          return self
                        }
                        if other.hasMessageSetWireFormat {
                             messageSetWireFormat = other.messageSetWireFormat
                        }
                        if other.hasNoStandardDescriptorAccessor {
                             noStandardDescriptorAccessor = other.noStandardDescriptorAccessor
                        }
                        if !other.uninterpretedOption.isEmpty  {
                           result.uninterpretedOption += other.uninterpretedOption
                        }
                        mergeExtensionFields(other)
                          mergeUnknownFields(other.unknownFields)
                        return self
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream) ->PBMessageOptionsBuilder {
                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMessageOptionsBuilder {
                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                        while (true) {
                          var tag:Int32 = input.readTag()
                            if tag == 0 {
                                 self.unknownFields = unknownFieldsBuilder.build()
                                 return self}
                            else if tag == 8 {
                              messageSetWireFormat = input.readBool()
                            }
                            else if tag == 16 {
                              noStandardDescriptorAccessor = input.readBool()
                            }
                            else if tag == 7994 {
                              var subBuilder = PBUninterpretedOption.builder()
                              input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                              uninterpretedOption += [subBuilder.buildPartial()]
                            }
                            else {
                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                      unknownFields = unknownFieldsBuilder.build()
                                      return self
                                  }
                            }
                            }
                         }
                      }

                      func == (lhs: PBFieldOptions, rhs: PBFieldOptions) -> Bool {
                            if (lhs === rhs) {
                              return true
                            }
                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                            fieldCheck = fieldCheck && (lhs.hasCtype == rhs.hasCtype) && (!lhs.hasCtype || lhs.ctype == rhs.ctype)
                             fieldCheck = fieldCheck && (lhs.hasPacked == rhs.hasPacked) && (!lhs.hasPacked || lhs.packed == rhs.packed)
                             fieldCheck = fieldCheck && (lhs.hasDeprecated == rhs.hasDeprecated) && (!lhs.hasDeprecated || lhs.deprecated == rhs.deprecated)
                             fieldCheck = fieldCheck && (lhs.hasLazy == rhs.hasLazy) && (!lhs.hasLazy || lhs.lazy == rhs.lazy)
                             fieldCheck = fieldCheck && (lhs.hasExperimentalMapKey == rhs.hasExperimentalMapKey) && (!lhs.hasExperimentalMapKey || lhs.experimentalMapKey == rhs.experimentalMapKey)
                             fieldCheck = fieldCheck && (lhs.hasWeak == rhs.hasWeak) && (!lhs.hasWeak || lhs.weak == rhs.weak)
                             fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                             fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                      }
                      class PBFieldOptions : ExtendableMessage {
                        private(set) var ctype:PBFieldOptionsCType = .PBFieldOptionsCTypeString
                        private(set) var hasCtype:Bool = false
                        private(set) var hasPacked:Bool = false
                        private(set) var packed:Bool = false

                        private(set) var hasLazy:Bool = false
                        private(set) var lazy:Bool = false

                        private(set) var hasDeprecated:Bool = false
                        private(set) var deprecated:Bool = false

                        private(set) var hasExperimentalMapKey:Bool = false
                        private(set) var experimentalMapKey:String = ""

                        private(set) var hasWeak:Bool = false
                        private(set) var weak:Bool = false

                        private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                        override init() {
                             super.init()
                        }
                        override func isInitialized() -> Bool {
                          var isInituninterpretedOption:Bool = true
                          for element in uninterpretedOption {
                              if (!element.isInitialized()) {
                                  isInituninterpretedOption = false
                                  break 
                              }
                          }
                          if !isInituninterpretedOption {
                           return isInituninterpretedOption
                           }
                          if !extensionsAreInitialized() {
                            return false
                          }
                          return true
                        }
                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                          if hasCtype {
                            output.writeEnum(1, value:ctype.toRaw())
                          }
                          if hasPacked {
                            output.writeBool(2, value:packed)
                          }
                          if hasDeprecated {
                            output.writeBool(3, value:deprecated)
                          }
                          if hasLazy {
                            output.writeBool(5, value:lazy)
                          }
                          if hasExperimentalMapKey {
                            output.writeString(9, value:experimentalMapKey)
                          }
                          if hasWeak {
                            output.writeBool(10, value:weak)
                          }
                          for element in uninterpretedOption {
                              output.writeMessage(999, value:element)
                          }
                          writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                          unknownFields.writeToCodedOutputStream(output)
                        }
                        override func serializedSize() -> Int32 {
                          var size:Int32 = memoizedSerializedSize
                          if size != -1 {
                            return size
                          }

                          size = 0
                          if (hasCtype) {
                            size += WireFormat.computeEnumSize(1, value:ctype.toRaw())
                          }
                          if hasPacked {
                            size += WireFormat.computeBoolSize(2, value:packed)
                          }
                          if hasDeprecated {
                            size += WireFormat.computeBoolSize(3, value:deprecated)
                          }
                          if hasLazy {
                            size += WireFormat.computeBoolSize(5, value:lazy)
                          }
                          if hasExperimentalMapKey {
                            size += WireFormat.computeStringSize(9, value:experimentalMapKey)
                          }
                          if hasWeak {
                            size += WireFormat.computeBoolSize(10, value:weak)
                          }
                          for element in uninterpretedOption {
                              size += WireFormat.computeMessageSize(999, value:element)
                          }
                          size += extensionsSerializedSize()
                          size += unknownFields.serializedSize()
                          memoizedSerializedSize = size
                          return size
                        }
                        class func parseFromData(data:[Byte]) -> PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromData(data).build()
                        }
                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromInputStream(input:NSInputStream) -> PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromInputStream(input).build()
                        }
                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream) -> PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromCodedInputStream(input).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFieldOptions {
                          return PBFieldOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func builder() -> PBFieldOptionsBuilder {
                          return PBFieldOptionsBuilder()
                        }
                        class func builderWithPrototype(prototype:PBFieldOptions) -> PBFieldOptionsBuilder {
                          return PBFieldOptions.builder().mergeFrom(prototype)
                        }
                        func builder() -> PBFieldOptionsBuilder {
                          return PBFieldOptions.builder()
                        }
                        func toBuilder() -> PBFieldOptionsBuilder {
                          return PBFieldOptions.builderWithPrototype(self)
                        }
                        override func writeDescriptionTo(inout output:String, indent:String) {
                          if (hasCtype) {
                            output += "\(indent) ctype: \(ctype.toRaw())\n"
                          }
                          if hasPacked {
                            output += "\(indent) packed: \(packed) \n"
                          }
                          if hasDeprecated {
                            output += "\(indent) deprecated: \(deprecated) \n"
                          }
                          if hasLazy {
                            output += "\(indent) lazy: \(lazy) \n"
                          }
                          if hasExperimentalMapKey {
                            output += "\(indent) experimentalMapKey: \(experimentalMapKey) \n"
                          }
                          if hasWeak {
                            output += "\(indent) weak: \(weak) \n"
                          }
                          var uninterpretedOptionElementIndex:Int = 0
                          for element in uninterpretedOption {
                              output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                              element.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent)}\n"
                              uninterpretedOptionElementIndex++
                          }
                          writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                          unknownFields.writeDescriptionTo(&output, indent:indent)
                        }
                        override var hashValue:Int {
                         get {
                              var hashCode:Int = 7
                              if hasCtype {
                                 hashCode = (hashCode &* 31) &+ Int(ctype.toRaw())
                              }
                              if hasPacked {
                                 hashCode = (hashCode &* 31) &+ packed.hashValue
                              }
                              if hasDeprecated {
                                 hashCode = (hashCode &* 31) &+ deprecated.hashValue
                              }
                              if hasLazy {
                                 hashCode = (hashCode &* 31) &+ lazy.hashValue
                              }
                              if hasExperimentalMapKey {
                                 hashCode = (hashCode &* 31) &+ experimentalMapKey.hashValue
                              }
                              if hasWeak {
                                 hashCode = (hashCode &* 31) &+ weak.hashValue
                              }
                              for element in uninterpretedOption {
                                  hashCode = (hashCode &* 31) &+ element.hashValue
                              }
                              hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                              return hashCode
                            }
                          }
                        }

                        enum PBFieldOptionsCType:Int32 {
                          case PBFieldOptionsCTypeString = 0
                          case PBFieldOptionsCTypeCord = 1
                          case PBFieldOptionsCTypeStringPiece = 2

                          static func PBFieldOptionsCTypeIsValidValue(value:PBFieldOptionsCType) ->Bool {
                            switch value {
                              case .PBFieldOptionsCTypeString, .PBFieldOptionsCTypeCord, .PBFieldOptionsCTypeStringPiece:
                                return true;
                              default:
                                return false;
                            }
                          }
                        }

                        class PBFieldOptionsBuilder : ExtendableMessageBuilder {
                        private var result:PBFieldOptions

                        override init () {
                           result = PBFieldOptions()
                        }
                          var hasCtype:Bool{
                              get {
                                  return result.hasCtype
                              }
                          }
                          var ctype:PBFieldOptionsCType {
                              get {
                                  return result.ctype
                              }
                              set (value) {
                                  result.hasCtype = true
                                  result.ctype = value
                              }
                          }
                          func clearCtype() -> PBFieldOptionsBuilder {
                             result.hasCtype = false
                             result.ctype = .PBFieldOptionsCTypeString
                             return self
                          }
                        var hasPacked:Bool {
                             get {
                                  return result.hasPacked
                             }
                        }
                        var packed:Bool {
                             get {
                                  return result.packed
                             }
                             set (value) {
                                 result.hasPacked = true
                                 result.packed = value
                             }
                        }
                        func clearPacked() -> PBFieldOptionsBuilder{
                             result.hasPacked = false
                             result.packed = false
                             return self
                        }
                        var hasLazy:Bool {
                             get {
                                  return result.hasLazy
                             }
                        }
                        var lazy:Bool {
                             get {
                                  return result.lazy
                             }
                             set (value) {
                                 result.hasLazy = true
                                 result.lazy = value
                             }
                        }
                        func clearLazy() -> PBFieldOptionsBuilder{
                             result.hasLazy = false
                             result.lazy = false
                             return self
                        }
                        var hasDeprecated:Bool {
                             get {
                                  return result.hasDeprecated
                             }
                        }
                        var deprecated:Bool {
                             get {
                                  return result.deprecated
                             }
                             set (value) {
                                 result.hasDeprecated = true
                                 result.deprecated = value
                             }
                        }
                        func clearDeprecated() -> PBFieldOptionsBuilder{
                             result.hasDeprecated = false
                             result.deprecated = false
                             return self
                        }
                        var hasExperimentalMapKey:Bool {
                             get {
                                  return result.hasExperimentalMapKey
                             }
                        }
                        var experimentalMapKey:String {
                             get {
                                  return result.experimentalMapKey
                             }
                             set (value) {
                                 result.hasExperimentalMapKey = true
                                 result.experimentalMapKey = value
                             }
                        }
                        func clearExperimentalMapKey() -> PBFieldOptionsBuilder{
                             result.hasExperimentalMapKey = false
                             result.experimentalMapKey = ""
                             return self
                        }
                        var hasWeak:Bool {
                             get {
                                  return result.hasWeak
                             }
                        }
                        var weak:Bool {
                             get {
                                  return result.weak
                             }
                             set (value) {
                                 result.hasWeak = true
                                 result.weak = value
                             }
                        }
                        func clearWeak() -> PBFieldOptionsBuilder{
                             result.hasWeak = false
                             result.weak = false
                             return self
                        }
                        var uninterpretedOption:[PBUninterpretedOption] {
                             get {
                                 return result.uninterpretedOption
                             }
                             set (value) {
                                 result.uninterpretedOption = value
                             }
                        }
                        func clearUninterpretedOption() -> PBFieldOptionsBuilder {
                          result.uninterpretedOption.removeAll(keepCapacity: false)
                          return self
                        }
                        override var internalGetResult:ExtendableMessage {
                             get {
                                 return result
                             }
                        }
                        override func clear() -> PBFieldOptionsBuilder {
                          result = PBFieldOptions()
                          return self
                        }
                        override func clone() -> PBFieldOptionsBuilder {
                          return PBFieldOptions.builderWithPrototype(result)
                        }
                        func build() -> PBFieldOptions {
                             checkInitialized()
                             return buildPartial()
                        }
                        func buildPartial() -> PBFieldOptions {
                          var returnMe:PBFieldOptions = result
                          return returnMe
                        }
                        func mergeFrom(other:PBFieldOptions) -> PBFieldOptionsBuilder {
                          if (other == PBFieldOptions()) {
                            return self
                          }
                          if other.hasCtype {
                               ctype = other.ctype
                          }
                          if other.hasPacked {
                               packed = other.packed
                          }
                          if other.hasLazy {
                               lazy = other.lazy
                          }
                          if other.hasDeprecated {
                               deprecated = other.deprecated
                          }
                          if other.hasExperimentalMapKey {
                               experimentalMapKey = other.experimentalMapKey
                          }
                          if other.hasWeak {
                               weak = other.weak
                          }
                          if !other.uninterpretedOption.isEmpty  {
                             result.uninterpretedOption += other.uninterpretedOption
                          }
                          mergeExtensionFields(other)
                            mergeUnknownFields(other.unknownFields)
                          return self
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream) ->PBFieldOptionsBuilder {
                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFieldOptionsBuilder {
                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                          while (true) {
                            var tag:Int32 = input.readTag()
                              if tag == 0 {
                                   self.unknownFields = unknownFieldsBuilder.build()
                                   return self}
                              else if tag == 8 {
                                var value = input.readEnum()
                                var enums:PBFieldOptionsCType = PBFieldOptionsCType.fromRaw(value)!
                                if (PBFieldOptionsCType.PBFieldOptionsCTypeIsValidValue(enums)) {
                                     ctype = enums
                                } else {
                                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(value))
                                }
                              }
                              else if tag == 16 {
                                packed = input.readBool()
                              }
                              else if tag == 24 {
                                deprecated = input.readBool()
                              }
                              else if tag == 40 {
                                lazy = input.readBool()
                              }
                              else if tag == 74 {
                                experimentalMapKey = input.readString()
                              }
                              else if tag == 80 {
                                weak = input.readBool()
                              }
                              else if tag == 7994 {
                                var subBuilder = PBUninterpretedOption.builder()
                                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                uninterpretedOption += [subBuilder.buildPartial()]
                              }
                              else {
                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                        unknownFields = unknownFieldsBuilder.build()
                                        return self
                                    }
                              }
                              }
                           }
                        }

                        func == (lhs: PBEnumOptions, rhs: PBEnumOptions) -> Bool {
                              if (lhs === rhs) {
                                return true
                              }
                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                              fieldCheck = fieldCheck && (lhs.hasAllowAlias == rhs.hasAllowAlias) && (!lhs.hasAllowAlias || lhs.allowAlias == rhs.allowAlias)
                               fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                               fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                        }
                        class PBEnumOptions : ExtendableMessage {
                          private(set) var hasAllowAlias:Bool = false
                          private(set) var allowAlias:Bool = true

                          private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                          override init() {
                               super.init()
                          }
                          override func isInitialized() -> Bool {
                            var isInituninterpretedOption:Bool = true
                            for element in uninterpretedOption {
                                if (!element.isInitialized()) {
                                    isInituninterpretedOption = false
                                    break 
                                }
                            }
                            if !isInituninterpretedOption {
                             return isInituninterpretedOption
                             }
                            if !extensionsAreInitialized() {
                              return false
                            }
                            return true
                          }
                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                            if hasAllowAlias {
                              output.writeBool(2, value:allowAlias)
                            }
                            for element in uninterpretedOption {
                                output.writeMessage(999, value:element)
                            }
                            writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                            unknownFields.writeToCodedOutputStream(output)
                          }
                          override func serializedSize() -> Int32 {
                            var size:Int32 = memoizedSerializedSize
                            if size != -1 {
                              return size
                            }

                            size = 0
                            if hasAllowAlias {
                              size += WireFormat.computeBoolSize(2, value:allowAlias)
                            }
                            for element in uninterpretedOption {
                                size += WireFormat.computeMessageSize(999, value:element)
                            }
                            size += extensionsSerializedSize()
                            size += unknownFields.serializedSize()
                            memoizedSerializedSize = size
                            return size
                          }
                          class func parseFromData(data:[Byte]) -> PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromData(data).build()
                          }
                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromInputStream(input:NSInputStream) -> PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromInputStream(input).build()
                          }
                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream) -> PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromCodedInputStream(input).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumOptions {
                            return PBEnumOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func builder() -> PBEnumOptionsBuilder {
                            return PBEnumOptionsBuilder()
                          }
                          class func builderWithPrototype(prototype:PBEnumOptions) -> PBEnumOptionsBuilder {
                            return PBEnumOptions.builder().mergeFrom(prototype)
                          }
                          func builder() -> PBEnumOptionsBuilder {
                            return PBEnumOptions.builder()
                          }
                          func toBuilder() -> PBEnumOptionsBuilder {
                            return PBEnumOptions.builderWithPrototype(self)
                          }
                          override func writeDescriptionTo(inout output:String, indent:String) {
                            if hasAllowAlias {
                              output += "\(indent) allowAlias: \(allowAlias) \n"
                            }
                            var uninterpretedOptionElementIndex:Int = 0
                            for element in uninterpretedOption {
                                output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                                element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                output += "\(indent)}\n"
                                uninterpretedOptionElementIndex++
                            }
                            writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                            unknownFields.writeDescriptionTo(&output, indent:indent)
                          }
                          override var hashValue:Int {
                           get {
                                var hashCode:Int = 7
                                if hasAllowAlias {
                                   hashCode = (hashCode &* 31) &+ allowAlias.hashValue
                                }
                                for element in uninterpretedOption {
                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                }
                                hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                return hashCode
                              }
                            }
                          }

                          class PBEnumOptionsBuilder : ExtendableMessageBuilder {
                          private var result:PBEnumOptions

                          override init () {
                             result = PBEnumOptions()
                          }
                          var hasAllowAlias:Bool {
                               get {
                                    return result.hasAllowAlias
                               }
                          }
                          var allowAlias:Bool {
                               get {
                                    return result.allowAlias
                               }
                               set (value) {
                                   result.hasAllowAlias = true
                                   result.allowAlias = value
                               }
                          }
                          func clearAllowAlias() -> PBEnumOptionsBuilder{
                               result.hasAllowAlias = false
                               result.allowAlias = true
                               return self
                          }
                          var uninterpretedOption:[PBUninterpretedOption] {
                               get {
                                   return result.uninterpretedOption
                               }
                               set (value) {
                                   result.uninterpretedOption = value
                               }
                          }
                          func clearUninterpretedOption() -> PBEnumOptionsBuilder {
                            result.uninterpretedOption.removeAll(keepCapacity: false)
                            return self
                          }
                          override var internalGetResult:ExtendableMessage {
                               get {
                                   return result
                               }
                          }
                          override func clear() -> PBEnumOptionsBuilder {
                            result = PBEnumOptions()
                            return self
                          }
                          override func clone() -> PBEnumOptionsBuilder {
                            return PBEnumOptions.builderWithPrototype(result)
                          }
                          func build() -> PBEnumOptions {
                               checkInitialized()
                               return buildPartial()
                          }
                          func buildPartial() -> PBEnumOptions {
                            var returnMe:PBEnumOptions = result
                            return returnMe
                          }
                          func mergeFrom(other:PBEnumOptions) -> PBEnumOptionsBuilder {
                            if (other == PBEnumOptions()) {
                              return self
                            }
                            if other.hasAllowAlias {
                                 allowAlias = other.allowAlias
                            }
                            if !other.uninterpretedOption.isEmpty  {
                               result.uninterpretedOption += other.uninterpretedOption
                            }
                            mergeExtensionFields(other)
                              mergeUnknownFields(other.unknownFields)
                            return self
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream) ->PBEnumOptionsBuilder {
                               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                          }
                          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumOptionsBuilder {
                            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                            while (true) {
                              var tag:Int32 = input.readTag()
                                if tag == 0 {
                                     self.unknownFields = unknownFieldsBuilder.build()
                                     return self}
                                else if tag == 16 {
                                  allowAlias = input.readBool()
                                }
                                else if tag == 7994 {
                                  var subBuilder = PBUninterpretedOption.builder()
                                  input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                  uninterpretedOption += [subBuilder.buildPartial()]
                                }
                                else {
                                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                          unknownFields = unknownFieldsBuilder.build()
                                          return self
                                      }
                                }
                                }
                             }
                          }

                          func == (lhs: PBEnumValueOptions, rhs: PBEnumValueOptions) -> Bool {
                                if (lhs === rhs) {
                                  return true
                                }
                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                                 fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                          }
                          class PBEnumValueOptions : ExtendableMessage {
                            private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                            override init() {
                                 super.init()
                            }
                            override func isInitialized() -> Bool {
                              var isInituninterpretedOption:Bool = true
                              for element in uninterpretedOption {
                                  if (!element.isInitialized()) {
                                      isInituninterpretedOption = false
                                      break 
                                  }
                              }
                              if !isInituninterpretedOption {
                               return isInituninterpretedOption
                               }
                              if !extensionsAreInitialized() {
                                return false
                              }
                              return true
                            }
                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                              for element in uninterpretedOption {
                                  output.writeMessage(999, value:element)
                              }
                              writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                              unknownFields.writeToCodedOutputStream(output)
                            }
                            override func serializedSize() -> Int32 {
                              var size:Int32 = memoizedSerializedSize
                              if size != -1 {
                                return size
                              }

                              size = 0
                              for element in uninterpretedOption {
                                  size += WireFormat.computeMessageSize(999, value:element)
                              }
                              size += extensionsSerializedSize()
                              size += unknownFields.serializedSize()
                              memoizedSerializedSize = size
                              return size
                            }
                            class func parseFromData(data:[Byte]) -> PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromData(data).build()
                            }
                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromInputStream(input:NSInputStream) -> PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromInputStream(input).build()
                            }
                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream) -> PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromCodedInputStream(input).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumValueOptions {
                              return PBEnumValueOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func builder() -> PBEnumValueOptionsBuilder {
                              return PBEnumValueOptionsBuilder()
                            }
                            class func builderWithPrototype(prototype:PBEnumValueOptions) -> PBEnumValueOptionsBuilder {
                              return PBEnumValueOptions.builder().mergeFrom(prototype)
                            }
                            func builder() -> PBEnumValueOptionsBuilder {
                              return PBEnumValueOptions.builder()
                            }
                            func toBuilder() -> PBEnumValueOptionsBuilder {
                              return PBEnumValueOptions.builderWithPrototype(self)
                            }
                            override func writeDescriptionTo(inout output:String, indent:String) {
                              var uninterpretedOptionElementIndex:Int = 0
                              for element in uninterpretedOption {
                                  output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  uninterpretedOptionElementIndex++
                              }
                              writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                              unknownFields.writeDescriptionTo(&output, indent:indent)
                            }
                            override var hashValue:Int {
                             get {
                                  var hashCode:Int = 7
                                  for element in uninterpretedOption {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                  return hashCode
                                }
                              }
                            }

                            class PBEnumValueOptionsBuilder : ExtendableMessageBuilder {
                            private var result:PBEnumValueOptions

                            override init () {
                               result = PBEnumValueOptions()
                            }
                            var uninterpretedOption:[PBUninterpretedOption] {
                                 get {
                                     return result.uninterpretedOption
                                 }
                                 set (value) {
                                     result.uninterpretedOption = value
                                 }
                            }
                            func clearUninterpretedOption() -> PBEnumValueOptionsBuilder {
                              result.uninterpretedOption.removeAll(keepCapacity: false)
                              return self
                            }
                            override var internalGetResult:ExtendableMessage {
                                 get {
                                     return result
                                 }
                            }
                            override func clear() -> PBEnumValueOptionsBuilder {
                              result = PBEnumValueOptions()
                              return self
                            }
                            override func clone() -> PBEnumValueOptionsBuilder {
                              return PBEnumValueOptions.builderWithPrototype(result)
                            }
                            func build() -> PBEnumValueOptions {
                                 checkInitialized()
                                 return buildPartial()
                            }
                            func buildPartial() -> PBEnumValueOptions {
                              var returnMe:PBEnumValueOptions = result
                              return returnMe
                            }
                            func mergeFrom(other:PBEnumValueOptions) -> PBEnumValueOptionsBuilder {
                              if (other == PBEnumValueOptions()) {
                                return self
                              }
                              if !other.uninterpretedOption.isEmpty  {
                                 result.uninterpretedOption += other.uninterpretedOption
                              }
                              mergeExtensionFields(other)
                                mergeUnknownFields(other.unknownFields)
                              return self
                            }
                            override func mergeFromCodedInputStream(input:CodedInputStream) ->PBEnumValueOptionsBuilder {
                                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                            }
                            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBEnumValueOptionsBuilder {
                              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                              while (true) {
                                var tag:Int32 = input.readTag()
                                  if tag == 0 {
                                       self.unknownFields = unknownFieldsBuilder.build()
                                       return self}
                                  else if tag == 7994 {
                                    var subBuilder = PBUninterpretedOption.builder()
                                    input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                    uninterpretedOption += [subBuilder.buildPartial()]
                                  }
                                  else {
                                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                            unknownFields = unknownFieldsBuilder.build()
                                            return self
                                        }
                                  }
                                  }
                               }
                            }

                            func == (lhs: PBServiceOptions, rhs: PBServiceOptions) -> Bool {
                                  if (lhs === rhs) {
                                    return true
                                  }
                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                  fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                                   fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                            }
                            class PBServiceOptions : ExtendableMessage {
                              private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                              override init() {
                                   super.init()
                              }
                              override func isInitialized() -> Bool {
                                var isInituninterpretedOption:Bool = true
                                for element in uninterpretedOption {
                                    if (!element.isInitialized()) {
                                        isInituninterpretedOption = false
                                        break 
                                    }
                                }
                                if !isInituninterpretedOption {
                                 return isInituninterpretedOption
                                 }
                                if !extensionsAreInitialized() {
                                  return false
                                }
                                return true
                              }
                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                for element in uninterpretedOption {
                                    output.writeMessage(999, value:element)
                                }
                                writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                unknownFields.writeToCodedOutputStream(output)
                              }
                              override func serializedSize() -> Int32 {
                                var size:Int32 = memoizedSerializedSize
                                if size != -1 {
                                  return size
                                }

                                size = 0
                                for element in uninterpretedOption {
                                    size += WireFormat.computeMessageSize(999, value:element)
                                }
                                size += extensionsSerializedSize()
                                size += unknownFields.serializedSize()
                                memoizedSerializedSize = size
                                return size
                              }
                              class func parseFromData(data:[Byte]) -> PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromData(data).build()
                              }
                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromInputStream(input:NSInputStream) -> PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromInputStream(input).build()
                              }
                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream) -> PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromCodedInputStream(input).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBServiceOptions {
                                return PBServiceOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func builder() -> PBServiceOptionsBuilder {
                                return PBServiceOptionsBuilder()
                              }
                              class func builderWithPrototype(prototype:PBServiceOptions) -> PBServiceOptionsBuilder {
                                return PBServiceOptions.builder().mergeFrom(prototype)
                              }
                              func builder() -> PBServiceOptionsBuilder {
                                return PBServiceOptions.builder()
                              }
                              func toBuilder() -> PBServiceOptionsBuilder {
                                return PBServiceOptions.builderWithPrototype(self)
                              }
                              override func writeDescriptionTo(inout output:String, indent:String) {
                                var uninterpretedOptionElementIndex:Int = 0
                                for element in uninterpretedOption {
                                    output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                                    element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                    output += "\(indent)}\n"
                                    uninterpretedOptionElementIndex++
                                }
                                writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                                unknownFields.writeDescriptionTo(&output, indent:indent)
                              }
                              override var hashValue:Int {
                               get {
                                    var hashCode:Int = 7
                                    for element in uninterpretedOption {
                                        hashCode = (hashCode &* 31) &+ element.hashValue
                                    }
                                    hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                    return hashCode
                                  }
                                }
                              }

                              class PBServiceOptionsBuilder : ExtendableMessageBuilder {
                              private var result:PBServiceOptions

                              override init () {
                                 result = PBServiceOptions()
                              }
                              var uninterpretedOption:[PBUninterpretedOption] {
                                   get {
                                       return result.uninterpretedOption
                                   }
                                   set (value) {
                                       result.uninterpretedOption = value
                                   }
                              }
                              func clearUninterpretedOption() -> PBServiceOptionsBuilder {
                                result.uninterpretedOption.removeAll(keepCapacity: false)
                                return self
                              }
                              override var internalGetResult:ExtendableMessage {
                                   get {
                                       return result
                                   }
                              }
                              override func clear() -> PBServiceOptionsBuilder {
                                result = PBServiceOptions()
                                return self
                              }
                              override func clone() -> PBServiceOptionsBuilder {
                                return PBServiceOptions.builderWithPrototype(result)
                              }
                              func build() -> PBServiceOptions {
                                   checkInitialized()
                                   return buildPartial()
                              }
                              func buildPartial() -> PBServiceOptions {
                                var returnMe:PBServiceOptions = result
                                return returnMe
                              }
                              func mergeFrom(other:PBServiceOptions) -> PBServiceOptionsBuilder {
                                if (other == PBServiceOptions()) {
                                  return self
                                }
                                if !other.uninterpretedOption.isEmpty  {
                                   result.uninterpretedOption += other.uninterpretedOption
                                }
                                mergeExtensionFields(other)
                                  mergeUnknownFields(other.unknownFields)
                                return self
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream) ->PBServiceOptionsBuilder {
                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBServiceOptionsBuilder {
                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                while (true) {
                                  var tag:Int32 = input.readTag()
                                    if tag == 0 {
                                         self.unknownFields = unknownFieldsBuilder.build()
                                         return self}
                                    else if tag == 7994 {
                                      var subBuilder = PBUninterpretedOption.builder()
                                      input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                      uninterpretedOption += [subBuilder.buildPartial()]
                                    }
                                    else {
                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                              unknownFields = unknownFieldsBuilder.build()
                                              return self
                                          }
                                    }
                                    }
                                 }
                              }

                              func == (lhs: PBMethodOptions, rhs: PBMethodOptions) -> Bool {
                                    if (lhs === rhs) {
                                      return true
                                    }
                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                    fieldCheck = fieldCheck && (lhs.uninterpretedOption == rhs.uninterpretedOption)
                                     fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                              }
                              class PBMethodOptions : ExtendableMessage {
                                private(set) var uninterpretedOption:[PBUninterpretedOption]  = [PBUninterpretedOption]()
                                override init() {
                                     super.init()
                                }
                                override func isInitialized() -> Bool {
                                  var isInituninterpretedOption:Bool = true
                                  for element in uninterpretedOption {
                                      if (!element.isInitialized()) {
                                          isInituninterpretedOption = false
                                          break 
                                      }
                                  }
                                  if !isInituninterpretedOption {
                                   return isInituninterpretedOption
                                   }
                                  if !extensionsAreInitialized() {
                                    return false
                                  }
                                  return true
                                }
                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                  for element in uninterpretedOption {
                                      output.writeMessage(999, value:element)
                                  }
                                  writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                                  unknownFields.writeToCodedOutputStream(output)
                                }
                                override func serializedSize() -> Int32 {
                                  var size:Int32 = memoizedSerializedSize
                                  if size != -1 {
                                    return size
                                  }

                                  size = 0
                                  for element in uninterpretedOption {
                                      size += WireFormat.computeMessageSize(999, value:element)
                                  }
                                  size += extensionsSerializedSize()
                                  size += unknownFields.serializedSize()
                                  memoizedSerializedSize = size
                                  return size
                                }
                                class func parseFromData(data:[Byte]) -> PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromData(data).build()
                                }
                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromInputStream(input:NSInputStream) -> PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromInputStream(input).build()
                                }
                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream) -> PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromCodedInputStream(input).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMethodOptions {
                                  return PBMethodOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func builder() -> PBMethodOptionsBuilder {
                                  return PBMethodOptionsBuilder()
                                }
                                class func builderWithPrototype(prototype:PBMethodOptions) -> PBMethodOptionsBuilder {
                                  return PBMethodOptions.builder().mergeFrom(prototype)
                                }
                                func builder() -> PBMethodOptionsBuilder {
                                  return PBMethodOptions.builder()
                                }
                                func toBuilder() -> PBMethodOptionsBuilder {
                                  return PBMethodOptions.builderWithPrototype(self)
                                }
                                override func writeDescriptionTo(inout output:String, indent:String) {
                                  var uninterpretedOptionElementIndex:Int = 0
                                  for element in uninterpretedOption {
                                      output += "\(indent) uninterpretedOption[\(uninterpretedOptionElementIndex)] {\n"
                                      element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                      output += "\(indent)}\n"
                                      uninterpretedOptionElementIndex++
                                  }
                                  writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                }
                                override var hashValue:Int {
                                 get {
                                      var hashCode:Int = 7
                                      for element in uninterpretedOption {
                                          hashCode = (hashCode &* 31) &+ element.hashValue
                                      }
                                      hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                      return hashCode
                                    }
                                  }
                                }

                                class PBMethodOptionsBuilder : ExtendableMessageBuilder {
                                private var result:PBMethodOptions

                                override init () {
                                   result = PBMethodOptions()
                                }
                                var uninterpretedOption:[PBUninterpretedOption] {
                                     get {
                                         return result.uninterpretedOption
                                     }
                                     set (value) {
                                         result.uninterpretedOption = value
                                     }
                                }
                                func clearUninterpretedOption() -> PBMethodOptionsBuilder {
                                  result.uninterpretedOption.removeAll(keepCapacity: false)
                                  return self
                                }
                                override var internalGetResult:ExtendableMessage {
                                     get {
                                         return result
                                     }
                                }
                                override func clear() -> PBMethodOptionsBuilder {
                                  result = PBMethodOptions()
                                  return self
                                }
                                override func clone() -> PBMethodOptionsBuilder {
                                  return PBMethodOptions.builderWithPrototype(result)
                                }
                                func build() -> PBMethodOptions {
                                     checkInitialized()
                                     return buildPartial()
                                }
                                func buildPartial() -> PBMethodOptions {
                                  var returnMe:PBMethodOptions = result
                                  return returnMe
                                }
                                func mergeFrom(other:PBMethodOptions) -> PBMethodOptionsBuilder {
                                  if (other == PBMethodOptions()) {
                                    return self
                                  }
                                  if !other.uninterpretedOption.isEmpty  {
                                     result.uninterpretedOption += other.uninterpretedOption
                                  }
                                  mergeExtensionFields(other)
                                    mergeUnknownFields(other.unknownFields)
                                  return self
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream) ->PBMethodOptionsBuilder {
                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBMethodOptionsBuilder {
                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                  while (true) {
                                    var tag:Int32 = input.readTag()
                                      if tag == 0 {
                                           self.unknownFields = unknownFieldsBuilder.build()
                                           return self}
                                      else if tag == 7994 {
                                        var subBuilder = PBUninterpretedOption.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        uninterpretedOption += [subBuilder.buildPartial()]
                                      }
                                      else {
                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                unknownFields = unknownFieldsBuilder.build()
                                                return self
                                            }
                                      }
                                      }
                                   }
                                }

                                func == (lhs: PBUninterpretedOption, rhs: PBUninterpretedOption) -> Bool {
                                      if (lhs === rhs) {
                                        return true
                                      }
                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                      fieldCheck = fieldCheck && (lhs.name == rhs.name)
                                       fieldCheck = fieldCheck && (lhs.hasIdentifierValue == rhs.hasIdentifierValue) && (!lhs.hasIdentifierValue || lhs.identifierValue == rhs.identifierValue)
                                       fieldCheck = fieldCheck && (lhs.hasPositiveIntValue == rhs.hasPositiveIntValue) && (!lhs.hasPositiveIntValue || lhs.positiveIntValue == rhs.positiveIntValue)
                                       fieldCheck = fieldCheck && (lhs.hasNegativeIntValue == rhs.hasNegativeIntValue) && (!lhs.hasNegativeIntValue || lhs.negativeIntValue == rhs.negativeIntValue)
                                       fieldCheck = fieldCheck && (lhs.hasDoubleValue == rhs.hasDoubleValue) && (!lhs.hasDoubleValue || lhs.doubleValue == rhs.doubleValue)
                                       fieldCheck = fieldCheck && (lhs.hasStringValue == rhs.hasStringValue) && (!lhs.hasStringValue || lhs.stringValue == rhs.stringValue)
                                       fieldCheck = fieldCheck && (lhs.hasAggregateValue == rhs.hasAggregateValue) && (!lhs.hasAggregateValue || lhs.aggregateValue == rhs.aggregateValue)
                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                }
                                class PBUninterpretedOption : GeneratedMessage {
                                  private(set) var hasIdentifierValue:Bool = false
                                  private(set) var identifierValue:String = ""

                                  private(set) var hasPositiveIntValue:Bool = false
                                  private(set) var positiveIntValue:UInt64 = 0

                                  private(set) var hasNegativeIntValue:Bool = false
                                  private(set) var negativeIntValue:Int64 = 0

                                  private(set) var hasDoubleValue:Bool = false
                                  private(set) var doubleValue:Double = 0

                                  private(set) var hasStringValue:Bool = false
                                  private(set) var stringValue:[Byte] = [Byte]()

                                  private(set) var hasAggregateValue:Bool = false
                                  private(set) var aggregateValue:String = ""

                                  private(set) var name:[PBUninterpretedOptionNamePart]  = [PBUninterpretedOptionNamePart]()
                                  override init() {
                                       super.init()
                                  }
                                  override func isInitialized() -> Bool {
                                    var isInitname:Bool = true
                                    for element in name {
                                        if (!element.isInitialized()) {
                                            isInitname = false
                                            break 
                                        }
                                    }
                                    if !isInitname {
                                     return isInitname
                                     }
                                    return true
                                  }
                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                    for element in name {
                                        output.writeMessage(2, value:element)
                                    }
                                    if hasIdentifierValue {
                                      output.writeString(3, value:identifierValue)
                                    }
                                    if hasPositiveIntValue {
                                      output.writeUInt64(4, value:positiveIntValue)
                                    }
                                    if hasNegativeIntValue {
                                      output.writeInt64(5, value:negativeIntValue)
                                    }
                                    if hasDoubleValue {
                                      output.writeDouble(6, value:doubleValue)
                                    }
                                    if hasStringValue {
                                      output.writeData(7, value:stringValue)
                                    }
                                    if hasAggregateValue {
                                      output.writeString(8, value:aggregateValue)
                                    }
                                    unknownFields.writeToCodedOutputStream(output)
                                  }
                                  override func serializedSize() -> Int32 {
                                    var size:Int32 = memoizedSerializedSize
                                    if size != -1 {
                                      return size
                                    }

                                    size = 0
                                    for element in name {
                                        size += WireFormat.computeMessageSize(2, value:element)
                                    }
                                    if hasIdentifierValue {
                                      size += WireFormat.computeStringSize(3, value:identifierValue)
                                    }
                                    if hasPositiveIntValue {
                                      size += WireFormat.computeUInt64Size(4, value:positiveIntValue)
                                    }
                                    if hasNegativeIntValue {
                                      size += WireFormat.computeInt64Size(5, value:negativeIntValue)
                                    }
                                    if hasDoubleValue {
                                      size += WireFormat.computeDoubleSize(6, value:doubleValue)
                                    }
                                    if hasStringValue {
                                      size += WireFormat.computeDataSize(7, value:stringValue)
                                    }
                                    if hasAggregateValue {
                                      size += WireFormat.computeStringSize(8, value:aggregateValue)
                                    }
                                    size += unknownFields.serializedSize()
                                    memoizedSerializedSize = size
                                    return size
                                  }
                                  class func parseFromData(data:[Byte]) -> PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromData(data).build()
                                  }
                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream) -> PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromInputStream(input).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream) -> PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromCodedInputStream(input).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUninterpretedOption {
                                    return PBUninterpretedOption.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func builder() -> PBUninterpretedOptionBuilder {
                                    return PBUninterpretedOptionBuilder()
                                  }
                                  class func builderWithPrototype(prototype:PBUninterpretedOption) -> PBUninterpretedOptionBuilder {
                                    return PBUninterpretedOption.builder().mergeFrom(prototype)
                                  }
                                  func builder() -> PBUninterpretedOptionBuilder {
                                    return PBUninterpretedOption.builder()
                                  }
                                  func toBuilder() -> PBUninterpretedOptionBuilder {
                                    return PBUninterpretedOption.builderWithPrototype(self)
                                  }
                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                    var nameElementIndex:Int = 0
                                    for element in name {
                                        output += "\(indent) name[\(nameElementIndex)] {\n"
                                        element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                        output += "\(indent)}\n"
                                        nameElementIndex++
                                    }
                                    if hasIdentifierValue {
                                      output += "\(indent) identifierValue: \(identifierValue) \n"
                                    }
                                    if hasPositiveIntValue {
                                      output += "\(indent) positiveIntValue: \(positiveIntValue) \n"
                                    }
                                    if hasNegativeIntValue {
                                      output += "\(indent) negativeIntValue: \(negativeIntValue) \n"
                                    }
                                    if hasDoubleValue {
                                      output += "\(indent) doubleValue: \(doubleValue) \n"
                                    }
                                    if hasStringValue {
                                      output += "\(indent) stringValue: \(stringValue) \n"
                                    }
                                    if hasAggregateValue {
                                      output += "\(indent) aggregateValue: \(aggregateValue) \n"
                                    }
                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                  }
                                  override var hashValue:Int {
                                   get {
                                        var hashCode:Int = 7
                                        for element in name {
                                            hashCode = (hashCode &* 31) &+ element.hashValue
                                        }
                                        if hasIdentifierValue {
                                           hashCode = (hashCode &* 31) &+ identifierValue.hashValue
                                        }
                                        if hasPositiveIntValue {
                                           hashCode = (hashCode &* 31) &+ positiveIntValue.hashValue
                                        }
                                        if hasNegativeIntValue {
                                           hashCode = (hashCode &* 31) &+ negativeIntValue.hashValue
                                        }
                                        if hasDoubleValue {
                                           hashCode = (hashCode &* 31) &+ doubleValue.hashValue
                                        }
                                        if hasStringValue {
                                           hashCode = (hashCode &* 31) &+ stringValue.hashValue
                                        }
                                        if hasAggregateValue {
                                           hashCode = (hashCode &* 31) &+ aggregateValue.hashValue
                                        }
                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                        return hashCode
                                      }
                                    }
                                  }

                                  func == (lhs: PBUninterpretedOptionNamePart, rhs: PBUninterpretedOptionNamePart) -> Bool {
                                        if (lhs === rhs) {
                                          return true
                                        }
                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                        fieldCheck = fieldCheck && (lhs.hasNamePart == rhs.hasNamePart) && (!lhs.hasNamePart || lhs.namePart == rhs.namePart)
                                         fieldCheck = fieldCheck && (lhs.hasIsExtension == rhs.hasIsExtension) && (!lhs.hasIsExtension || lhs.isExtension == rhs.isExtension)
                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                  }
                                  class PBUninterpretedOptionNamePart : GeneratedMessage {
                                    private(set) var hasNamePart:Bool = false
                                    private(set) var namePart:String = ""

                                    private(set) var hasIsExtension:Bool = false
                                    private(set) var isExtension:Bool = false

                                    override init() {
                                         super.init()
                                    }
                                    override func isInitialized() -> Bool {
                                      if !hasNamePart {
                                        return false
                                      }
                                      if !hasIsExtension {
                                        return false
                                      }
                                      return true
                                    }
                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                      if hasNamePart {
                                        output.writeString(1, value:namePart)
                                      }
                                      if hasIsExtension {
                                        output.writeBool(2, value:isExtension)
                                      }
                                      unknownFields.writeToCodedOutputStream(output)
                                    }
                                    override func serializedSize() -> Int32 {
                                      var size:Int32 = memoizedSerializedSize
                                      if size != -1 {
                                        return size
                                      }

                                      size = 0
                                      if hasNamePart {
                                        size += WireFormat.computeStringSize(1, value:namePart)
                                      }
                                      if hasIsExtension {
                                        size += WireFormat.computeBoolSize(2, value:isExtension)
                                      }
                                      size += unknownFields.serializedSize()
                                      memoizedSerializedSize = size
                                      return size
                                    }
                                    class func parseFromData(data:[Byte]) -> PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromData(data).build()
                                    }
                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream) -> PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromInputStream(input).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream) -> PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromCodedInputStream(input).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUninterpretedOptionNamePart {
                                      return PBUninterpretedOptionNamePart.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func builder() -> PBUninterpretedOptionNamePartBuilder {
                                      return PBUninterpretedOptionNamePartBuilder()
                                    }
                                    class func builderWithPrototype(prototype:PBUninterpretedOptionNamePart) -> PBUninterpretedOptionNamePartBuilder {
                                      return PBUninterpretedOptionNamePart.builder().mergeFrom(prototype)
                                    }
                                    func builder() -> PBUninterpretedOptionNamePartBuilder {
                                      return PBUninterpretedOptionNamePart.builder()
                                    }
                                    func toBuilder() -> PBUninterpretedOptionNamePartBuilder {
                                      return PBUninterpretedOptionNamePart.builderWithPrototype(self)
                                    }
                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                      if hasNamePart {
                                        output += "\(indent) namePart: \(namePart) \n"
                                      }
                                      if hasIsExtension {
                                        output += "\(indent) isExtension: \(isExtension) \n"
                                      }
                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                    }
                                    override var hashValue:Int {
                                     get {
                                          var hashCode:Int = 7
                                          if hasNamePart {
                                             hashCode = (hashCode &* 31) &+ namePart.hashValue
                                          }
                                          if hasIsExtension {
                                             hashCode = (hashCode &* 31) &+ isExtension.hashValue
                                          }
                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                          return hashCode
                                        }
                                      }
                                    }

                                    class PBUninterpretedOptionNamePartBuilder : GeneratedMessageBuilder {
                                    private var result:PBUninterpretedOptionNamePart

                                    override init () {
                                       result = PBUninterpretedOptionNamePart()
                                    }
                                    var hasNamePart:Bool {
                                         get {
                                              return result.hasNamePart
                                         }
                                    }
                                    var namePart:String {
                                         get {
                                              return result.namePart
                                         }
                                         set (value) {
                                             result.hasNamePart = true
                                             result.namePart = value
                                         }
                                    }
                                    func clearNamePart() -> PBUninterpretedOptionNamePartBuilder{
                                         result.hasNamePart = false
                                         result.namePart = ""
                                         return self
                                    }
                                    var hasIsExtension:Bool {
                                         get {
                                              return result.hasIsExtension
                                         }
                                    }
                                    var isExtension:Bool {
                                         get {
                                              return result.isExtension
                                         }
                                         set (value) {
                                             result.hasIsExtension = true
                                             result.isExtension = value
                                         }
                                    }
                                    func clearIsExtension() -> PBUninterpretedOptionNamePartBuilder{
                                         result.hasIsExtension = false
                                         result.isExtension = false
                                         return self
                                    }
                                    override var internalGetResult:GeneratedMessage {
                                         get {
                                            return result
                                         }
                                    }
                                    override func clear() -> PBUninterpretedOptionNamePartBuilder {
                                      result = PBUninterpretedOptionNamePart()
                                      return self
                                    }
                                    override func clone() -> PBUninterpretedOptionNamePartBuilder {
                                      return PBUninterpretedOptionNamePart.builderWithPrototype(result)
                                    }
                                    func build() -> PBUninterpretedOptionNamePart {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> PBUninterpretedOptionNamePart {
                                      var returnMe:PBUninterpretedOptionNamePart = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:PBUninterpretedOptionNamePart) -> PBUninterpretedOptionNamePartBuilder {
                                      if (other == PBUninterpretedOptionNamePart()) {
                                        return self
                                      }
                                      if other.hasNamePart {
                                           namePart = other.namePart
                                      }
                                      if other.hasIsExtension {
                                           isExtension = other.isExtension
                                      }
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->PBUninterpretedOptionNamePartBuilder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUninterpretedOptionNamePartBuilder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 10 {
                                            namePart = input.readString()
                                          }
                                          else if tag == 16 {
                                            isExtension = input.readBool()
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }

                                    class PBUninterpretedOptionBuilder : GeneratedMessageBuilder {
                                    private var result:PBUninterpretedOption

                                    override init () {
                                       result = PBUninterpretedOption()
                                    }
                                    var name:[PBUninterpretedOptionNamePart] {
                                         get {
                                             return result.name
                                         }
                                         set (value) {
                                             result.name = value
                                         }
                                    }
                                    func clearName() -> PBUninterpretedOptionBuilder {
                                      result.name.removeAll(keepCapacity: false)
                                      return self
                                    }
                                    var hasIdentifierValue:Bool {
                                         get {
                                              return result.hasIdentifierValue
                                         }
                                    }
                                    var identifierValue:String {
                                         get {
                                              return result.identifierValue
                                         }
                                         set (value) {
                                             result.hasIdentifierValue = true
                                             result.identifierValue = value
                                         }
                                    }
                                    func clearIdentifierValue() -> PBUninterpretedOptionBuilder{
                                         result.hasIdentifierValue = false
                                         result.identifierValue = ""
                                         return self
                                    }
                                    var hasPositiveIntValue:Bool {
                                         get {
                                              return result.hasPositiveIntValue
                                         }
                                    }
                                    var positiveIntValue:UInt64 {
                                         get {
                                              return result.positiveIntValue
                                         }
                                         set (value) {
                                             result.hasPositiveIntValue = true
                                             result.positiveIntValue = value
                                         }
                                    }
                                    func clearPositiveIntValue() -> PBUninterpretedOptionBuilder{
                                         result.hasPositiveIntValue = false
                                         result.positiveIntValue = 0
                                         return self
                                    }
                                    var hasNegativeIntValue:Bool {
                                         get {
                                              return result.hasNegativeIntValue
                                         }
                                    }
                                    var negativeIntValue:Int64 {
                                         get {
                                              return result.negativeIntValue
                                         }
                                         set (value) {
                                             result.hasNegativeIntValue = true
                                             result.negativeIntValue = value
                                         }
                                    }
                                    func clearNegativeIntValue() -> PBUninterpretedOptionBuilder{
                                         result.hasNegativeIntValue = false
                                         result.negativeIntValue = 0
                                         return self
                                    }
                                    var hasDoubleValue:Bool {
                                         get {
                                              return result.hasDoubleValue
                                         }
                                    }
                                    var doubleValue:Double {
                                         get {
                                              return result.doubleValue
                                         }
                                         set (value) {
                                             result.hasDoubleValue = true
                                             result.doubleValue = value
                                         }
                                    }
                                    func clearDoubleValue() -> PBUninterpretedOptionBuilder{
                                         result.hasDoubleValue = false
                                         result.doubleValue = 0
                                         return self
                                    }
                                    var hasStringValue:Bool {
                                         get {
                                              return result.hasStringValue
                                         }
                                    }
                                    var stringValue:[Byte] {
                                         get {
                                              return result.stringValue
                                         }
                                         set (value) {
                                             result.hasStringValue = true
                                             result.stringValue = value
                                         }
                                    }
                                    func clearStringValue() -> PBUninterpretedOptionBuilder{
                                         result.hasStringValue = false
                                         result.stringValue = [Byte]()
                                         return self
                                    }
                                    var hasAggregateValue:Bool {
                                         get {
                                              return result.hasAggregateValue
                                         }
                                    }
                                    var aggregateValue:String {
                                         get {
                                              return result.aggregateValue
                                         }
                                         set (value) {
                                             result.hasAggregateValue = true
                                             result.aggregateValue = value
                                         }
                                    }
                                    func clearAggregateValue() -> PBUninterpretedOptionBuilder{
                                         result.hasAggregateValue = false
                                         result.aggregateValue = ""
                                         return self
                                    }
                                    override var internalGetResult:GeneratedMessage {
                                         get {
                                            return result
                                         }
                                    }
                                    override func clear() -> PBUninterpretedOptionBuilder {
                                      result = PBUninterpretedOption()
                                      return self
                                    }
                                    override func clone() -> PBUninterpretedOptionBuilder {
                                      return PBUninterpretedOption.builderWithPrototype(result)
                                    }
                                    func build() -> PBUninterpretedOption {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> PBUninterpretedOption {
                                      var returnMe:PBUninterpretedOption = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:PBUninterpretedOption) -> PBUninterpretedOptionBuilder {
                                      if (other == PBUninterpretedOption()) {
                                        return self
                                      }
                                      if !other.name.isEmpty  {
                                         result.name += other.name
                                      }
                                      if other.hasIdentifierValue {
                                           identifierValue = other.identifierValue
                                      }
                                      if other.hasPositiveIntValue {
                                           positiveIntValue = other.positiveIntValue
                                      }
                                      if other.hasNegativeIntValue {
                                           negativeIntValue = other.negativeIntValue
                                      }
                                      if other.hasDoubleValue {
                                           doubleValue = other.doubleValue
                                      }
                                      if other.hasStringValue {
                                           stringValue = other.stringValue
                                      }
                                      if other.hasAggregateValue {
                                           aggregateValue = other.aggregateValue
                                      }
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->PBUninterpretedOptionBuilder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUninterpretedOptionBuilder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 18 {
                                            var subBuilder = PBUninterpretedOptionNamePart.builder()
                                            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                            name += [subBuilder.buildPartial()]
                                          }
                                          else if tag == 26 {
                                            identifierValue = input.readString()
                                          }
                                          else if tag == 32 {
                                            positiveIntValue = input.readUInt64()
                                          }
                                          else if tag == 40 {
                                            negativeIntValue = input.readInt64()
                                          }
                                          else if tag == 49 {
                                            doubleValue = input.readDouble()
                                          }
                                          else if tag == 58 {
                                            stringValue = input.readData()
                                          }
                                          else if tag == 66 {
                                            aggregateValue = input.readString()
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }

                                    func == (lhs: PBSourceCodeInfo, rhs: PBSourceCodeInfo) -> Bool {
                                          if (lhs === rhs) {
                                            return true
                                          }
                                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                          fieldCheck = fieldCheck && (lhs.location == rhs.location)
                                           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                    }
                                    class PBSourceCodeInfo : GeneratedMessage {
                                      private(set) var location:[PBSourceCodeInfoLocation]  = [PBSourceCodeInfoLocation]()
                                      override init() {
                                           super.init()
                                      }
                                      override func isInitialized() -> Bool {
                                        return true
                                      }
                                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                                        for element in location {
                                            output.writeMessage(1, value:element)
                                        }
                                        unknownFields.writeToCodedOutputStream(output)
                                      }
                                      override func serializedSize() -> Int32 {
                                        var size:Int32 = memoizedSerializedSize
                                        if size != -1 {
                                          return size
                                        }

                                        size = 0
                                        for element in location {
                                            size += WireFormat.computeMessageSize(1, value:element)
                                        }
                                        size += unknownFields.serializedSize()
                                        memoizedSerializedSize = size
                                        return size
                                      }
                                      class func parseFromData(data:[Byte]) -> PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromData(data).build()
                                      }
                                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream) -> PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromInputStream(input).build()
                                      }
                                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream) -> PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromCodedInputStream(input).build()
                                      }
                                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfo {
                                        return PBSourceCodeInfo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                      }
                                      class func builder() -> PBSourceCodeInfoBuilder {
                                        return PBSourceCodeInfoBuilder()
                                      }
                                      class func builderWithPrototype(prototype:PBSourceCodeInfo) -> PBSourceCodeInfoBuilder {
                                        return PBSourceCodeInfo.builder().mergeFrom(prototype)
                                      }
                                      func builder() -> PBSourceCodeInfoBuilder {
                                        return PBSourceCodeInfo.builder()
                                      }
                                      func toBuilder() -> PBSourceCodeInfoBuilder {
                                        return PBSourceCodeInfo.builderWithPrototype(self)
                                      }
                                      override func writeDescriptionTo(inout output:String, indent:String) {
                                        var locationElementIndex:Int = 0
                                        for element in location {
                                            output += "\(indent) location[\(locationElementIndex)] {\n"
                                            element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                            output += "\(indent)}\n"
                                            locationElementIndex++
                                        }
                                        unknownFields.writeDescriptionTo(&output, indent:indent)
                                      }
                                      override var hashValue:Int {
                                       get {
                                            var hashCode:Int = 7
                                            for element in location {
                                                hashCode = (hashCode &* 31) &+ element.hashValue
                                            }
                                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                            return hashCode
                                          }
                                        }
                                      }

                                      func == (lhs: PBSourceCodeInfoLocation, rhs: PBSourceCodeInfoLocation) -> Bool {
                                            if (lhs === rhs) {
                                              return true
                                            }
                                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                            fieldCheck = fieldCheck && (lhs.path == rhs.path)
                                             fieldCheck = fieldCheck && (lhs.span == rhs.span)
                                             fieldCheck = fieldCheck && (lhs.hasLeadingComments == rhs.hasLeadingComments) && (!lhs.hasLeadingComments || lhs.leadingComments == rhs.leadingComments)
                                             fieldCheck = fieldCheck && (lhs.hasTrailingComments == rhs.hasTrailingComments) && (!lhs.hasTrailingComments || lhs.trailingComments == rhs.trailingComments)
                                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                      }
                                      class PBSourceCodeInfoLocation : GeneratedMessage {
                                        private(set) var hasLeadingComments:Bool = false
                                        private(set) var leadingComments:String = ""

                                        private(set) var hasTrailingComments:Bool = false
                                        private(set) var trailingComments:String = ""

                                        private(set) var path:[Int32] = [Int32]()
                                        private var pathMemoizedSerializedSize:Int32 = -1
                                        private(set) var span:[Int32] = [Int32]()
                                        private var spanMemoizedSerializedSize:Int32 = -1
                                        override init() {
                                             super.init()
                                        }
                                        override func isInitialized() -> Bool {
                                          return true
                                        }
                                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                                          if !path.isEmpty {
                                            output.writeRawVarint32(10)
                                            output.writeRawVarint32(pathMemoizedSerializedSize)
                                            for value in path {
                                              output.writeInt32NoTag(value)
                                            }
                                          }
                                          if !span.isEmpty {
                                            output.writeRawVarint32(18)
                                            output.writeRawVarint32(spanMemoizedSerializedSize)
                                            for value in span {
                                              output.writeInt32NoTag(value)
                                            }
                                          }
                                          if hasLeadingComments {
                                            output.writeString(3, value:leadingComments)
                                          }
                                          if hasTrailingComments {
                                            output.writeString(4, value:trailingComments)
                                          }
                                          unknownFields.writeToCodedOutputStream(output)
                                        }
                                        override func serializedSize() -> Int32 {
                                          var size:Int32 = memoizedSerializedSize
                                          if size != -1 {
                                            return size
                                          }

                                          size = 0
                                            var dataSizePath:Int32 = 0
                                            for element in path {
                                                dataSizePath += WireFormat.computeInt32SizeNoTag(element)
                                            }
                                            size += dataSizePath
                                            if !path.isEmpty {
                                              size += 1
                                              size += WireFormat.computeInt32SizeNoTag(dataSizePath)
                                            }
                                            pathMemoizedSerializedSize = dataSizePath
                                            var dataSizeSpan:Int32 = 0
                                            for element in span {
                                                dataSizeSpan += WireFormat.computeInt32SizeNoTag(element)
                                            }
                                            size += dataSizeSpan
                                            if !span.isEmpty {
                                              size += 1
                                              size += WireFormat.computeInt32SizeNoTag(dataSizeSpan)
                                            }
                                            spanMemoizedSerializedSize = dataSizeSpan
                                          if hasLeadingComments {
                                            size += WireFormat.computeStringSize(3, value:leadingComments)
                                          }
                                          if hasTrailingComments {
                                            size += WireFormat.computeStringSize(4, value:trailingComments)
                                          }
                                          size += unknownFields.serializedSize()
                                          memoizedSerializedSize = size
                                          return size
                                        }
                                        class func parseFromData(data:[Byte]) -> PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromData(data).build()
                                        }
                                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream) -> PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromInputStream(input).build()
                                        }
                                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream) -> PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromCodedInputStream(input).build()
                                        }
                                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfoLocation {
                                          return PBSourceCodeInfoLocation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                        }
                                        class func builder() -> PBSourceCodeInfoLocationBuilder {
                                          return PBSourceCodeInfoLocationBuilder()
                                        }
                                        class func builderWithPrototype(prototype:PBSourceCodeInfoLocation) -> PBSourceCodeInfoLocationBuilder {
                                          return PBSourceCodeInfoLocation.builder().mergeFrom(prototype)
                                        }
                                        func builder() -> PBSourceCodeInfoLocationBuilder {
                                          return PBSourceCodeInfoLocation.builder()
                                        }
                                        func toBuilder() -> PBSourceCodeInfoLocationBuilder {
                                          return PBSourceCodeInfoLocation.builderWithPrototype(self)
                                        }
                                        override func writeDescriptionTo(inout output:String, indent:String) {
                                          var pathElementIndex:Int = 0
                                          for element in path  {
                                              output += "\(indent) path[\(pathElementIndex)]: \(element)\n"
                                              pathElementIndex++
                                          }
                                          var spanElementIndex:Int = 0
                                          for element in span  {
                                              output += "\(indent) span[\(spanElementIndex)]: \(element)\n"
                                              spanElementIndex++
                                          }
                                          if hasLeadingComments {
                                            output += "\(indent) leadingComments: \(leadingComments) \n"
                                          }
                                          if hasTrailingComments {
                                            output += "\(indent) trailingComments: \(trailingComments) \n"
                                          }
                                          unknownFields.writeDescriptionTo(&output, indent:indent)
                                        }
                                        override var hashValue:Int {
                                         get {
                                              var hashCode:Int = 7
                                              for element in path {
                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                              }
                                              for element in span {
                                                  hashCode = (hashCode &* 31) &+ element.hashValue
                                              }
                                              if hasLeadingComments {
                                                 hashCode = (hashCode &* 31) &+ leadingComments.hashValue
                                              }
                                              if hasTrailingComments {
                                                 hashCode = (hashCode &* 31) &+ trailingComments.hashValue
                                              }
                                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                              return hashCode
                                            }
                                          }
                                        }

                                        class PBSourceCodeInfoLocationBuilder : GeneratedMessageBuilder {
                                        private var result:PBSourceCodeInfoLocation

                                        override init () {
                                           result = PBSourceCodeInfoLocation()
                                        }
                                        var path:[Int32] {
                                             get {
                                                 return result.path
                                             }
                                             set (array) {
                                                 result.path = array
                                             }
                                        }
                                        func clearPath() -> PBSourceCodeInfoLocationBuilder {
                                           result.path.removeAll(keepCapacity: false)
                                           return self
                                        }
                                        var span:[Int32] {
                                             get {
                                                 return result.span
                                             }
                                             set (array) {
                                                 result.span = array
                                             }
                                        }
                                        func clearSpan() -> PBSourceCodeInfoLocationBuilder {
                                           result.span.removeAll(keepCapacity: false)
                                           return self
                                        }
                                        var hasLeadingComments:Bool {
                                             get {
                                                  return result.hasLeadingComments
                                             }
                                        }
                                        var leadingComments:String {
                                             get {
                                                  return result.leadingComments
                                             }
                                             set (value) {
                                                 result.hasLeadingComments = true
                                                 result.leadingComments = value
                                             }
                                        }
                                        func clearLeadingComments() -> PBSourceCodeInfoLocationBuilder{
                                             result.hasLeadingComments = false
                                             result.leadingComments = ""
                                             return self
                                        }
                                        var hasTrailingComments:Bool {
                                             get {
                                                  return result.hasTrailingComments
                                             }
                                        }
                                        var trailingComments:String {
                                             get {
                                                  return result.trailingComments
                                             }
                                             set (value) {
                                                 result.hasTrailingComments = true
                                                 result.trailingComments = value
                                             }
                                        }
                                        func clearTrailingComments() -> PBSourceCodeInfoLocationBuilder{
                                             result.hasTrailingComments = false
                                             result.trailingComments = ""
                                             return self
                                        }
                                        override var internalGetResult:GeneratedMessage {
                                             get {
                                                return result
                                             }
                                        }
                                        override func clear() -> PBSourceCodeInfoLocationBuilder {
                                          result = PBSourceCodeInfoLocation()
                                          return self
                                        }
                                        override func clone() -> PBSourceCodeInfoLocationBuilder {
                                          return PBSourceCodeInfoLocation.builderWithPrototype(result)
                                        }
                                        func build() -> PBSourceCodeInfoLocation {
                                             checkInitialized()
                                             return buildPartial()
                                        }
                                        func buildPartial() -> PBSourceCodeInfoLocation {
                                          var returnMe:PBSourceCodeInfoLocation = result
                                          return returnMe
                                        }
                                        func mergeFrom(other:PBSourceCodeInfoLocation) -> PBSourceCodeInfoLocationBuilder {
                                          if (other == PBSourceCodeInfoLocation()) {
                                            return self
                                          }
                                          if !other.path.isEmpty {
                                              result.path += other.path
                                          }
                                          if !other.span.isEmpty {
                                              result.span += other.span
                                          }
                                          if other.hasLeadingComments {
                                               leadingComments = other.leadingComments
                                          }
                                          if other.hasTrailingComments {
                                               trailingComments = other.trailingComments
                                          }
                                            mergeUnknownFields(other.unknownFields)
                                          return self
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->PBSourceCodeInfoLocationBuilder {
                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfoLocationBuilder {
                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                          while (true) {
                                            var tag:Int32 = input.readTag()
                                              if tag == 0 {
                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                   return self}
                                              else if tag == 10 {
                                                var length:Int32 = input.readRawVarint32()
                                                var limit:Int32 = input.pushLimit(length)
                                                while (input.bytesUntilLimit() > 0) {
                                                  result.path += [input.readInt32()]
                                                }
                                                input.popLimit(limit)
                                              }
                                              else if tag == 18 {
                                                var length:Int32 = input.readRawVarint32()
                                                var limit:Int32 = input.pushLimit(length)
                                                while (input.bytesUntilLimit() > 0) {
                                                  result.span += [input.readInt32()]
                                                }
                                                input.popLimit(limit)
                                              }
                                              else if tag == 26 {
                                                leadingComments = input.readString()
                                              }
                                              else if tag == 34 {
                                                trailingComments = input.readString()
                                              }
                                              else {
                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                        unknownFields = unknownFieldsBuilder.build()
                                                        return self
                                                    }
                                              }
                                              }
                                           }
                                        }

                                        class PBSourceCodeInfoBuilder : GeneratedMessageBuilder {
                                        private var result:PBSourceCodeInfo

                                        override init () {
                                           result = PBSourceCodeInfo()
                                        }
                                        var location:[PBSourceCodeInfoLocation] {
                                             get {
                                                 return result.location
                                             }
                                             set (value) {
                                                 result.location = value
                                             }
                                        }
                                        func clearLocation() -> PBSourceCodeInfoBuilder {
                                          result.location.removeAll(keepCapacity: false)
                                          return self
                                        }
                                        override var internalGetResult:GeneratedMessage {
                                             get {
                                                return result
                                             }
                                        }
                                        override func clear() -> PBSourceCodeInfoBuilder {
                                          result = PBSourceCodeInfo()
                                          return self
                                        }
                                        override func clone() -> PBSourceCodeInfoBuilder {
                                          return PBSourceCodeInfo.builderWithPrototype(result)
                                        }
                                        func build() -> PBSourceCodeInfo {
                                             checkInitialized()
                                             return buildPartial()
                                        }
                                        func buildPartial() -> PBSourceCodeInfo {
                                          var returnMe:PBSourceCodeInfo = result
                                          return returnMe
                                        }
                                        func mergeFrom(other:PBSourceCodeInfo) -> PBSourceCodeInfoBuilder {
                                          if (other == PBSourceCodeInfo()) {
                                            return self
                                          }
                                          if !other.location.isEmpty  {
                                             result.location += other.location
                                          }
                                            mergeUnknownFields(other.unknownFields)
                                          return self
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream) ->PBSourceCodeInfoBuilder {
                                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                        }
                                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBSourceCodeInfoBuilder {
                                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                          while (true) {
                                            var tag:Int32 = input.readTag()
                                              if tag == 0 {
                                                   self.unknownFields = unknownFieldsBuilder.build()
                                                   return self}
                                              else if tag == 10 {
                                                var subBuilder = PBSourceCodeInfoLocation.builder()
                                                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                                location += [subBuilder.buildPartial()]
                                              }
                                              else {
                                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                        unknownFields = unknownFieldsBuilder.build()
                                                        return self
                                                    }
                                              }
                                              }
                                           }
                                        }


                                        // @@protoc_insertion_point(global_scope)
