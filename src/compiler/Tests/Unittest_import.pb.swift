// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestImportRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        UnittestImportPublicRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

enum ImportEnum:Int32 {
  case ImportEnumImportFoo = 7
  case ImportEnumImportBar = 8
  case ImportEnumImportBaz = 9

  static func ImportEnumIsValidValue(value:ImportEnum) ->Bool {
    switch value {
      case .ImportEnumImportFoo, .ImportEnumImportBar, .ImportEnumImportBaz:
        return true;
      default:
        return false;
    }
  }
}

func == (lhs: ImportMessage, rhs: ImportMessage) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasD == rhs.hasD) && (!lhs.hasD || lhs.d == rhs.d)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class ImportMessage : GeneratedMessage {
  private(set) var hasD:Bool = false
  private(set) var d:Int32 = 0

  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasD {
      output.writeInt32(1, value:d)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasD {
      size += WireFormat.computeInt32Size(1, value:d)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ImportMessage {
    return ImportMessage.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ImportMessage {
    return ImportMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ImportMessage {
    return ImportMessage.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ImportMessage {
    return ImportMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ImportMessage {
    return ImportMessage.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ImportMessage {
    return ImportMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ImportMessageBuilder {
    return ImportMessageBuilder()
  }
  class func builderWithPrototype(prototype:ImportMessage) -> ImportMessageBuilder {
    return ImportMessage.builder().mergeFrom(prototype)
  }
  func builder() -> ImportMessageBuilder {
    return ImportMessage.builder()
  }
  func toBuilder() -> ImportMessageBuilder {
    return ImportMessage.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasD {
      output += "\(indent) d: \(d) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasD {
           hashCode = (hashCode &* 31) &+ d.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class ImportMessageBuilder : GeneratedMessageBuilder {
  private var result:ImportMessage

  override init () {
     result = ImportMessage()
  }
  var hasD:Bool {
       get {
            return result.hasD
       }
  }
  var d:Int32 {
       get {
            return result.d
       }
       set (value) {
           result.hasD = true
           result.d = value
       }
  }
  func clearD() -> ImportMessageBuilder{
       result.hasD = false
       result.d = 0
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> ImportMessageBuilder {
    result = ImportMessage()
    return self
  }
  override func clone() -> ImportMessageBuilder {
    return ImportMessage.builderWithPrototype(result)
  }
  func build() -> ImportMessage {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ImportMessage {
    var returnMe:ImportMessage = result
    return returnMe
  }
  func mergeFrom(other:ImportMessage) -> ImportMessageBuilder {
    if (other == ImportMessage()) {
      return self
    }
    if other.hasD {
         d = other.d
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ImportMessageBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ImportMessageBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 8 {
          d = input.readInt32()
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }


  // @@protoc_insertion_point(global_scope)
