// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestLiteRoot {
    private var UnittestLiteRoot_optionalInt32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalInt64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalUint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalUint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalSint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalSint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalFixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalFixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalSfixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalSfixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalFloatExtensionLite:ConcreteExtensionField<Float,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalDoubleExtensionLite:ConcreteExtensionField<Double,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalBoolExtensionLite:ConcreteExtensionField<Bool,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalStringExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalBytesExtensionLite:ConcreteExtensionField<[Byte],TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalGroupExtensionLite:ConcreteExtensionField<OptionalGroup_extension_lite,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalNestedMessageExtensionLite:ConcreteExtensionField<TestAllTypesLiteNestedMessage,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalForeignMessageExtensionLite:ConcreteExtensionField<ForeignMessageLite,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalImportMessageExtensionLite:ConcreteExtensionField<ImportMessageLite,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalNestedEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalForeignEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalImportEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalStringPieceExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalCordExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalPublicImportMessageExtensionLite:ConcreteExtensionField<PublicImportMessageLite,TestAllExtensionsLite>
    private var UnittestLiteRoot_optionalLazyMessageExtensionLite:ConcreteExtensionField<TestAllTypesLiteNestedMessage,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedInt32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedInt64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedUint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedUint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedSint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedSint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedFixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedFixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedSfixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedSfixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedFloatExtensionLite:ConcreteExtensionField<Float,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedDoubleExtensionLite:ConcreteExtensionField<Double,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedBoolExtensionLite:ConcreteExtensionField<Bool,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedStringExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedBytesExtensionLite:ConcreteExtensionField<[Byte],TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedGroupExtensionLite:ConcreteExtensionField<RepeatedGroup_extension_lite,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedNestedMessageExtensionLite:ConcreteExtensionField<TestAllTypesLiteNestedMessage,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedForeignMessageExtensionLite:ConcreteExtensionField<ForeignMessageLite,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedImportMessageExtensionLite:ConcreteExtensionField<ImportMessageLite,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedNestedEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedForeignEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedImportEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedStringPieceExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedCordExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_repeatedLazyMessageExtensionLite:ConcreteExtensionField<TestAllTypesLiteNestedMessage,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultInt32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultInt64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultUint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultUint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultSint32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultSint64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultFixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultFixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultSfixed32ExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultSfixed64ExtensionLite:ConcreteExtensionField<Int64,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultFloatExtensionLite:ConcreteExtensionField<Float,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultDoubleExtensionLite:ConcreteExtensionField<Double,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultBoolExtensionLite:ConcreteExtensionField<Bool,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultStringExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultBytesExtensionLite:ConcreteExtensionField<[Byte],TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultNestedEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultForeignEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultImportEnumExtensionLite:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultStringPieceExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_defaultCordExtensionLite:ConcreteExtensionField<String,TestAllExtensionsLite>
    private var UnittestLiteRoot_packedInt32ExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedInt64ExtensionLite:ConcreteExtensionField<Int64,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedUint32ExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedUint64ExtensionLite:ConcreteExtensionField<Int64,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedSint32ExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedSint64ExtensionLite:ConcreteExtensionField<Int64,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedFixed32ExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedFixed64ExtensionLite:ConcreteExtensionField<Int64,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedSfixed32ExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedSfixed64ExtensionLite:ConcreteExtensionField<Int64,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedFloatExtensionLite:ConcreteExtensionField<Float,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedDoubleExtensionLite:ConcreteExtensionField<Double,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedBoolExtensionLite:ConcreteExtensionField<Bool,TestPackedExtensionsLite>
    private var UnittestLiteRoot_packedEnumExtensionLite:ConcreteExtensionField<Int32,TestPackedExtensionsLite>
    private var TestNestedExtensionLite_nestedExtension:ConcreteExtensionField<Int32,TestAllExtensionsLite>
    private var TestParsingMergeLite_optionalExt:ConcreteExtensionField<TestAllTypesLite,TestParsingMergeLite>
    private var TestParsingMergeLite_repeatedExt:ConcreteExtensionField<TestAllTypesLite,TestParsingMergeLite>
    var extensionRegistry:ExtensionRegistry

    init() {
        UnittestLiteRoot_optionalInt32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:1, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalInt64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:2, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalUint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:3, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalUint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:4, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalSint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:5, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalSint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:6, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalFixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:7, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalFixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:8, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalSfixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:9, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalSfixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:10, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalFloatExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:11, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalDoubleExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:12, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalBoolExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:13, defaultValue:false, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalStringExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:14, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalBytesExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:15, defaultValue:[Byte](), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalGroupExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeGroup, fieldNumber:16, defaultValue:OptionalGroup_extension_lite(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalNestedMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:18, defaultValue:TestAllTypesLiteNestedMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalForeignMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:19, defaultValue:ForeignMessageLite(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalImportMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:20, defaultValue:ImportMessageLite(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalNestedEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:21, defaultValue:TestAllTypesLiteNestedEnumFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalForeignEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:22, defaultValue:ForeignEnumLiteForeignLiteFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalImportEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:23, defaultValue:ImportEnumLiteImportLiteFoo, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalStringPieceExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:24, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalCordExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:25, defaultValue:"", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalPublicImportMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:26, defaultValue:PublicImportMessageLite(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_optionalLazyMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:27, defaultValue:TestAllTypesLiteNestedMessage(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedInt32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:31, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedInt64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:32, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedUint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:33, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedUint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:34, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedSint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:35, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedSint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:36, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedFixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:37, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedFixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:38, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedSfixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:39, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedSfixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:40, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedFloatExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:41, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedDoubleExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:42, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedBoolExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:43, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedStringExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:44, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedBytesExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:45, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedGroupExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeGroup, fieldNumber:46, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedNestedMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:48, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedForeignMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:49, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedImportMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:50, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedNestedEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:51, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedForeignEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:52, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedImportEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:53, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedStringPieceExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:54, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedCordExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:55, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_repeatedLazyMessageExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:57, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultInt32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:61, defaultValue:41, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultInt64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:62, defaultValue:42, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultUint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:63, defaultValue:43, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultUint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:64, defaultValue:44, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultSint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:65, defaultValue:-45, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultSint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:66, defaultValue:46, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultFixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:67, defaultValue:47, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultFixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:68, defaultValue:48, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultSfixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:69, defaultValue:49, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultSfixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:70, defaultValue:-50, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultFloatExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:71, defaultValue:51.5, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultDoubleExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:72, defaultValue:52000, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultBoolExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:73, defaultValue:true, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultStringExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:74, defaultValue:"hello", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultBytesExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBytes, fieldNumber:75, defaultValue:([Byte]() + "world".utf8), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultNestedEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:81, defaultValue:TestAllTypesLiteNestedEnumBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultForeignEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:82, defaultValue:ForeignEnumLiteForeignLiteBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultImportEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:83, defaultValue:ImportEnumLiteImportLiteBar, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultStringPieceExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:84, defaultValue:"abc", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_defaultCordExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeString, fieldNumber:85, defaultValue:"123", isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedInt32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:90, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedInt64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt64, fieldNumber:91, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedUint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt32, fieldNumber:92, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedUint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeUInt64, fieldNumber:93, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedSint32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt32, fieldNumber:94, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedSint64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSInt64, fieldNumber:95, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedFixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed32, fieldNumber:96, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedFixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFixed64, fieldNumber:97, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedSfixed32ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed32, fieldNumber:98, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedSfixed64ExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeSFixed64, fieldNumber:99, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedFloatExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeFloat, fieldNumber:100, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedDoubleExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeDouble, fieldNumber:101, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedBoolExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeBool, fieldNumber:102, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        UnittestLiteRoot_packedEnumExtensionLite = ConcreteExtensionField(type:ExtensionType.ExtensionTypeEnum, fieldNumber:103, defaultValue:[$type$](), isRepeated:true, isPacked:true, isMessageSetWireFormat:false)
        TestNestedExtensionLite_nestedExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeInt32, fieldNumber:12345, defaultValue:0, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        TestParsingMergeLite_optionalExt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1000, defaultValue:TestAllTypesLite(), isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
        TestParsingMergeLite_repeatedExt = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1001, defaultValue:[$type$](), isRepeated:true, isPacked:false, isMessageSetWireFormat:false)
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        UnittestImportLiteRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(UnittestLiteRoot_optionalInt32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalInt64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalUint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalUint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalSint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalSint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalFixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalFixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalSfixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalSfixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalFloatExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalDoubleExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalBoolExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalStringExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalBytesExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalGroupExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalNestedMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalForeignMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalImportMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalNestedEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalForeignEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalImportEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalStringPieceExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalCordExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalPublicImportMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_optionalLazyMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedInt32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedInt64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedUint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedUint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedSint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedSint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedFixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedFixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedSfixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedSfixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedFloatExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedDoubleExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedBoolExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedStringExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedBytesExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedGroupExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedNestedMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedForeignMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedImportMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedNestedEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedForeignEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedImportEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedStringPieceExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedCordExtensionLite)
      registry.addExtension(UnittestLiteRoot_repeatedLazyMessageExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultInt32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultInt64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultUint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultUint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultSint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultSint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultFixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultFixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultSfixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultSfixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultFloatExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultDoubleExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultBoolExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultStringExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultBytesExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultNestedEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultForeignEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultImportEnumExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultStringPieceExtensionLite)
      registry.addExtension(UnittestLiteRoot_defaultCordExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedInt32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedInt64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedUint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedUint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedSint32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedSint64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedFixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedFixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedSfixed32ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedSfixed64ExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedFloatExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedDoubleExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedBoolExtensionLite)
      registry.addExtension(UnittestLiteRoot_packedEnumExtensionLite)
      registry.addExtension(TestNestedExtensionLite_nestedExtension)
      registry.addExtension(TestParsingMergeLite_optionalExt)
      registry.addExtension(TestParsingMergeLite_repeatedExt)
    }
    var optionalInt32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalInt32ExtensionLite
         }
    }
    var optionalInt64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalInt64ExtensionLite
         }
    }
    var optionalUint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalUint32ExtensionLite
         }
    }
    var optionalUint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalUint64ExtensionLite
         }
    }
    var optionalSint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalSint32ExtensionLite
         }
    }
    var optionalSint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalSint64ExtensionLite
         }
    }
    var optionalFixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalFixed32ExtensionLite
         }
    }
    var optionalFixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalFixed64ExtensionLite
         }
    }
    var optionalSfixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalSfixed32ExtensionLite
         }
    }
    var optionalSfixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalSfixed64ExtensionLite
         }
    }
    var optionalFloatExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalFloatExtensionLite
         }
    }
    var optionalDoubleExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalDoubleExtensionLite
         }
    }
    var optionalBoolExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalBoolExtensionLite
         }
    }
    var optionalStringExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalStringExtensionLite
         }
    }
    var optionalBytesExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalBytesExtensionLite
         }
    }
    var optionalGroupExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalGroupExtensionLite
         }
    }
    var optionalNestedMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalNestedMessageExtensionLite
         }
    }
    var optionalForeignMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalForeignMessageExtensionLite
         }
    }
    var optionalImportMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalImportMessageExtensionLite
         }
    }
    var optionalNestedEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalNestedEnumExtensionLite
         }
    }
    var optionalForeignEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalForeignEnumExtensionLite
         }
    }
    var optionalImportEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalImportEnumExtensionLite
         }
    }
    var optionalStringPieceExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalStringPieceExtensionLite
         }
    }
    var optionalCordExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalCordExtensionLite
         }
    }
    var optionalPublicImportMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalPublicImportMessageExtensionLite
         }
    }
    var optionalLazyMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_optionalLazyMessageExtensionLite
         }
    }
    var repeatedInt32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedInt32ExtensionLite
         }
    }
    var repeatedInt64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedInt64ExtensionLite
         }
    }
    var repeatedUint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedUint32ExtensionLite
         }
    }
    var repeatedUint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedUint64ExtensionLite
         }
    }
    var repeatedSint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedSint32ExtensionLite
         }
    }
    var repeatedSint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedSint64ExtensionLite
         }
    }
    var repeatedFixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedFixed32ExtensionLite
         }
    }
    var repeatedFixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedFixed64ExtensionLite
         }
    }
    var repeatedSfixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedSfixed32ExtensionLite
         }
    }
    var repeatedSfixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedSfixed64ExtensionLite
         }
    }
    var repeatedFloatExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedFloatExtensionLite
         }
    }
    var repeatedDoubleExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedDoubleExtensionLite
         }
    }
    var repeatedBoolExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedBoolExtensionLite
         }
    }
    var repeatedStringExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedStringExtensionLite
         }
    }
    var repeatedBytesExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedBytesExtensionLite
         }
    }
    var repeatedGroupExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedGroupExtensionLite
         }
    }
    var repeatedNestedMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedNestedMessageExtensionLite
         }
    }
    var repeatedForeignMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedForeignMessageExtensionLite
         }
    }
    var repeatedImportMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedImportMessageExtensionLite
         }
    }
    var repeatedNestedEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedNestedEnumExtensionLite
         }
    }
    var repeatedForeignEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedForeignEnumExtensionLite
         }
    }
    var repeatedImportEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedImportEnumExtensionLite
         }
    }
    var repeatedStringPieceExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedStringPieceExtensionLite
         }
    }
    var repeatedCordExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedCordExtensionLite
         }
    }
    var repeatedLazyMessageExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_repeatedLazyMessageExtensionLite
         }
    }
    var defaultInt32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultInt32ExtensionLite
         }
    }
    var defaultInt64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultInt64ExtensionLite
         }
    }
    var defaultUint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultUint32ExtensionLite
         }
    }
    var defaultUint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultUint64ExtensionLite
         }
    }
    var defaultSint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultSint32ExtensionLite
         }
    }
    var defaultSint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultSint64ExtensionLite
         }
    }
    var defaultFixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultFixed32ExtensionLite
         }
    }
    var defaultFixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultFixed64ExtensionLite
         }
    }
    var defaultSfixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultSfixed32ExtensionLite
         }
    }
    var defaultSfixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultSfixed64ExtensionLite
         }
    }
    var defaultFloatExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultFloatExtensionLite
         }
    }
    var defaultDoubleExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultDoubleExtensionLite
         }
    }
    var defaultBoolExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultBoolExtensionLite
         }
    }
    var defaultStringExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultStringExtensionLite
         }
    }
    var defaultBytesExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultBytesExtensionLite
         }
    }
    var defaultNestedEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultNestedEnumExtensionLite
         }
    }
    var defaultForeignEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultForeignEnumExtensionLite
         }
    }
    var defaultImportEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultImportEnumExtensionLite
         }
    }
    var defaultStringPieceExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultStringPieceExtensionLite
         }
    }
    var defaultCordExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_defaultCordExtensionLite
         }
    }
    var packedInt32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedInt32ExtensionLite
         }
    }
    var packedInt64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedInt64ExtensionLite
         }
    }
    var packedUint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedUint32ExtensionLite
         }
    }
    var packedUint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedUint64ExtensionLite
         }
    }
    var packedSint32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedSint32ExtensionLite
         }
    }
    var packedSint64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedSint64ExtensionLite
         }
    }
    var packedFixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedFixed32ExtensionLite
         }
    }
    var packedFixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedFixed64ExtensionLite
         }
    }
    var packedSfixed32ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedSfixed32ExtensionLite
         }
    }
    var packedSfixed64ExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedSfixed64ExtensionLite
         }
    }
    var packedFloatExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedFloatExtensionLite
         }
    }
    var packedDoubleExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedDoubleExtensionLite
         }
    }
    var packedBoolExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedBoolExtensionLite
         }
    }
    var packedEnumExtensionLite:ExtensionField {
         get {
             return UnittestLiteRoot_packedEnumExtensionLite
         }
    }
    }

enum ForeignEnumLite:Int32 {
  case ForeignEnumLiteForeignLiteFoo = 4
  case ForeignEnumLiteForeignLiteBar = 5
  case ForeignEnumLiteForeignLiteBaz = 6

  static func ForeignEnumLiteIsValidValue(value:ForeignEnumLite) ->Bool {
    switch value {
      case .ForeignEnumLiteForeignLiteFoo, .ForeignEnumLiteForeignLiteBar, .ForeignEnumLiteForeignLiteBaz:
        return true;
      default:
        return false;
    }
  }
}

func == (lhs: TestAllTypesLite, rhs: TestAllTypesLite) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasOptionalInt32 == rhs.hasOptionalInt32) && (!lhs.hasOptionalInt32 || lhs.optionalInt32 == rhs.optionalInt32)
       fieldCheck = fieldCheck && (lhs.hasOptionalInt64 == rhs.hasOptionalInt64) && (!lhs.hasOptionalInt64 || lhs.optionalInt64 == rhs.optionalInt64)
       fieldCheck = fieldCheck && (lhs.hasOptionalUint32 == rhs.hasOptionalUint32) && (!lhs.hasOptionalUint32 || lhs.optionalUint32 == rhs.optionalUint32)
       fieldCheck = fieldCheck && (lhs.hasOptionalUint64 == rhs.hasOptionalUint64) && (!lhs.hasOptionalUint64 || lhs.optionalUint64 == rhs.optionalUint64)
       fieldCheck = fieldCheck && (lhs.hasOptionalSint32 == rhs.hasOptionalSint32) && (!lhs.hasOptionalSint32 || lhs.optionalSint32 == rhs.optionalSint32)
       fieldCheck = fieldCheck && (lhs.hasOptionalSint64 == rhs.hasOptionalSint64) && (!lhs.hasOptionalSint64 || lhs.optionalSint64 == rhs.optionalSint64)
       fieldCheck = fieldCheck && (lhs.hasOptionalFixed32 == rhs.hasOptionalFixed32) && (!lhs.hasOptionalFixed32 || lhs.optionalFixed32 == rhs.optionalFixed32)
       fieldCheck = fieldCheck && (lhs.hasOptionalFixed64 == rhs.hasOptionalFixed64) && (!lhs.hasOptionalFixed64 || lhs.optionalFixed64 == rhs.optionalFixed64)
       fieldCheck = fieldCheck && (lhs.hasOptionalSfixed32 == rhs.hasOptionalSfixed32) && (!lhs.hasOptionalSfixed32 || lhs.optionalSfixed32 == rhs.optionalSfixed32)
       fieldCheck = fieldCheck && (lhs.hasOptionalSfixed64 == rhs.hasOptionalSfixed64) && (!lhs.hasOptionalSfixed64 || lhs.optionalSfixed64 == rhs.optionalSfixed64)
       fieldCheck = fieldCheck && (lhs.hasOptionalFloat == rhs.hasOptionalFloat) && (!lhs.hasOptionalFloat || lhs.optionalFloat == rhs.optionalFloat)
       fieldCheck = fieldCheck && (lhs.hasOptionalDouble == rhs.hasOptionalDouble) && (!lhs.hasOptionalDouble || lhs.optionalDouble == rhs.optionalDouble)
       fieldCheck = fieldCheck && (lhs.hasOptionalBool == rhs.hasOptionalBool) && (!lhs.hasOptionalBool || lhs.optionalBool == rhs.optionalBool)
       fieldCheck = fieldCheck && (lhs.hasOptionalString == rhs.hasOptionalString) && (!lhs.hasOptionalString || lhs.optionalString == rhs.optionalString)
       fieldCheck = fieldCheck && (lhs.hasOptionalBytes == rhs.hasOptionalBytes) && (!lhs.hasOptionalBytes || lhs.optionalBytes == rhs.optionalBytes)
       fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
       fieldCheck = fieldCheck && (lhs.hasOptionalNestedMessage == rhs.hasOptionalNestedMessage) && (!lhs.hasOptionalNestedMessage || lhs.optionalNestedMessage == rhs.optionalNestedMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalForeignMessage == rhs.hasOptionalForeignMessage) && (!lhs.hasOptionalForeignMessage || lhs.optionalForeignMessage == rhs.optionalForeignMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalImportMessage == rhs.hasOptionalImportMessage) && (!lhs.hasOptionalImportMessage || lhs.optionalImportMessage == rhs.optionalImportMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalNestedEnum == rhs.hasOptionalNestedEnum) && (!lhs.hasOptionalNestedEnum || lhs.optionalNestedEnum == rhs.optionalNestedEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalForeignEnum == rhs.hasOptionalForeignEnum) && (!lhs.hasOptionalForeignEnum || lhs.optionalForeignEnum == rhs.optionalForeignEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalImportEnum == rhs.hasOptionalImportEnum) && (!lhs.hasOptionalImportEnum || lhs.optionalImportEnum == rhs.optionalImportEnum)
       fieldCheck = fieldCheck && (lhs.hasOptionalStringPiece == rhs.hasOptionalStringPiece) && (!lhs.hasOptionalStringPiece || lhs.optionalStringPiece == rhs.optionalStringPiece)
       fieldCheck = fieldCheck && (lhs.hasOptionalCord == rhs.hasOptionalCord) && (!lhs.hasOptionalCord || lhs.optionalCord == rhs.optionalCord)
       fieldCheck = fieldCheck && (lhs.hasOptionalPublicImportMessage == rhs.hasOptionalPublicImportMessage) && (!lhs.hasOptionalPublicImportMessage || lhs.optionalPublicImportMessage == rhs.optionalPublicImportMessage)
       fieldCheck = fieldCheck && (lhs.hasOptionalLazyMessage == rhs.hasOptionalLazyMessage) && (!lhs.hasOptionalLazyMessage || lhs.optionalLazyMessage == rhs.optionalLazyMessage)
       fieldCheck = fieldCheck && (lhs.repeatedInt32 == rhs.repeatedInt32)
       fieldCheck = fieldCheck && (lhs.repeatedInt64 == rhs.repeatedInt64)
       fieldCheck = fieldCheck && (lhs.repeatedUint32 == rhs.repeatedUint32)
       fieldCheck = fieldCheck && (lhs.repeatedUint64 == rhs.repeatedUint64)
       fieldCheck = fieldCheck && (lhs.repeatedSint32 == rhs.repeatedSint32)
       fieldCheck = fieldCheck && (lhs.repeatedSint64 == rhs.repeatedSint64)
       fieldCheck = fieldCheck && (lhs.repeatedFixed32 == rhs.repeatedFixed32)
       fieldCheck = fieldCheck && (lhs.repeatedFixed64 == rhs.repeatedFixed64)
       fieldCheck = fieldCheck && (lhs.repeatedSfixed32 == rhs.repeatedSfixed32)
       fieldCheck = fieldCheck && (lhs.repeatedSfixed64 == rhs.repeatedSfixed64)
       fieldCheck = fieldCheck && (lhs.repeatedFloat == rhs.repeatedFloat)
       fieldCheck = fieldCheck && (lhs.repeatedDouble == rhs.repeatedDouble)
       fieldCheck = fieldCheck && (lhs.repeatedBool == rhs.repeatedBool)
       fieldCheck = fieldCheck && (lhs.repeatedString == rhs.repeatedString)
       fieldCheck = fieldCheck && (lhs.repeatedBytes == rhs.repeatedBytes)
       fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
       fieldCheck = fieldCheck && (lhs.repeatedNestedMessage == rhs.repeatedNestedMessage)
       fieldCheck = fieldCheck && (lhs.repeatedForeignMessage == rhs.repeatedForeignMessage)
       fieldCheck = fieldCheck && (lhs.repeatedImportMessage == rhs.repeatedImportMessage)
       fieldCheck = fieldCheck && (lhs.repeatedNestedEnum == rhs.repeatedNestedEnum)
       fieldCheck = fieldCheck && (lhs.repeatedForeignEnum == rhs.repeatedForeignEnum)
       fieldCheck = fieldCheck && (lhs.repeatedImportEnum == rhs.repeatedImportEnum)
       fieldCheck = fieldCheck && (lhs.repeatedStringPiece == rhs.repeatedStringPiece)
       fieldCheck = fieldCheck && (lhs.repeatedCord == rhs.repeatedCord)
       fieldCheck = fieldCheck && (lhs.repeatedLazyMessage == rhs.repeatedLazyMessage)
       fieldCheck = fieldCheck && (lhs.hasDefaultInt32 == rhs.hasDefaultInt32) && (!lhs.hasDefaultInt32 || lhs.defaultInt32 == rhs.defaultInt32)
       fieldCheck = fieldCheck && (lhs.hasDefaultInt64 == rhs.hasDefaultInt64) && (!lhs.hasDefaultInt64 || lhs.defaultInt64 == rhs.defaultInt64)
       fieldCheck = fieldCheck && (lhs.hasDefaultUint32 == rhs.hasDefaultUint32) && (!lhs.hasDefaultUint32 || lhs.defaultUint32 == rhs.defaultUint32)
       fieldCheck = fieldCheck && (lhs.hasDefaultUint64 == rhs.hasDefaultUint64) && (!lhs.hasDefaultUint64 || lhs.defaultUint64 == rhs.defaultUint64)
       fieldCheck = fieldCheck && (lhs.hasDefaultSint32 == rhs.hasDefaultSint32) && (!lhs.hasDefaultSint32 || lhs.defaultSint32 == rhs.defaultSint32)
       fieldCheck = fieldCheck && (lhs.hasDefaultSint64 == rhs.hasDefaultSint64) && (!lhs.hasDefaultSint64 || lhs.defaultSint64 == rhs.defaultSint64)
       fieldCheck = fieldCheck && (lhs.hasDefaultFixed32 == rhs.hasDefaultFixed32) && (!lhs.hasDefaultFixed32 || lhs.defaultFixed32 == rhs.defaultFixed32)
       fieldCheck = fieldCheck && (lhs.hasDefaultFixed64 == rhs.hasDefaultFixed64) && (!lhs.hasDefaultFixed64 || lhs.defaultFixed64 == rhs.defaultFixed64)
       fieldCheck = fieldCheck && (lhs.hasDefaultSfixed32 == rhs.hasDefaultSfixed32) && (!lhs.hasDefaultSfixed32 || lhs.defaultSfixed32 == rhs.defaultSfixed32)
       fieldCheck = fieldCheck && (lhs.hasDefaultSfixed64 == rhs.hasDefaultSfixed64) && (!lhs.hasDefaultSfixed64 || lhs.defaultSfixed64 == rhs.defaultSfixed64)
       fieldCheck = fieldCheck && (lhs.hasDefaultFloat == rhs.hasDefaultFloat) && (!lhs.hasDefaultFloat || lhs.defaultFloat == rhs.defaultFloat)
       fieldCheck = fieldCheck && (lhs.hasDefaultDouble == rhs.hasDefaultDouble) && (!lhs.hasDefaultDouble || lhs.defaultDouble == rhs.defaultDouble)
       fieldCheck = fieldCheck && (lhs.hasDefaultBool == rhs.hasDefaultBool) && (!lhs.hasDefaultBool || lhs.defaultBool == rhs.defaultBool)
       fieldCheck = fieldCheck && (lhs.hasDefaultString == rhs.hasDefaultString) && (!lhs.hasDefaultString || lhs.defaultString == rhs.defaultString)
       fieldCheck = fieldCheck && (lhs.hasDefaultBytes == rhs.hasDefaultBytes) && (!lhs.hasDefaultBytes || lhs.defaultBytes == rhs.defaultBytes)
       fieldCheck = fieldCheck && (lhs.hasDefaultNestedEnum == rhs.hasDefaultNestedEnum) && (!lhs.hasDefaultNestedEnum || lhs.defaultNestedEnum == rhs.defaultNestedEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultForeignEnum == rhs.hasDefaultForeignEnum) && (!lhs.hasDefaultForeignEnum || lhs.defaultForeignEnum == rhs.defaultForeignEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultImportEnum == rhs.hasDefaultImportEnum) && (!lhs.hasDefaultImportEnum || lhs.defaultImportEnum == rhs.defaultImportEnum)
       fieldCheck = fieldCheck && (lhs.hasDefaultStringPiece == rhs.hasDefaultStringPiece) && (!lhs.hasDefaultStringPiece || lhs.defaultStringPiece == rhs.defaultStringPiece)
       fieldCheck = fieldCheck && (lhs.hasDefaultCord == rhs.hasDefaultCord) && (!lhs.hasDefaultCord || lhs.defaultCord == rhs.defaultCord)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestAllTypesLite : GeneratedMessage {
  private(set) var hasOptionalInt32:Bool = false
  private(set) var optionalInt32:Int32 = 0

  private(set) var hasOptionalInt64:Bool = false
  private(set) var optionalInt64:Int64 = 0

  private(set) var hasOptionalUint32:Bool = false
  private(set) var optionalUint32:UInt32 = 0

  private(set) var hasOptionalUint64:Bool = false
  private(set) var optionalUint64:UInt64 = 0

  private(set) var hasOptionalSint32:Bool = false
  private(set) var optionalSint32:Int32 = 0

  private(set) var hasOptionalSint64:Bool = false
  private(set) var optionalSint64:Int64 = 0

  private(set) var hasOptionalFixed32:Bool = false
  private(set) var optionalFixed32:UInt32 = 0

  private(set) var hasOptionalFixed64:Bool = false
  private(set) var optionalFixed64:UInt64 = 0

  private(set) var hasOptionalSfixed32:Bool = false
  private(set) var optionalSfixed32:Int32 = 0

  private(set) var hasOptionalSfixed64:Bool = false
  private(set) var optionalSfixed64:Int64 = 0

  private(set) var hasOptionalFloat:Bool = false
  private(set) var optionalFloat:Float = 0

  private(set) var hasOptionalDouble:Bool = false
  private(set) var optionalDouble:Double = 0

  private(set) var hasOptionalBool:Bool = false
  private(set) var optionalBool:Bool = false

  private(set) var hasOptionalString:Bool = false
  private(set) var optionalString:String = ""

  private(set) var hasOptionalBytes:Bool = false
  private(set) var optionalBytes:[Byte] = [Byte]()

  private(set) var hasOptionalGroup:Bool = false
  private(set) var optionalGroup:TestAllTypesLiteOptionalGroup = TestAllTypesLiteOptionalGroup()
  private(set) var hasOptionalNestedMessage:Bool = false
  private(set) var optionalNestedMessage:TestAllTypesLiteNestedMessage = TestAllTypesLiteNestedMessage()
  private(set) var hasOptionalForeignMessage:Bool = false
  private(set) var optionalForeignMessage:ForeignMessageLite = ForeignMessageLite()
  private(set) var hasOptionalImportMessage:Bool = false
  private(set) var optionalImportMessage:ImportMessageLite = ImportMessageLite()
  private(set) var optionalNestedEnum:TestAllTypesLiteNestedEnum = .TestAllTypesLiteNestedEnumFoo
  private(set) var hasOptionalNestedEnum:Bool = false
  private(set) var optionalForeignEnum:ForeignEnumLite = .ForeignEnumLiteForeignLiteFoo
  private(set) var hasOptionalForeignEnum:Bool = false
  private(set) var optionalImportEnum:ImportEnumLite = .ImportEnumLiteImportLiteFoo
  private(set) var hasOptionalImportEnum:Bool = false
  private(set) var hasOptionalStringPiece:Bool = false
  private(set) var optionalStringPiece:String = ""

  private(set) var hasOptionalCord:Bool = false
  private(set) var optionalCord:String = ""

  private(set) var hasOptionalPublicImportMessage:Bool = false
  private(set) var optionalPublicImportMessage:PublicImportMessageLite = PublicImportMessageLite()
  private(set) var hasOptionalLazyMessage:Bool = false
  private(set) var optionalLazyMessage:TestAllTypesLiteNestedMessage = TestAllTypesLiteNestedMessage()
  private(set) var hasDefaultInt32:Bool = false
  private(set) var defaultInt32:Int32 = 41

  private(set) var hasDefaultInt64:Bool = false
  private(set) var defaultInt64:Int64 = 42

  private(set) var hasDefaultUint32:Bool = false
  private(set) var defaultUint32:UInt32 = 43

  private(set) var hasDefaultUint64:Bool = false
  private(set) var defaultUint64:UInt64 = 44

  private(set) var hasDefaultSint32:Bool = false
  private(set) var defaultSint32:Int32 = -45

  private(set) var hasDefaultSint64:Bool = false
  private(set) var defaultSint64:Int64 = 46

  private(set) var hasDefaultFixed32:Bool = false
  private(set) var defaultFixed32:UInt32 = 47

  private(set) var hasDefaultFixed64:Bool = false
  private(set) var defaultFixed64:UInt64 = 48

  private(set) var hasDefaultSfixed32:Bool = false
  private(set) var defaultSfixed32:Int32 = 49

  private(set) var hasDefaultSfixed64:Bool = false
  private(set) var defaultSfixed64:Int64 = -50

  private(set) var hasDefaultFloat:Bool = false
  private(set) var defaultFloat:Float = 51.5

  private(set) var hasDefaultDouble:Bool = false
  private(set) var defaultDouble:Double = 52000

  private(set) var hasDefaultBool:Bool = false
  private(set) var defaultBool:Bool = true

  private(set) var hasDefaultString:Bool = false
  private(set) var defaultString:String = "hello"

  private(set) var hasDefaultBytes:Bool = false
  private(set) var defaultBytes:[Byte] = ([Byte]() + "world".utf8)

  private(set) var defaultNestedEnum:TestAllTypesLiteNestedEnum = .TestAllTypesLiteNestedEnumBar
  private(set) var hasDefaultNestedEnum:Bool = false
  private(set) var defaultForeignEnum:ForeignEnumLite = .ForeignEnumLiteForeignLiteBar
  private(set) var hasDefaultForeignEnum:Bool = false
  private(set) var defaultImportEnum:ImportEnumLite = .ImportEnumLiteImportLiteBar
  private(set) var hasDefaultImportEnum:Bool = false
  private(set) var hasDefaultStringPiece:Bool = false
  private(set) var defaultStringPiece:String = "abc"

  private(set) var hasDefaultCord:Bool = false
  private(set) var defaultCord:String = "123"

  private(set) var repeatedInt32:[Int32] = [Int32]()
  private(set) var repeatedInt64:[Int64] = [Int64]()
  private(set) var repeatedUint32:[UInt32] = [UInt32]()
  private(set) var repeatedUint64:[UInt64] = [UInt64]()
  private(set) var repeatedSint32:[Int32] = [Int32]()
  private(set) var repeatedSint64:[Int64] = [Int64]()
  private(set) var repeatedFixed32:[UInt32] = [UInt32]()
  private(set) var repeatedFixed64:[UInt64] = [UInt64]()
  private(set) var repeatedSfixed32:[Int32] = [Int32]()
  private(set) var repeatedSfixed64:[Int64] = [Int64]()
  private(set) var repeatedFloat:[Float] = [Float]()
  private(set) var repeatedDouble:[Double] = [Double]()
  private(set) var repeatedBool:[Bool] = [Bool]()
  private(set) var repeatedString:[String] = [String]()
  private(set) var repeatedBytes:[[Byte]] = [[Byte]]()
  private(set) var repeatedGroup:[TestAllTypesLiteRepeatedGroup]  = [TestAllTypesLiteRepeatedGroup]()
  private(set) var repeatedNestedMessage:[TestAllTypesLiteNestedMessage]  = [TestAllTypesLiteNestedMessage]()
  private(set) var repeatedForeignMessage:[ForeignMessageLite]  = [ForeignMessageLite]()
  private(set) var repeatedImportMessage:[ImportMessageLite]  = [ImportMessageLite]()
  private var repeatedNestedEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedNestedEnum:[TestAllTypesLiteNestedEnum] = [TestAllTypesLiteNestedEnum]()
  private var repeatedForeignEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedForeignEnum:[ForeignEnumLite] = [ForeignEnumLite]()
  private var repeatedImportEnumMemoizedSerializedSize:Int32 = 0
  private(set) var repeatedImportEnum:[ImportEnumLite] = [ImportEnumLite]()
  private(set) var repeatedStringPiece:[String] = [String]()
  private(set) var repeatedCord:[String] = [String]()
  private(set) var repeatedLazyMessage:[TestAllTypesLiteNestedMessage]  = [TestAllTypesLiteNestedMessage]()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOptionalInt32 {
      output.writeInt32(1, value:optionalInt32)
    }
    if hasOptionalInt64 {
      output.writeInt64(2, value:optionalInt64)
    }
    if hasOptionalUint32 {
      output.writeUInt32(3, value:optionalUint32)
    }
    if hasOptionalUint64 {
      output.writeUInt64(4, value:optionalUint64)
    }
    if hasOptionalSint32 {
      output.writeSInt32(5, value:optionalSint32)
    }
    if hasOptionalSint64 {
      output.writeSInt64(6, value:optionalSint64)
    }
    if hasOptionalFixed32 {
      output.writeFixed32(7, value:optionalFixed32)
    }
    if hasOptionalFixed64 {
      output.writeFixed64(8, value:optionalFixed64)
    }
    if hasOptionalSfixed32 {
      output.writeSFixed32(9, value:optionalSfixed32)
    }
    if hasOptionalSfixed64 {
      output.writeSFixed64(10, value:optionalSfixed64)
    }
    if hasOptionalFloat {
      output.writeFloat(11, value:optionalFloat)
    }
    if hasOptionalDouble {
      output.writeDouble(12, value:optionalDouble)
    }
    if hasOptionalBool {
      output.writeBool(13, value:optionalBool)
    }
    if hasOptionalString {
      output.writeString(14, value:optionalString)
    }
    if hasOptionalBytes {
      output.writeData(15, value:optionalBytes)
    }
    if hasOptionalGroup {
      output.writeGroup(16, value:optionalGroup)
    }
    if hasOptionalNestedMessage {
      output.writeMessage(18, value:optionalNestedMessage)
    }
    if hasOptionalForeignMessage {
      output.writeMessage(19, value:optionalForeignMessage)
    }
    if hasOptionalImportMessage {
      output.writeMessage(20, value:optionalImportMessage)
    }
    if hasOptionalNestedEnum {
      output.writeEnum(21, value:optionalNestedEnum.toRaw())
    }
    if hasOptionalForeignEnum {
      output.writeEnum(22, value:optionalForeignEnum.toRaw())
    }
    if hasOptionalImportEnum {
      output.writeEnum(23, value:optionalImportEnum.toRaw())
    }
    if hasOptionalStringPiece {
      output.writeString(24, value:optionalStringPiece)
    }
    if hasOptionalCord {
      output.writeString(25, value:optionalCord)
    }
    if hasOptionalPublicImportMessage {
      output.writeMessage(26, value:optionalPublicImportMessage)
    }
    if hasOptionalLazyMessage {
      output.writeMessage(27, value:optionalLazyMessage)
    }
    if !repeatedInt32.isEmpty {
      for value in repeatedInt32 {
        output.writeInt32(31, value:value)
      }
    }
    if !repeatedInt64.isEmpty {
      for value in repeatedInt64 {
        output.writeInt64(32, value:value)
      }
    }
    if !repeatedUint32.isEmpty {
      for value in repeatedUint32 {
        output.writeUInt32(33, value:value)
      }
    }
    if !repeatedUint64.isEmpty {
      for value in repeatedUint64 {
        output.writeUInt64(34, value:value)
      }
    }
    if !repeatedSint32.isEmpty {
      for value in repeatedSint32 {
        output.writeSInt32(35, value:value)
      }
    }
    if !repeatedSint64.isEmpty {
      for value in repeatedSint64 {
        output.writeSInt64(36, value:value)
      }
    }
    if !repeatedFixed32.isEmpty {
      for value in repeatedFixed32 {
        output.writeFixed32(37, value:value)
      }
    }
    if !repeatedFixed64.isEmpty {
      for value in repeatedFixed64 {
        output.writeFixed64(38, value:value)
      }
    }
    if !repeatedSfixed32.isEmpty {
      for value in repeatedSfixed32 {
        output.writeSFixed32(39, value:value)
      }
    }
    if !repeatedSfixed64.isEmpty {
      for value in repeatedSfixed64 {
        output.writeSFixed64(40, value:value)
      }
    }
    if !repeatedFloat.isEmpty {
      for value in repeatedFloat {
        output.writeFloat(41, value:value)
      }
    }
    if !repeatedDouble.isEmpty {
      for value in repeatedDouble {
        output.writeDouble(42, value:value)
      }
    }
    if !repeatedBool.isEmpty {
      for value in repeatedBool {
        output.writeBool(43, value:value)
      }
    }
    if !repeatedString.isEmpty {
      for value in repeatedString {
        output.writeString(44, value:value)
      }
    }
    if !repeatedBytes.isEmpty {
      for value in repeatedBytes {
        output.writeData(45, value:value)
      }
    }
    for element in repeatedGroup {
        output.writeGroup(46, value:element)
    }
    for element in repeatedNestedMessage {
        output.writeMessage(48, value:element)
    }
    for element in repeatedForeignMessage {
        output.writeMessage(49, value:element)
    }
    for element in repeatedImportMessage {
        output.writeMessage(50, value:element)
    }
    for value in repeatedNestedEnum {
        output.writeEnum(51, value:value.toRaw())
    }
    for value in repeatedForeignEnum {
        output.writeEnum(52, value:value.toRaw())
    }
    for value in repeatedImportEnum {
        output.writeEnum(53, value:value.toRaw())
    }
    if !repeatedStringPiece.isEmpty {
      for value in repeatedStringPiece {
        output.writeString(54, value:value)
      }
    }
    if !repeatedCord.isEmpty {
      for value in repeatedCord {
        output.writeString(55, value:value)
      }
    }
    for element in repeatedLazyMessage {
        output.writeMessage(57, value:element)
    }
    if hasDefaultInt32 {
      output.writeInt32(61, value:defaultInt32)
    }
    if hasDefaultInt64 {
      output.writeInt64(62, value:defaultInt64)
    }
    if hasDefaultUint32 {
      output.writeUInt32(63, value:defaultUint32)
    }
    if hasDefaultUint64 {
      output.writeUInt64(64, value:defaultUint64)
    }
    if hasDefaultSint32 {
      output.writeSInt32(65, value:defaultSint32)
    }
    if hasDefaultSint64 {
      output.writeSInt64(66, value:defaultSint64)
    }
    if hasDefaultFixed32 {
      output.writeFixed32(67, value:defaultFixed32)
    }
    if hasDefaultFixed64 {
      output.writeFixed64(68, value:defaultFixed64)
    }
    if hasDefaultSfixed32 {
      output.writeSFixed32(69, value:defaultSfixed32)
    }
    if hasDefaultSfixed64 {
      output.writeSFixed64(70, value:defaultSfixed64)
    }
    if hasDefaultFloat {
      output.writeFloat(71, value:defaultFloat)
    }
    if hasDefaultDouble {
      output.writeDouble(72, value:defaultDouble)
    }
    if hasDefaultBool {
      output.writeBool(73, value:defaultBool)
    }
    if hasDefaultString {
      output.writeString(74, value:defaultString)
    }
    if hasDefaultBytes {
      output.writeData(75, value:defaultBytes)
    }
    if hasDefaultNestedEnum {
      output.writeEnum(81, value:defaultNestedEnum.toRaw())
    }
    if hasDefaultForeignEnum {
      output.writeEnum(82, value:defaultForeignEnum.toRaw())
    }
    if hasDefaultImportEnum {
      output.writeEnum(83, value:defaultImportEnum.toRaw())
    }
    if hasDefaultStringPiece {
      output.writeString(84, value:defaultStringPiece)
    }
    if hasDefaultCord {
      output.writeString(85, value:defaultCord)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasOptionalInt32 {
      size += WireFormat.computeInt32Size(1, value:optionalInt32)
    }
    if hasOptionalInt64 {
      size += WireFormat.computeInt64Size(2, value:optionalInt64)
    }
    if hasOptionalUint32 {
      size += WireFormat.computeUInt32Size(3, value:optionalUint32)
    }
    if hasOptionalUint64 {
      size += WireFormat.computeUInt64Size(4, value:optionalUint64)
    }
    if hasOptionalSint32 {
      size += WireFormat.computeSInt32Size(5, value:optionalSint32)
    }
    if hasOptionalSint64 {
      size += WireFormat.computeSInt64Size(6, value:optionalSint64)
    }
    if hasOptionalFixed32 {
      size += WireFormat.computeFixed32Size(7, value:optionalFixed32)
    }
    if hasOptionalFixed64 {
      size += WireFormat.computeFixed64Size(8, value:optionalFixed64)
    }
    if hasOptionalSfixed32 {
      size += WireFormat.computeSFixed32Size(9, value:optionalSfixed32)
    }
    if hasOptionalSfixed64 {
      size += WireFormat.computeSFixed64Size(10, value:optionalSfixed64)
    }
    if hasOptionalFloat {
      size += WireFormat.computeFloatSize(11, value:optionalFloat)
    }
    if hasOptionalDouble {
      size += WireFormat.computeDoubleSize(12, value:optionalDouble)
    }
    if hasOptionalBool {
      size += WireFormat.computeBoolSize(13, value:optionalBool)
    }
    if hasOptionalString {
      size += WireFormat.computeStringSize(14, value:optionalString)
    }
    if hasOptionalBytes {
      size += WireFormat.computeDataSize(15, value:optionalBytes)
    }
    if hasOptionalGroup {
      size += WireFormat.computeGroupSize(16, value:optionalGroup)
    }
    if hasOptionalNestedMessage {
      size += WireFormat.computeMessageSize(18, value:optionalNestedMessage)
    }
    if hasOptionalForeignMessage {
      size += WireFormat.computeMessageSize(19, value:optionalForeignMessage)
    }
    if hasOptionalImportMessage {
      size += WireFormat.computeMessageSize(20, value:optionalImportMessage)
    }
    if (hasOptionalNestedEnum) {
      size += WireFormat.computeEnumSize(21, value:optionalNestedEnum.toRaw())
    }
    if (hasOptionalForeignEnum) {
      size += WireFormat.computeEnumSize(22, value:optionalForeignEnum.toRaw())
    }
    if (hasOptionalImportEnum) {
      size += WireFormat.computeEnumSize(23, value:optionalImportEnum.toRaw())
    }
    if hasOptionalStringPiece {
      size += WireFormat.computeStringSize(24, value:optionalStringPiece)
    }
    if hasOptionalCord {
      size += WireFormat.computeStringSize(25, value:optionalCord)
    }
    if hasOptionalPublicImportMessage {
      size += WireFormat.computeMessageSize(26, value:optionalPublicImportMessage)
    }
    if hasOptionalLazyMessage {
      size += WireFormat.computeMessageSize(27, value:optionalLazyMessage)
    }
      var dataSizeRepeatedInt32:Int32 = 0
      for element in repeatedInt32 {
          dataSizeRepeatedInt32 += WireFormat.computeInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedInt32
      size += 2 * Int32(repeatedInt32.count)
      var dataSizeRepeatedInt64:Int32 = 0
      for element in repeatedInt64 {
          dataSizeRepeatedInt64 += WireFormat.computeInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedInt64
      size += 2 * Int32(repeatedInt64.count)
      var dataSizeRepeatedUint32:Int32 = 0
      for element in repeatedUint32 {
          dataSizeRepeatedUint32 += WireFormat.computeUInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedUint32
      size += 2 * Int32(repeatedUint32.count)
      var dataSizeRepeatedUint64:Int32 = 0
      for element in repeatedUint64 {
          dataSizeRepeatedUint64 += WireFormat.computeUInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedUint64
      size += 2 * Int32(repeatedUint64.count)
      var dataSizeRepeatedSint32:Int32 = 0
      for element in repeatedSint32 {
          dataSizeRepeatedSint32 += WireFormat.computeSInt32SizeNoTag(element)
      }
      size += dataSizeRepeatedSint32
      size += 2 * Int32(repeatedSint32.count)
      var dataSizeRepeatedSint64:Int32 = 0
      for element in repeatedSint64 {
          dataSizeRepeatedSint64 += WireFormat.computeSInt64SizeNoTag(element)
      }
      size += dataSizeRepeatedSint64
      size += 2 * Int32(repeatedSint64.count)
      var dataSizeRepeatedFixed32:Int32 = 0
      dataSizeRepeatedFixed32 = 4 * Int32(repeatedFixed32.count)
      size += dataSizeRepeatedFixed32
      size += 2 * Int32(repeatedFixed32.count)
      var dataSizeRepeatedFixed64:Int32 = 0
      dataSizeRepeatedFixed64 = 8 * Int32(repeatedFixed64.count)
      size += dataSizeRepeatedFixed64
      size += 2 * Int32(repeatedFixed64.count)
      var dataSizeRepeatedSfixed32:Int32 = 0
      dataSizeRepeatedSfixed32 = 4 * Int32(repeatedSfixed32.count)
      size += dataSizeRepeatedSfixed32
      size += 2 * Int32(repeatedSfixed32.count)
      var dataSizeRepeatedSfixed64:Int32 = 0
      dataSizeRepeatedSfixed64 = 8 * Int32(repeatedSfixed64.count)
      size += dataSizeRepeatedSfixed64
      size += 2 * Int32(repeatedSfixed64.count)
      var dataSizeRepeatedFloat:Int32 = 0
      dataSizeRepeatedFloat = 4 * Int32(repeatedFloat.count)
      size += dataSizeRepeatedFloat
      size += 2 * Int32(repeatedFloat.count)
      var dataSizeRepeatedDouble:Int32 = 0
      dataSizeRepeatedDouble = 8 * Int32(repeatedDouble.count)
      size += dataSizeRepeatedDouble
      size += 2 * Int32(repeatedDouble.count)
      var dataSizeRepeatedBool:Int32 = 0
      dataSizeRepeatedBool = 1 * Int32(repeatedBool.count)
      size += dataSizeRepeatedBool
      size += 2 * Int32(repeatedBool.count)
      var dataSizeRepeatedString:Int32 = 0
      for element in repeatedString {
          dataSizeRepeatedString += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedString
      size += 2 * Int32(repeatedString.count)
      var dataSizeRepeatedBytes:Int32 = 0
      for element in repeatedBytes {
          dataSizeRepeatedBytes += WireFormat.computeDataSizeNoTag(element)
      }
      size += dataSizeRepeatedBytes
      size += 2 * Int32(repeatedBytes.count)
    for element in repeatedGroup {
        size += WireFormat.computeGroupSize(46, value:element)
    }
    for element in repeatedNestedMessage {
        size += WireFormat.computeMessageSize(48, value:element)
    }
    for element in repeatedForeignMessage {
        size += WireFormat.computeMessageSize(49, value:element)
    }
    for element in repeatedImportMessage {
        size += WireFormat.computeMessageSize(50, value:element)
    }
      var dataSizerepeatedNestedEnum:Int32 = 0
      for value in repeatedNestedEnum {
          dataSizerepeatedNestedEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedNestedEnum
      size += (2 * Int32(repeatedNestedEnum.count))
      var dataSizerepeatedForeignEnum:Int32 = 0
      for value in repeatedForeignEnum {
          dataSizerepeatedForeignEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedForeignEnum
      size += (2 * Int32(repeatedForeignEnum.count))
      var dataSizerepeatedImportEnum:Int32 = 0
      for value in repeatedImportEnum {
          dataSizerepeatedImportEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
      }
      size += dataSizerepeatedImportEnum
      size += (2 * Int32(repeatedImportEnum.count))
      var dataSizeRepeatedStringPiece:Int32 = 0
      for element in repeatedStringPiece {
          dataSizeRepeatedStringPiece += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedStringPiece
      size += 2 * Int32(repeatedStringPiece.count)
      var dataSizeRepeatedCord:Int32 = 0
      for element in repeatedCord {
          dataSizeRepeatedCord += WireFormat.computeStringSizeNoTag(element)
      }
      size += dataSizeRepeatedCord
      size += 2 * Int32(repeatedCord.count)
    for element in repeatedLazyMessage {
        size += WireFormat.computeMessageSize(57, value:element)
    }
    if hasDefaultInt32 {
      size += WireFormat.computeInt32Size(61, value:defaultInt32)
    }
    if hasDefaultInt64 {
      size += WireFormat.computeInt64Size(62, value:defaultInt64)
    }
    if hasDefaultUint32 {
      size += WireFormat.computeUInt32Size(63, value:defaultUint32)
    }
    if hasDefaultUint64 {
      size += WireFormat.computeUInt64Size(64, value:defaultUint64)
    }
    if hasDefaultSint32 {
      size += WireFormat.computeSInt32Size(65, value:defaultSint32)
    }
    if hasDefaultSint64 {
      size += WireFormat.computeSInt64Size(66, value:defaultSint64)
    }
    if hasDefaultFixed32 {
      size += WireFormat.computeFixed32Size(67, value:defaultFixed32)
    }
    if hasDefaultFixed64 {
      size += WireFormat.computeFixed64Size(68, value:defaultFixed64)
    }
    if hasDefaultSfixed32 {
      size += WireFormat.computeSFixed32Size(69, value:defaultSfixed32)
    }
    if hasDefaultSfixed64 {
      size += WireFormat.computeSFixed64Size(70, value:defaultSfixed64)
    }
    if hasDefaultFloat {
      size += WireFormat.computeFloatSize(71, value:defaultFloat)
    }
    if hasDefaultDouble {
      size += WireFormat.computeDoubleSize(72, value:defaultDouble)
    }
    if hasDefaultBool {
      size += WireFormat.computeBoolSize(73, value:defaultBool)
    }
    if hasDefaultString {
      size += WireFormat.computeStringSize(74, value:defaultString)
    }
    if hasDefaultBytes {
      size += WireFormat.computeDataSize(75, value:defaultBytes)
    }
    if (hasDefaultNestedEnum) {
      size += WireFormat.computeEnumSize(81, value:defaultNestedEnum.toRaw())
    }
    if (hasDefaultForeignEnum) {
      size += WireFormat.computeEnumSize(82, value:defaultForeignEnum.toRaw())
    }
    if (hasDefaultImportEnum) {
      size += WireFormat.computeEnumSize(83, value:defaultImportEnum.toRaw())
    }
    if hasDefaultStringPiece {
      size += WireFormat.computeStringSize(84, value:defaultStringPiece)
    }
    if hasDefaultCord {
      size += WireFormat.computeStringSize(85, value:defaultCord)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLite {
    return TestAllTypesLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestAllTypesLiteBuilder {
    return TestAllTypesLiteBuilder()
  }
  class func builderWithPrototype(prototype:TestAllTypesLite) -> TestAllTypesLiteBuilder {
    return TestAllTypesLite.builder().mergeFrom(prototype)
  }
  func builder() -> TestAllTypesLiteBuilder {
    return TestAllTypesLite.builder()
  }
  func toBuilder() -> TestAllTypesLiteBuilder {
    return TestAllTypesLite.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasOptionalInt32 {
      output += "\(indent) optionalInt32: \(optionalInt32) \n"
    }
    if hasOptionalInt64 {
      output += "\(indent) optionalInt64: \(optionalInt64) \n"
    }
    if hasOptionalUint32 {
      output += "\(indent) optionalUint32: \(optionalUint32) \n"
    }
    if hasOptionalUint64 {
      output += "\(indent) optionalUint64: \(optionalUint64) \n"
    }
    if hasOptionalSint32 {
      output += "\(indent) optionalSint32: \(optionalSint32) \n"
    }
    if hasOptionalSint64 {
      output += "\(indent) optionalSint64: \(optionalSint64) \n"
    }
    if hasOptionalFixed32 {
      output += "\(indent) optionalFixed32: \(optionalFixed32) \n"
    }
    if hasOptionalFixed64 {
      output += "\(indent) optionalFixed64: \(optionalFixed64) \n"
    }
    if hasOptionalSfixed32 {
      output += "\(indent) optionalSfixed32: \(optionalSfixed32) \n"
    }
    if hasOptionalSfixed64 {
      output += "\(indent) optionalSfixed64: \(optionalSfixed64) \n"
    }
    if hasOptionalFloat {
      output += "\(indent) optionalFloat: \(optionalFloat) \n"
    }
    if hasOptionalDouble {
      output += "\(indent) optionalDouble: \(optionalDouble) \n"
    }
    if hasOptionalBool {
      output += "\(indent) optionalBool: \(optionalBool) \n"
    }
    if hasOptionalString {
      output += "\(indent) optionalString: \(optionalString) \n"
    }
    if hasOptionalBytes {
      output += "\(indent) optionalBytes: \(optionalBytes) \n"
    }
    if hasOptionalGroup {
      output += "\(indent) optionalGroup {\n"
      optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalNestedMessage {
      output += "\(indent) optionalNestedMessage {\n"
      optionalNestedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalForeignMessage {
      output += "\(indent) optionalForeignMessage {\n"
      optionalForeignMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalImportMessage {
      output += "\(indent) optionalImportMessage {\n"
      optionalImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if (hasOptionalNestedEnum) {
      output += "\(indent) optionalNestedEnum: \(optionalNestedEnum.toRaw())\n"
    }
    if (hasOptionalForeignEnum) {
      output += "\(indent) optionalForeignEnum: \(optionalForeignEnum.toRaw())\n"
    }
    if (hasOptionalImportEnum) {
      output += "\(indent) optionalImportEnum: \(optionalImportEnum.toRaw())\n"
    }
    if hasOptionalStringPiece {
      output += "\(indent) optionalStringPiece: \(optionalStringPiece) \n"
    }
    if hasOptionalCord {
      output += "\(indent) optionalCord: \(optionalCord) \n"
    }
    if hasOptionalPublicImportMessage {
      output += "\(indent) optionalPublicImportMessage {\n"
      optionalPublicImportMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasOptionalLazyMessage {
      output += "\(indent) optionalLazyMessage {\n"
      optionalLazyMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    var repeatedInt32ElementIndex:Int = 0
    for element in repeatedInt32  {
        output += "\(indent) repeatedInt32[\(repeatedInt32ElementIndex)]: \(element)\n"
        repeatedInt32ElementIndex++
    }
    var repeatedInt64ElementIndex:Int = 0
    for element in repeatedInt64  {
        output += "\(indent) repeatedInt64[\(repeatedInt64ElementIndex)]: \(element)\n"
        repeatedInt64ElementIndex++
    }
    var repeatedUint32ElementIndex:Int = 0
    for element in repeatedUint32  {
        output += "\(indent) repeatedUint32[\(repeatedUint32ElementIndex)]: \(element)\n"
        repeatedUint32ElementIndex++
    }
    var repeatedUint64ElementIndex:Int = 0
    for element in repeatedUint64  {
        output += "\(indent) repeatedUint64[\(repeatedUint64ElementIndex)]: \(element)\n"
        repeatedUint64ElementIndex++
    }
    var repeatedSint32ElementIndex:Int = 0
    for element in repeatedSint32  {
        output += "\(indent) repeatedSint32[\(repeatedSint32ElementIndex)]: \(element)\n"
        repeatedSint32ElementIndex++
    }
    var repeatedSint64ElementIndex:Int = 0
    for element in repeatedSint64  {
        output += "\(indent) repeatedSint64[\(repeatedSint64ElementIndex)]: \(element)\n"
        repeatedSint64ElementIndex++
    }
    var repeatedFixed32ElementIndex:Int = 0
    for element in repeatedFixed32  {
        output += "\(indent) repeatedFixed32[\(repeatedFixed32ElementIndex)]: \(element)\n"
        repeatedFixed32ElementIndex++
    }
    var repeatedFixed64ElementIndex:Int = 0
    for element in repeatedFixed64  {
        output += "\(indent) repeatedFixed64[\(repeatedFixed64ElementIndex)]: \(element)\n"
        repeatedFixed64ElementIndex++
    }
    var repeatedSfixed32ElementIndex:Int = 0
    for element in repeatedSfixed32  {
        output += "\(indent) repeatedSfixed32[\(repeatedSfixed32ElementIndex)]: \(element)\n"
        repeatedSfixed32ElementIndex++
    }
    var repeatedSfixed64ElementIndex:Int = 0
    for element in repeatedSfixed64  {
        output += "\(indent) repeatedSfixed64[\(repeatedSfixed64ElementIndex)]: \(element)\n"
        repeatedSfixed64ElementIndex++
    }
    var repeatedFloatElementIndex:Int = 0
    for element in repeatedFloat  {
        output += "\(indent) repeatedFloat[\(repeatedFloatElementIndex)]: \(element)\n"
        repeatedFloatElementIndex++
    }
    var repeatedDoubleElementIndex:Int = 0
    for element in repeatedDouble  {
        output += "\(indent) repeatedDouble[\(repeatedDoubleElementIndex)]: \(element)\n"
        repeatedDoubleElementIndex++
    }
    var repeatedBoolElementIndex:Int = 0
    for element in repeatedBool  {
        output += "\(indent) repeatedBool[\(repeatedBoolElementIndex)]: \(element)\n"
        repeatedBoolElementIndex++
    }
    var repeatedStringElementIndex:Int = 0
    for element in repeatedString  {
        output += "\(indent) repeatedString[\(repeatedStringElementIndex)]: \(element)\n"
        repeatedStringElementIndex++
    }
    var repeatedBytesElementIndex:Int = 0
    for element in repeatedBytes  {
        output += "\(indent) repeatedBytes[\(repeatedBytesElementIndex)]: \(element)\n"
        repeatedBytesElementIndex++
    }
    var repeatedGroupElementIndex:Int = 0
    for element in repeatedGroup {
        output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedGroupElementIndex++
    }
    var repeatedNestedMessageElementIndex:Int = 0
    for element in repeatedNestedMessage {
        output += "\(indent) repeatedNestedMessage[\(repeatedNestedMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedNestedMessageElementIndex++
    }
    var repeatedForeignMessageElementIndex:Int = 0
    for element in repeatedForeignMessage {
        output += "\(indent) repeatedForeignMessage[\(repeatedForeignMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedForeignMessageElementIndex++
    }
    var repeatedImportMessageElementIndex:Int = 0
    for element in repeatedImportMessage {
        output += "\(indent) repeatedImportMessage[\(repeatedImportMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedImportMessageElementIndex++
    }
    var repeatedNestedEnumElementIndex:Int = 0
    for element in repeatedNestedEnum {
        output += "\(indent) repeatedNestedEnum[\(repeatedNestedEnumElementIndex)]: \(element.toRaw())"
        repeatedNestedEnumElementIndex++
    }
    var repeatedForeignEnumElementIndex:Int = 0
    for element in repeatedForeignEnum {
        output += "\(indent) repeatedForeignEnum[\(repeatedForeignEnumElementIndex)]: \(element.toRaw())"
        repeatedForeignEnumElementIndex++
    }
    var repeatedImportEnumElementIndex:Int = 0
    for element in repeatedImportEnum {
        output += "\(indent) repeatedImportEnum[\(repeatedImportEnumElementIndex)]: \(element.toRaw())"
        repeatedImportEnumElementIndex++
    }
    var repeatedStringPieceElementIndex:Int = 0
    for element in repeatedStringPiece  {
        output += "\(indent) repeatedStringPiece[\(repeatedStringPieceElementIndex)]: \(element)\n"
        repeatedStringPieceElementIndex++
    }
    var repeatedCordElementIndex:Int = 0
    for element in repeatedCord  {
        output += "\(indent) repeatedCord[\(repeatedCordElementIndex)]: \(element)\n"
        repeatedCordElementIndex++
    }
    var repeatedLazyMessageElementIndex:Int = 0
    for element in repeatedLazyMessage {
        output += "\(indent) repeatedLazyMessage[\(repeatedLazyMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedLazyMessageElementIndex++
    }
    if hasDefaultInt32 {
      output += "\(indent) defaultInt32: \(defaultInt32) \n"
    }
    if hasDefaultInt64 {
      output += "\(indent) defaultInt64: \(defaultInt64) \n"
    }
    if hasDefaultUint32 {
      output += "\(indent) defaultUint32: \(defaultUint32) \n"
    }
    if hasDefaultUint64 {
      output += "\(indent) defaultUint64: \(defaultUint64) \n"
    }
    if hasDefaultSint32 {
      output += "\(indent) defaultSint32: \(defaultSint32) \n"
    }
    if hasDefaultSint64 {
      output += "\(indent) defaultSint64: \(defaultSint64) \n"
    }
    if hasDefaultFixed32 {
      output += "\(indent) defaultFixed32: \(defaultFixed32) \n"
    }
    if hasDefaultFixed64 {
      output += "\(indent) defaultFixed64: \(defaultFixed64) \n"
    }
    if hasDefaultSfixed32 {
      output += "\(indent) defaultSfixed32: \(defaultSfixed32) \n"
    }
    if hasDefaultSfixed64 {
      output += "\(indent) defaultSfixed64: \(defaultSfixed64) \n"
    }
    if hasDefaultFloat {
      output += "\(indent) defaultFloat: \(defaultFloat) \n"
    }
    if hasDefaultDouble {
      output += "\(indent) defaultDouble: \(defaultDouble) \n"
    }
    if hasDefaultBool {
      output += "\(indent) defaultBool: \(defaultBool) \n"
    }
    if hasDefaultString {
      output += "\(indent) defaultString: \(defaultString) \n"
    }
    if hasDefaultBytes {
      output += "\(indent) defaultBytes: \(defaultBytes) \n"
    }
    if (hasDefaultNestedEnum) {
      output += "\(indent) defaultNestedEnum: \(defaultNestedEnum.toRaw())\n"
    }
    if (hasDefaultForeignEnum) {
      output += "\(indent) defaultForeignEnum: \(defaultForeignEnum.toRaw())\n"
    }
    if (hasDefaultImportEnum) {
      output += "\(indent) defaultImportEnum: \(defaultImportEnum.toRaw())\n"
    }
    if hasDefaultStringPiece {
      output += "\(indent) defaultStringPiece: \(defaultStringPiece) \n"
    }
    if hasDefaultCord {
      output += "\(indent) defaultCord: \(defaultCord) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasOptionalInt32 {
           hashCode = (hashCode &* 31) &+ optionalInt32.hashValue
        }
        if hasOptionalInt64 {
           hashCode = (hashCode &* 31) &+ optionalInt64.hashValue
        }
        if hasOptionalUint32 {
           hashCode = (hashCode &* 31) &+ optionalUint32.hashValue
        }
        if hasOptionalUint64 {
           hashCode = (hashCode &* 31) &+ optionalUint64.hashValue
        }
        if hasOptionalSint32 {
           hashCode = (hashCode &* 31) &+ optionalSint32.hashValue
        }
        if hasOptionalSint64 {
           hashCode = (hashCode &* 31) &+ optionalSint64.hashValue
        }
        if hasOptionalFixed32 {
           hashCode = (hashCode &* 31) &+ optionalFixed32.hashValue
        }
        if hasOptionalFixed64 {
           hashCode = (hashCode &* 31) &+ optionalFixed64.hashValue
        }
        if hasOptionalSfixed32 {
           hashCode = (hashCode &* 31) &+ optionalSfixed32.hashValue
        }
        if hasOptionalSfixed64 {
           hashCode = (hashCode &* 31) &+ optionalSfixed64.hashValue
        }
        if hasOptionalFloat {
           hashCode = (hashCode &* 31) &+ optionalFloat.hashValue
        }
        if hasOptionalDouble {
           hashCode = (hashCode &* 31) &+ optionalDouble.hashValue
        }
        if hasOptionalBool {
           hashCode = (hashCode &* 31) &+ optionalBool.hashValue
        }
        if hasOptionalString {
           hashCode = (hashCode &* 31) &+ optionalString.hashValue
        }
        if hasOptionalBytes {
           hashCode = (hashCode &* 31) &+ optionalBytes.hashValue
        }
        if hasOptionalGroup {
          hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
        }
        if hasOptionalNestedMessage {
          hashCode = (hashCode &* 31) &+ optionalNestedMessage.hashValue
        }
        if hasOptionalForeignMessage {
          hashCode = (hashCode &* 31) &+ optionalForeignMessage.hashValue
        }
        if hasOptionalImportMessage {
          hashCode = (hashCode &* 31) &+ optionalImportMessage.hashValue
        }
        if hasOptionalNestedEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalNestedEnum.toRaw())
        }
        if hasOptionalForeignEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalForeignEnum.toRaw())
        }
        if hasOptionalImportEnum {
           hashCode = (hashCode &* 31) &+ Int(optionalImportEnum.toRaw())
        }
        if hasOptionalStringPiece {
           hashCode = (hashCode &* 31) &+ optionalStringPiece.hashValue
        }
        if hasOptionalCord {
           hashCode = (hashCode &* 31) &+ optionalCord.hashValue
        }
        if hasOptionalPublicImportMessage {
          hashCode = (hashCode &* 31) &+ optionalPublicImportMessage.hashValue
        }
        if hasOptionalLazyMessage {
          hashCode = (hashCode &* 31) &+ optionalLazyMessage.hashValue
        }
        for element in repeatedInt32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedInt64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedUint32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedUint64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSint32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSint64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFixed32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFixed64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSfixed32 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedSfixed64 {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedFloat {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedDouble {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedBool {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedString {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedBytes {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedGroup {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedNestedMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedForeignMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedImportMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedNestedEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedForeignEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedImportEnum {
            hashCode = (hashCode &* 31) &+ Int(element.toRaw())
        }
        for element in repeatedStringPiece {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedCord {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        for element in repeatedLazyMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        if hasDefaultInt32 {
           hashCode = (hashCode &* 31) &+ defaultInt32.hashValue
        }
        if hasDefaultInt64 {
           hashCode = (hashCode &* 31) &+ defaultInt64.hashValue
        }
        if hasDefaultUint32 {
           hashCode = (hashCode &* 31) &+ defaultUint32.hashValue
        }
        if hasDefaultUint64 {
           hashCode = (hashCode &* 31) &+ defaultUint64.hashValue
        }
        if hasDefaultSint32 {
           hashCode = (hashCode &* 31) &+ defaultSint32.hashValue
        }
        if hasDefaultSint64 {
           hashCode = (hashCode &* 31) &+ defaultSint64.hashValue
        }
        if hasDefaultFixed32 {
           hashCode = (hashCode &* 31) &+ defaultFixed32.hashValue
        }
        if hasDefaultFixed64 {
           hashCode = (hashCode &* 31) &+ defaultFixed64.hashValue
        }
        if hasDefaultSfixed32 {
           hashCode = (hashCode &* 31) &+ defaultSfixed32.hashValue
        }
        if hasDefaultSfixed64 {
           hashCode = (hashCode &* 31) &+ defaultSfixed64.hashValue
        }
        if hasDefaultFloat {
           hashCode = (hashCode &* 31) &+ defaultFloat.hashValue
        }
        if hasDefaultDouble {
           hashCode = (hashCode &* 31) &+ defaultDouble.hashValue
        }
        if hasDefaultBool {
           hashCode = (hashCode &* 31) &+ defaultBool.hashValue
        }
        if hasDefaultString {
           hashCode = (hashCode &* 31) &+ defaultString.hashValue
        }
        if hasDefaultBytes {
           hashCode = (hashCode &* 31) &+ defaultBytes.hashValue
        }
        if hasDefaultNestedEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultNestedEnum.toRaw())
        }
        if hasDefaultForeignEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultForeignEnum.toRaw())
        }
        if hasDefaultImportEnum {
           hashCode = (hashCode &* 31) &+ Int(defaultImportEnum.toRaw())
        }
        if hasDefaultStringPiece {
           hashCode = (hashCode &* 31) &+ defaultStringPiece.hashValue
        }
        if hasDefaultCord {
           hashCode = (hashCode &* 31) &+ defaultCord.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  enum TestAllTypesLiteNestedEnum:Int32 {
    case TestAllTypesLiteNestedEnumFoo = 1
    case TestAllTypesLiteNestedEnumBar = 2
    case TestAllTypesLiteNestedEnumBaz = 3

    static func TestAllTypesLiteNestedEnumIsValidValue(value:TestAllTypesLiteNestedEnum) ->Bool {
      switch value {
        case .TestAllTypesLiteNestedEnumFoo, .TestAllTypesLiteNestedEnumBar, .TestAllTypesLiteNestedEnumBaz:
          return true;
        default:
          return false;
      }
    }
  }

  func == (lhs: TestAllTypesLiteNestedMessage, rhs: TestAllTypesLiteNestedMessage) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasBb == rhs.hasBb) && (!lhs.hasBb || lhs.bb == rhs.bb)
         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class TestAllTypesLiteNestedMessage : GeneratedMessage {
    private(set) var hasBb:Bool = false
    private(set) var bb:Int32 = 0

    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasBb {
        output.writeInt32(1, value:bb)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      if hasBb {
        size += WireFormat.computeInt32Size(1, value:bb)
      }
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteNestedMessage {
      return TestAllTypesLiteNestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> TestAllTypesLiteNestedMessageBuilder {
      return TestAllTypesLiteNestedMessageBuilder()
    }
    class func builderWithPrototype(prototype:TestAllTypesLiteNestedMessage) -> TestAllTypesLiteNestedMessageBuilder {
      return TestAllTypesLiteNestedMessage.builder().mergeFrom(prototype)
    }
    func builder() -> TestAllTypesLiteNestedMessageBuilder {
      return TestAllTypesLiteNestedMessage.builder()
    }
    func toBuilder() -> TestAllTypesLiteNestedMessageBuilder {
      return TestAllTypesLiteNestedMessage.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      if hasBb {
        output += "\(indent) bb: \(bb) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          if hasBb {
             hashCode = (hashCode &* 31) &+ bb.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class TestAllTypesLiteNestedMessageBuilder : GeneratedMessageBuilder {
    private var result:TestAllTypesLiteNestedMessage

    override init () {
       result = TestAllTypesLiteNestedMessage()
    }
    var hasBb:Bool {
         get {
              return result.hasBb
         }
    }
    var bb:Int32 {
         get {
              return result.bb
         }
         set (value) {
             result.hasBb = true
             result.bb = value
         }
    }
    func clearBb() -> TestAllTypesLiteNestedMessageBuilder{
         result.hasBb = false
         result.bb = 0
         return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> TestAllTypesLiteNestedMessageBuilder {
      result = TestAllTypesLiteNestedMessage()
      return self
    }
    override func clone() -> TestAllTypesLiteNestedMessageBuilder {
      return TestAllTypesLiteNestedMessage.builderWithPrototype(result)
    }
    func build() -> TestAllTypesLiteNestedMessage {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> TestAllTypesLiteNestedMessage {
      var returnMe:TestAllTypesLiteNestedMessage = result
      return returnMe
    }
    func mergeFrom(other:TestAllTypesLiteNestedMessage) -> TestAllTypesLiteNestedMessageBuilder {
      if (other == TestAllTypesLiteNestedMessage()) {
        return self
      }
      if other.hasBb {
           bb = other.bb
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesLiteNestedMessageBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteNestedMessageBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 8 {
            bb = input.readInt32()
          }
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    func == (lhs: TestAllTypesLiteOptionalGroup, rhs: TestAllTypesLiteOptionalGroup) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    }
    class TestAllTypesLiteOptionalGroup : GeneratedMessage {
      private(set) var hasA:Bool = false
      private(set) var a:Int32 = 0

      override init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasA {
          output.writeInt32(17, value:a)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
          return size
        }

        size = 0
        if hasA {
          size += WireFormat.computeInt32Size(17, value:a)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteOptionalGroup {
        return TestAllTypesLiteOptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> TestAllTypesLiteOptionalGroupBuilder {
        return TestAllTypesLiteOptionalGroupBuilder()
      }
      class func builderWithPrototype(prototype:TestAllTypesLiteOptionalGroup) -> TestAllTypesLiteOptionalGroupBuilder {
        return TestAllTypesLiteOptionalGroup.builder().mergeFrom(prototype)
      }
      func builder() -> TestAllTypesLiteOptionalGroupBuilder {
        return TestAllTypesLiteOptionalGroup.builder()
      }
      func toBuilder() -> TestAllTypesLiteOptionalGroupBuilder {
        return TestAllTypesLiteOptionalGroup.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        if hasA {
          output += "\(indent) a: \(a) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
       get {
            var hashCode:Int = 7
            if hasA {
               hashCode = (hashCode &* 31) &+ a.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
          }
        }
      }

      class TestAllTypesLiteOptionalGroupBuilder : GeneratedMessageBuilder {
      private var result:TestAllTypesLiteOptionalGroup

      override init () {
         result = TestAllTypesLiteOptionalGroup()
      }
      var hasA:Bool {
           get {
                return result.hasA
           }
      }
      var a:Int32 {
           get {
                return result.a
           }
           set (value) {
               result.hasA = true
               result.a = value
           }
      }
      func clearA() -> TestAllTypesLiteOptionalGroupBuilder{
           result.hasA = false
           result.a = 0
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return result
           }
      }
      override func clear() -> TestAllTypesLiteOptionalGroupBuilder {
        result = TestAllTypesLiteOptionalGroup()
        return self
      }
      override func clone() -> TestAllTypesLiteOptionalGroupBuilder {
        return TestAllTypesLiteOptionalGroup.builderWithPrototype(result)
      }
      func build() -> TestAllTypesLiteOptionalGroup {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> TestAllTypesLiteOptionalGroup {
        var returnMe:TestAllTypesLiteOptionalGroup = result
        return returnMe
      }
      func mergeFrom(other:TestAllTypesLiteOptionalGroup) -> TestAllTypesLiteOptionalGroupBuilder {
        if (other == TestAllTypesLiteOptionalGroup()) {
          return self
        }
        if other.hasA {
             a = other.a
        }
          mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesLiteOptionalGroupBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteOptionalGroupBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag:Int32 = input.readTag()
            if tag == 0 {
                 self.unknownFields = unknownFieldsBuilder.build()
                 return self}
            else if tag == 136 {
              a = input.readInt32()
            }
            else {
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                      unknownFields = unknownFieldsBuilder.build()
                      return self
                  }
            }
            }
         }
      }

      func == (lhs: TestAllTypesLiteRepeatedGroup, rhs: TestAllTypesLiteRepeatedGroup) -> Bool {
            if (lhs === rhs) {
              return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      }
      class TestAllTypesLiteRepeatedGroup : GeneratedMessage {
        private(set) var hasA:Bool = false
        private(set) var a:Int32 = 0

        override init() {
             super.init()
        }
        override func isInitialized() -> Bool {
          return true
        }
        override func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasA {
            output.writeInt32(47, value:a)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override func serializedSize() -> Int32 {
          var size:Int32 = memoizedSerializedSize
          if size != -1 {
            return size
          }

          size = 0
          if hasA {
            size += WireFormat.computeInt32Size(47, value:a)
          }
          size += unknownFields.serializedSize()
          memoizedSerializedSize = size
          return size
        }
        class func parseFromData(data:[Byte]) -> TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromData(data).build()
        }
        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromInputStream(input:NSInputStream) -> TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromInputStream(input).build()
        }
        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromCodedInputStream(input).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteRepeatedGroup {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func builder() -> TestAllTypesLiteRepeatedGroupBuilder {
          return TestAllTypesLiteRepeatedGroupBuilder()
        }
        class func builderWithPrototype(prototype:TestAllTypesLiteRepeatedGroup) -> TestAllTypesLiteRepeatedGroupBuilder {
          return TestAllTypesLiteRepeatedGroup.builder().mergeFrom(prototype)
        }
        func builder() -> TestAllTypesLiteRepeatedGroupBuilder {
          return TestAllTypesLiteRepeatedGroup.builder()
        }
        func toBuilder() -> TestAllTypesLiteRepeatedGroupBuilder {
          return TestAllTypesLiteRepeatedGroup.builderWithPrototype(self)
        }
        override func writeDescriptionTo(inout output:String, indent:String) {
          if hasA {
            output += "\(indent) a: \(a) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override var hashValue:Int {
         get {
              var hashCode:Int = 7
              if hasA {
                 hashCode = (hashCode &* 31) &+ a.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
            }
          }
        }

        class TestAllTypesLiteRepeatedGroupBuilder : GeneratedMessageBuilder {
        private var result:TestAllTypesLiteRepeatedGroup

        override init () {
           result = TestAllTypesLiteRepeatedGroup()
        }
        var hasA:Bool {
             get {
                  return result.hasA
             }
        }
        var a:Int32 {
             get {
                  return result.a
             }
             set (value) {
                 result.hasA = true
                 result.a = value
             }
        }
        func clearA() -> TestAllTypesLiteRepeatedGroupBuilder{
             result.hasA = false
             result.a = 0
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> TestAllTypesLiteRepeatedGroupBuilder {
          result = TestAllTypesLiteRepeatedGroup()
          return self
        }
        override func clone() -> TestAllTypesLiteRepeatedGroupBuilder {
          return TestAllTypesLiteRepeatedGroup.builderWithPrototype(result)
        }
        func build() -> TestAllTypesLiteRepeatedGroup {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> TestAllTypesLiteRepeatedGroup {
          var returnMe:TestAllTypesLiteRepeatedGroup = result
          return returnMe
        }
        func mergeFrom(other:TestAllTypesLiteRepeatedGroup) -> TestAllTypesLiteRepeatedGroupBuilder {
          if (other == TestAllTypesLiteRepeatedGroup()) {
            return self
          }
          if other.hasA {
               a = other.a
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesLiteRepeatedGroupBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteRepeatedGroupBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 376 {
                a = input.readInt32()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        class TestAllTypesLiteBuilder : GeneratedMessageBuilder {
        private var result:TestAllTypesLite

        override init () {
           result = TestAllTypesLite()
        }
        var hasOptionalInt32:Bool {
             get {
                  return result.hasOptionalInt32
             }
        }
        var optionalInt32:Int32 {
             get {
                  return result.optionalInt32
             }
             set (value) {
                 result.hasOptionalInt32 = true
                 result.optionalInt32 = value
             }
        }
        func clearOptionalInt32() -> TestAllTypesLiteBuilder{
             result.hasOptionalInt32 = false
             result.optionalInt32 = 0
             return self
        }
        var hasOptionalInt64:Bool {
             get {
                  return result.hasOptionalInt64
             }
        }
        var optionalInt64:Int64 {
             get {
                  return result.optionalInt64
             }
             set (value) {
                 result.hasOptionalInt64 = true
                 result.optionalInt64 = value
             }
        }
        func clearOptionalInt64() -> TestAllTypesLiteBuilder{
             result.hasOptionalInt64 = false
             result.optionalInt64 = 0
             return self
        }
        var hasOptionalUint32:Bool {
             get {
                  return result.hasOptionalUint32
             }
        }
        var optionalUint32:UInt32 {
             get {
                  return result.optionalUint32
             }
             set (value) {
                 result.hasOptionalUint32 = true
                 result.optionalUint32 = value
             }
        }
        func clearOptionalUint32() -> TestAllTypesLiteBuilder{
             result.hasOptionalUint32 = false
             result.optionalUint32 = 0
             return self
        }
        var hasOptionalUint64:Bool {
             get {
                  return result.hasOptionalUint64
             }
        }
        var optionalUint64:UInt64 {
             get {
                  return result.optionalUint64
             }
             set (value) {
                 result.hasOptionalUint64 = true
                 result.optionalUint64 = value
             }
        }
        func clearOptionalUint64() -> TestAllTypesLiteBuilder{
             result.hasOptionalUint64 = false
             result.optionalUint64 = 0
             return self
        }
        var hasOptionalSint32:Bool {
             get {
                  return result.hasOptionalSint32
             }
        }
        var optionalSint32:Int32 {
             get {
                  return result.optionalSint32
             }
             set (value) {
                 result.hasOptionalSint32 = true
                 result.optionalSint32 = value
             }
        }
        func clearOptionalSint32() -> TestAllTypesLiteBuilder{
             result.hasOptionalSint32 = false
             result.optionalSint32 = 0
             return self
        }
        var hasOptionalSint64:Bool {
             get {
                  return result.hasOptionalSint64
             }
        }
        var optionalSint64:Int64 {
             get {
                  return result.optionalSint64
             }
             set (value) {
                 result.hasOptionalSint64 = true
                 result.optionalSint64 = value
             }
        }
        func clearOptionalSint64() -> TestAllTypesLiteBuilder{
             result.hasOptionalSint64 = false
             result.optionalSint64 = 0
             return self
        }
        var hasOptionalFixed32:Bool {
             get {
                  return result.hasOptionalFixed32
             }
        }
        var optionalFixed32:UInt32 {
             get {
                  return result.optionalFixed32
             }
             set (value) {
                 result.hasOptionalFixed32 = true
                 result.optionalFixed32 = value
             }
        }
        func clearOptionalFixed32() -> TestAllTypesLiteBuilder{
             result.hasOptionalFixed32 = false
             result.optionalFixed32 = 0
             return self
        }
        var hasOptionalFixed64:Bool {
             get {
                  return result.hasOptionalFixed64
             }
        }
        var optionalFixed64:UInt64 {
             get {
                  return result.optionalFixed64
             }
             set (value) {
                 result.hasOptionalFixed64 = true
                 result.optionalFixed64 = value
             }
        }
        func clearOptionalFixed64() -> TestAllTypesLiteBuilder{
             result.hasOptionalFixed64 = false
             result.optionalFixed64 = 0
             return self
        }
        var hasOptionalSfixed32:Bool {
             get {
                  return result.hasOptionalSfixed32
             }
        }
        var optionalSfixed32:Int32 {
             get {
                  return result.optionalSfixed32
             }
             set (value) {
                 result.hasOptionalSfixed32 = true
                 result.optionalSfixed32 = value
             }
        }
        func clearOptionalSfixed32() -> TestAllTypesLiteBuilder{
             result.hasOptionalSfixed32 = false
             result.optionalSfixed32 = 0
             return self
        }
        var hasOptionalSfixed64:Bool {
             get {
                  return result.hasOptionalSfixed64
             }
        }
        var optionalSfixed64:Int64 {
             get {
                  return result.optionalSfixed64
             }
             set (value) {
                 result.hasOptionalSfixed64 = true
                 result.optionalSfixed64 = value
             }
        }
        func clearOptionalSfixed64() -> TestAllTypesLiteBuilder{
             result.hasOptionalSfixed64 = false
             result.optionalSfixed64 = 0
             return self
        }
        var hasOptionalFloat:Bool {
             get {
                  return result.hasOptionalFloat
             }
        }
        var optionalFloat:Float {
             get {
                  return result.optionalFloat
             }
             set (value) {
                 result.hasOptionalFloat = true
                 result.optionalFloat = value
             }
        }
        func clearOptionalFloat() -> TestAllTypesLiteBuilder{
             result.hasOptionalFloat = false
             result.optionalFloat = 0
             return self
        }
        var hasOptionalDouble:Bool {
             get {
                  return result.hasOptionalDouble
             }
        }
        var optionalDouble:Double {
             get {
                  return result.optionalDouble
             }
             set (value) {
                 result.hasOptionalDouble = true
                 result.optionalDouble = value
             }
        }
        func clearOptionalDouble() -> TestAllTypesLiteBuilder{
             result.hasOptionalDouble = false
             result.optionalDouble = 0
             return self
        }
        var hasOptionalBool:Bool {
             get {
                  return result.hasOptionalBool
             }
        }
        var optionalBool:Bool {
             get {
                  return result.optionalBool
             }
             set (value) {
                 result.hasOptionalBool = true
                 result.optionalBool = value
             }
        }
        func clearOptionalBool() -> TestAllTypesLiteBuilder{
             result.hasOptionalBool = false
             result.optionalBool = false
             return self
        }
        var hasOptionalString:Bool {
             get {
                  return result.hasOptionalString
             }
        }
        var optionalString:String {
             get {
                  return result.optionalString
             }
             set (value) {
                 result.hasOptionalString = true
                 result.optionalString = value
             }
        }
        func clearOptionalString() -> TestAllTypesLiteBuilder{
             result.hasOptionalString = false
             result.optionalString = ""
             return self
        }
        var hasOptionalBytes:Bool {
             get {
                  return result.hasOptionalBytes
             }
        }
        var optionalBytes:[Byte] {
             get {
                  return result.optionalBytes
             }
             set (value) {
                 result.hasOptionalBytes = true
                 result.optionalBytes = value
             }
        }
        func clearOptionalBytes() -> TestAllTypesLiteBuilder{
             result.hasOptionalBytes = false
             result.optionalBytes = [Byte]()
             return self
        }
        var hasOptionalGroup:Bool {
             get {
                 return result.hasOptionalGroup
             }
        }
        var optionalGroup:TestAllTypesLiteOptionalGroup {
             get {
                 return result.optionalGroup     }
             set (value) {
                 result.hasOptionalGroup = true
                 result.optionalGroup = value
             }
        }
        func setOptionalGroupBuilder(builderForValue:TestAllTypesLiteOptionalGroupBuilder) -> TestAllTypesLiteBuilder {
          optionalGroup = builderForValue.build()
          return self
        }
        func mergeOptionalGroup(value:TestAllTypesLiteOptionalGroup) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalGroup && result.optionalGroup != TestAllTypesLiteOptionalGroup()) {
            result.optionalGroup = TestAllTypesLiteOptionalGroup.builderWithPrototype(result.optionalGroup).mergeFrom(value).buildPartial()
          } else {
            result.optionalGroup = value
          }
          result.hasOptionalGroup = true
          return self
        }
        func clearOptionalGroup() -> TestAllTypesLiteBuilder {
          result.hasOptionalGroup = false
          result.optionalGroup = TestAllTypesLiteOptionalGroup()
          return self
        }
        var hasOptionalNestedMessage:Bool {
             get {
                 return result.hasOptionalNestedMessage
             }
        }
        var optionalNestedMessage:TestAllTypesLiteNestedMessage {
             get {
                 return result.optionalNestedMessage     }
             set (value) {
                 result.hasOptionalNestedMessage = true
                 result.optionalNestedMessage = value
             }
        }
        func setOptionalNestedMessageBuilder(builderForValue:TestAllTypesLiteNestedMessageBuilder) -> TestAllTypesLiteBuilder {
          optionalNestedMessage = builderForValue.build()
          return self
        }
        func mergeOptionalNestedMessage(value:TestAllTypesLiteNestedMessage) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalNestedMessage && result.optionalNestedMessage != TestAllTypesLiteNestedMessage()) {
            result.optionalNestedMessage = TestAllTypesLiteNestedMessage.builderWithPrototype(result.optionalNestedMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalNestedMessage = value
          }
          result.hasOptionalNestedMessage = true
          return self
        }
        func clearOptionalNestedMessage() -> TestAllTypesLiteBuilder {
          result.hasOptionalNestedMessage = false
          result.optionalNestedMessage = TestAllTypesLiteNestedMessage()
          return self
        }
        var hasOptionalForeignMessage:Bool {
             get {
                 return result.hasOptionalForeignMessage
             }
        }
        var optionalForeignMessage:ForeignMessageLite {
             get {
                 return result.optionalForeignMessage     }
             set (value) {
                 result.hasOptionalForeignMessage = true
                 result.optionalForeignMessage = value
             }
        }
        func setOptionalForeignMessageBuilder(builderForValue:ForeignMessageLiteBuilder) -> TestAllTypesLiteBuilder {
          optionalForeignMessage = builderForValue.build()
          return self
        }
        func mergeOptionalForeignMessage(value:ForeignMessageLite) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalForeignMessage && result.optionalForeignMessage != ForeignMessageLite()) {
            result.optionalForeignMessage = ForeignMessageLite.builderWithPrototype(result.optionalForeignMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalForeignMessage = value
          }
          result.hasOptionalForeignMessage = true
          return self
        }
        func clearOptionalForeignMessage() -> TestAllTypesLiteBuilder {
          result.hasOptionalForeignMessage = false
          result.optionalForeignMessage = ForeignMessageLite()
          return self
        }
        var hasOptionalImportMessage:Bool {
             get {
                 return result.hasOptionalImportMessage
             }
        }
        var optionalImportMessage:ImportMessageLite {
             get {
                 return result.optionalImportMessage     }
             set (value) {
                 result.hasOptionalImportMessage = true
                 result.optionalImportMessage = value
             }
        }
        func setOptionalImportMessageBuilder(builderForValue:ImportMessageLiteBuilder) -> TestAllTypesLiteBuilder {
          optionalImportMessage = builderForValue.build()
          return self
        }
        func mergeOptionalImportMessage(value:ImportMessageLite) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalImportMessage && result.optionalImportMessage != ImportMessageLite()) {
            result.optionalImportMessage = ImportMessageLite.builderWithPrototype(result.optionalImportMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalImportMessage = value
          }
          result.hasOptionalImportMessage = true
          return self
        }
        func clearOptionalImportMessage() -> TestAllTypesLiteBuilder {
          result.hasOptionalImportMessage = false
          result.optionalImportMessage = ImportMessageLite()
          return self
        }
          var hasOptionalNestedEnum:Bool{
              get {
                  return result.hasOptionalNestedEnum
              }
          }
          var optionalNestedEnum:TestAllTypesLiteNestedEnum {
              get {
                  return result.optionalNestedEnum
              }
              set (value) {
                  result.hasOptionalNestedEnum = true
                  result.optionalNestedEnum = value
              }
          }
          func clearOptionalNestedEnum() -> TestAllTypesLiteBuilder {
             result.hasOptionalNestedEnum = false
             result.optionalNestedEnum = .TestAllTypesLiteNestedEnumFoo
             return self
          }
          var hasOptionalForeignEnum:Bool{
              get {
                  return result.hasOptionalForeignEnum
              }
          }
          var optionalForeignEnum:ForeignEnumLite {
              get {
                  return result.optionalForeignEnum
              }
              set (value) {
                  result.hasOptionalForeignEnum = true
                  result.optionalForeignEnum = value
              }
          }
          func clearOptionalForeignEnum() -> TestAllTypesLiteBuilder {
             result.hasOptionalForeignEnum = false
             result.optionalForeignEnum = .ForeignEnumLiteForeignLiteFoo
             return self
          }
          var hasOptionalImportEnum:Bool{
              get {
                  return result.hasOptionalImportEnum
              }
          }
          var optionalImportEnum:ImportEnumLite {
              get {
                  return result.optionalImportEnum
              }
              set (value) {
                  result.hasOptionalImportEnum = true
                  result.optionalImportEnum = value
              }
          }
          func clearOptionalImportEnum() -> TestAllTypesLiteBuilder {
             result.hasOptionalImportEnum = false
             result.optionalImportEnum = .ImportEnumLiteImportLiteFoo
             return self
          }
        var hasOptionalStringPiece:Bool {
             get {
                  return result.hasOptionalStringPiece
             }
        }
        var optionalStringPiece:String {
             get {
                  return result.optionalStringPiece
             }
             set (value) {
                 result.hasOptionalStringPiece = true
                 result.optionalStringPiece = value
             }
        }
        func clearOptionalStringPiece() -> TestAllTypesLiteBuilder{
             result.hasOptionalStringPiece = false
             result.optionalStringPiece = ""
             return self
        }
        var hasOptionalCord:Bool {
             get {
                  return result.hasOptionalCord
             }
        }
        var optionalCord:String {
             get {
                  return result.optionalCord
             }
             set (value) {
                 result.hasOptionalCord = true
                 result.optionalCord = value
             }
        }
        func clearOptionalCord() -> TestAllTypesLiteBuilder{
             result.hasOptionalCord = false
             result.optionalCord = ""
             return self
        }
        var hasOptionalPublicImportMessage:Bool {
             get {
                 return result.hasOptionalPublicImportMessage
             }
        }
        var optionalPublicImportMessage:PublicImportMessageLite {
             get {
                 return result.optionalPublicImportMessage     }
             set (value) {
                 result.hasOptionalPublicImportMessage = true
                 result.optionalPublicImportMessage = value
             }
        }
        func setOptionalPublicImportMessageBuilder(builderForValue:PublicImportMessageLiteBuilder) -> TestAllTypesLiteBuilder {
          optionalPublicImportMessage = builderForValue.build()
          return self
        }
        func mergeOptionalPublicImportMessage(value:PublicImportMessageLite) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalPublicImportMessage && result.optionalPublicImportMessage != PublicImportMessageLite()) {
            result.optionalPublicImportMessage = PublicImportMessageLite.builderWithPrototype(result.optionalPublicImportMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalPublicImportMessage = value
          }
          result.hasOptionalPublicImportMessage = true
          return self
        }
        func clearOptionalPublicImportMessage() -> TestAllTypesLiteBuilder {
          result.hasOptionalPublicImportMessage = false
          result.optionalPublicImportMessage = PublicImportMessageLite()
          return self
        }
        var hasOptionalLazyMessage:Bool {
             get {
                 return result.hasOptionalLazyMessage
             }
        }
        var optionalLazyMessage:TestAllTypesLiteNestedMessage {
             get {
                 return result.optionalLazyMessage     }
             set (value) {
                 result.hasOptionalLazyMessage = true
                 result.optionalLazyMessage = value
             }
        }
        func setOptionalLazyMessageBuilder(builderForValue:TestAllTypesLiteNestedMessageBuilder) -> TestAllTypesLiteBuilder {
          optionalLazyMessage = builderForValue.build()
          return self
        }
        func mergeOptionalLazyMessage(value:TestAllTypesLiteNestedMessage) -> TestAllTypesLiteBuilder {
          if (result.hasOptionalLazyMessage && result.optionalLazyMessage != TestAllTypesLiteNestedMessage()) {
            result.optionalLazyMessage = TestAllTypesLiteNestedMessage.builderWithPrototype(result.optionalLazyMessage).mergeFrom(value).buildPartial()
          } else {
            result.optionalLazyMessage = value
          }
          result.hasOptionalLazyMessage = true
          return self
        }
        func clearOptionalLazyMessage() -> TestAllTypesLiteBuilder {
          result.hasOptionalLazyMessage = false
          result.optionalLazyMessage = TestAllTypesLiteNestedMessage()
          return self
        }
        var repeatedInt32:[Int32] {
             get {
                 return result.repeatedInt32
             }
             set (array) {
                 result.repeatedInt32 = array
             }
        }
        func clearRepeatedInt32() -> TestAllTypesLiteBuilder {
           result.repeatedInt32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedInt64:[Int64] {
             get {
                 return result.repeatedInt64
             }
             set (array) {
                 result.repeatedInt64 = array
             }
        }
        func clearRepeatedInt64() -> TestAllTypesLiteBuilder {
           result.repeatedInt64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedUint32:[UInt32] {
             get {
                 return result.repeatedUint32
             }
             set (array) {
                 result.repeatedUint32 = array
             }
        }
        func clearRepeatedUint32() -> TestAllTypesLiteBuilder {
           result.repeatedUint32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedUint64:[UInt64] {
             get {
                 return result.repeatedUint64
             }
             set (array) {
                 result.repeatedUint64 = array
             }
        }
        func clearRepeatedUint64() -> TestAllTypesLiteBuilder {
           result.repeatedUint64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSint32:[Int32] {
             get {
                 return result.repeatedSint32
             }
             set (array) {
                 result.repeatedSint32 = array
             }
        }
        func clearRepeatedSint32() -> TestAllTypesLiteBuilder {
           result.repeatedSint32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSint64:[Int64] {
             get {
                 return result.repeatedSint64
             }
             set (array) {
                 result.repeatedSint64 = array
             }
        }
        func clearRepeatedSint64() -> TestAllTypesLiteBuilder {
           result.repeatedSint64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFixed32:[UInt32] {
             get {
                 return result.repeatedFixed32
             }
             set (array) {
                 result.repeatedFixed32 = array
             }
        }
        func clearRepeatedFixed32() -> TestAllTypesLiteBuilder {
           result.repeatedFixed32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFixed64:[UInt64] {
             get {
                 return result.repeatedFixed64
             }
             set (array) {
                 result.repeatedFixed64 = array
             }
        }
        func clearRepeatedFixed64() -> TestAllTypesLiteBuilder {
           result.repeatedFixed64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSfixed32:[Int32] {
             get {
                 return result.repeatedSfixed32
             }
             set (array) {
                 result.repeatedSfixed32 = array
             }
        }
        func clearRepeatedSfixed32() -> TestAllTypesLiteBuilder {
           result.repeatedSfixed32.removeAll(keepCapacity: false)
           return self
        }
        var repeatedSfixed64:[Int64] {
             get {
                 return result.repeatedSfixed64
             }
             set (array) {
                 result.repeatedSfixed64 = array
             }
        }
        func clearRepeatedSfixed64() -> TestAllTypesLiteBuilder {
           result.repeatedSfixed64.removeAll(keepCapacity: false)
           return self
        }
        var repeatedFloat:[Float] {
             get {
                 return result.repeatedFloat
             }
             set (array) {
                 result.repeatedFloat = array
             }
        }
        func clearRepeatedFloat() -> TestAllTypesLiteBuilder {
           result.repeatedFloat.removeAll(keepCapacity: false)
           return self
        }
        var repeatedDouble:[Double] {
             get {
                 return result.repeatedDouble
             }
             set (array) {
                 result.repeatedDouble = array
             }
        }
        func clearRepeatedDouble() -> TestAllTypesLiteBuilder {
           result.repeatedDouble.removeAll(keepCapacity: false)
           return self
        }
        var repeatedBool:[Bool] {
             get {
                 return result.repeatedBool
             }
             set (array) {
                 result.repeatedBool = array
             }
        }
        func clearRepeatedBool() -> TestAllTypesLiteBuilder {
           result.repeatedBool.removeAll(keepCapacity: false)
           return self
        }
        var repeatedString:[String] {
             get {
                 return result.repeatedString
             }
             set (array) {
                 result.repeatedString = array
             }
        }
        func clearRepeatedString() -> TestAllTypesLiteBuilder {
           result.repeatedString.removeAll(keepCapacity: false)
           return self
        }
        var repeatedBytes:[[Byte]] {
             get {
                 return result.repeatedBytes
             }
             set (array) {
                 result.repeatedBytes = array
             }
        }
        func clearRepeatedBytes() -> TestAllTypesLiteBuilder {
           result.repeatedBytes.removeAll(keepCapacity: false)
           return self
        }
        var repeatedGroup:[TestAllTypesLiteRepeatedGroup] {
             get {
                 return result.repeatedGroup
             }
             set (value) {
                 result.repeatedGroup = value
             }
        }
        func clearRepeatedGroup() -> TestAllTypesLiteBuilder {
          result.repeatedGroup.removeAll(keepCapacity: false)
          return self
        }
        var repeatedNestedMessage:[TestAllTypesLiteNestedMessage] {
             get {
                 return result.repeatedNestedMessage
             }
             set (value) {
                 result.repeatedNestedMessage = value
             }
        }
        func clearRepeatedNestedMessage() -> TestAllTypesLiteBuilder {
          result.repeatedNestedMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedForeignMessage:[ForeignMessageLite] {
             get {
                 return result.repeatedForeignMessage
             }
             set (value) {
                 result.repeatedForeignMessage = value
             }
        }
        func clearRepeatedForeignMessage() -> TestAllTypesLiteBuilder {
          result.repeatedForeignMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedImportMessage:[ImportMessageLite] {
             get {
                 return result.repeatedImportMessage
             }
             set (value) {
                 result.repeatedImportMessage = value
             }
        }
        func clearRepeatedImportMessage() -> TestAllTypesLiteBuilder {
          result.repeatedImportMessage.removeAll(keepCapacity: false)
          return self
        }
        var repeatedNestedEnum:[TestAllTypesLiteNestedEnum] {
            get {
                return result.repeatedNestedEnum
            }
            set (value) {
                result.repeatedNestedEnum += value
            }
        }
        func clearRepeatedNestedEnum() -> TestAllTypesLiteBuilder {
          result.repeatedNestedEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedForeignEnum:[ForeignEnumLite] {
            get {
                return result.repeatedForeignEnum
            }
            set (value) {
                result.repeatedForeignEnum += value
            }
        }
        func clearRepeatedForeignEnum() -> TestAllTypesLiteBuilder {
          result.repeatedForeignEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedImportEnum:[ImportEnumLite] {
            get {
                return result.repeatedImportEnum
            }
            set (value) {
                result.repeatedImportEnum += value
            }
        }
        func clearRepeatedImportEnum() -> TestAllTypesLiteBuilder {
          result.repeatedImportEnum.removeAll(keepCapacity: false)
          return self
        }
        var repeatedStringPiece:[String] {
             get {
                 return result.repeatedStringPiece
             }
             set (array) {
                 result.repeatedStringPiece = array
             }
        }
        func clearRepeatedStringPiece() -> TestAllTypesLiteBuilder {
           result.repeatedStringPiece.removeAll(keepCapacity: false)
           return self
        }
        var repeatedCord:[String] {
             get {
                 return result.repeatedCord
             }
             set (array) {
                 result.repeatedCord = array
             }
        }
        func clearRepeatedCord() -> TestAllTypesLiteBuilder {
           result.repeatedCord.removeAll(keepCapacity: false)
           return self
        }
        var repeatedLazyMessage:[TestAllTypesLiteNestedMessage] {
             get {
                 return result.repeatedLazyMessage
             }
             set (value) {
                 result.repeatedLazyMessage = value
             }
        }
        func clearRepeatedLazyMessage() -> TestAllTypesLiteBuilder {
          result.repeatedLazyMessage.removeAll(keepCapacity: false)
          return self
        }
        var hasDefaultInt32:Bool {
             get {
                  return result.hasDefaultInt32
             }
        }
        var defaultInt32:Int32 {
             get {
                  return result.defaultInt32
             }
             set (value) {
                 result.hasDefaultInt32 = true
                 result.defaultInt32 = value
             }
        }
        func clearDefaultInt32() -> TestAllTypesLiteBuilder{
             result.hasDefaultInt32 = false
             result.defaultInt32 = 41
             return self
        }
        var hasDefaultInt64:Bool {
             get {
                  return result.hasDefaultInt64
             }
        }
        var defaultInt64:Int64 {
             get {
                  return result.defaultInt64
             }
             set (value) {
                 result.hasDefaultInt64 = true
                 result.defaultInt64 = value
             }
        }
        func clearDefaultInt64() -> TestAllTypesLiteBuilder{
             result.hasDefaultInt64 = false
             result.defaultInt64 = 42
             return self
        }
        var hasDefaultUint32:Bool {
             get {
                  return result.hasDefaultUint32
             }
        }
        var defaultUint32:UInt32 {
             get {
                  return result.defaultUint32
             }
             set (value) {
                 result.hasDefaultUint32 = true
                 result.defaultUint32 = value
             }
        }
        func clearDefaultUint32() -> TestAllTypesLiteBuilder{
             result.hasDefaultUint32 = false
             result.defaultUint32 = 43
             return self
        }
        var hasDefaultUint64:Bool {
             get {
                  return result.hasDefaultUint64
             }
        }
        var defaultUint64:UInt64 {
             get {
                  return result.defaultUint64
             }
             set (value) {
                 result.hasDefaultUint64 = true
                 result.defaultUint64 = value
             }
        }
        func clearDefaultUint64() -> TestAllTypesLiteBuilder{
             result.hasDefaultUint64 = false
             result.defaultUint64 = 44
             return self
        }
        var hasDefaultSint32:Bool {
             get {
                  return result.hasDefaultSint32
             }
        }
        var defaultSint32:Int32 {
             get {
                  return result.defaultSint32
             }
             set (value) {
                 result.hasDefaultSint32 = true
                 result.defaultSint32 = value
             }
        }
        func clearDefaultSint32() -> TestAllTypesLiteBuilder{
             result.hasDefaultSint32 = false
             result.defaultSint32 = -45
             return self
        }
        var hasDefaultSint64:Bool {
             get {
                  return result.hasDefaultSint64
             }
        }
        var defaultSint64:Int64 {
             get {
                  return result.defaultSint64
             }
             set (value) {
                 result.hasDefaultSint64 = true
                 result.defaultSint64 = value
             }
        }
        func clearDefaultSint64() -> TestAllTypesLiteBuilder{
             result.hasDefaultSint64 = false
             result.defaultSint64 = 46
             return self
        }
        var hasDefaultFixed32:Bool {
             get {
                  return result.hasDefaultFixed32
             }
        }
        var defaultFixed32:UInt32 {
             get {
                  return result.defaultFixed32
             }
             set (value) {
                 result.hasDefaultFixed32 = true
                 result.defaultFixed32 = value
             }
        }
        func clearDefaultFixed32() -> TestAllTypesLiteBuilder{
             result.hasDefaultFixed32 = false
             result.defaultFixed32 = 47
             return self
        }
        var hasDefaultFixed64:Bool {
             get {
                  return result.hasDefaultFixed64
             }
        }
        var defaultFixed64:UInt64 {
             get {
                  return result.defaultFixed64
             }
             set (value) {
                 result.hasDefaultFixed64 = true
                 result.defaultFixed64 = value
             }
        }
        func clearDefaultFixed64() -> TestAllTypesLiteBuilder{
             result.hasDefaultFixed64 = false
             result.defaultFixed64 = 48
             return self
        }
        var hasDefaultSfixed32:Bool {
             get {
                  return result.hasDefaultSfixed32
             }
        }
        var defaultSfixed32:Int32 {
             get {
                  return result.defaultSfixed32
             }
             set (value) {
                 result.hasDefaultSfixed32 = true
                 result.defaultSfixed32 = value
             }
        }
        func clearDefaultSfixed32() -> TestAllTypesLiteBuilder{
             result.hasDefaultSfixed32 = false
             result.defaultSfixed32 = 49
             return self
        }
        var hasDefaultSfixed64:Bool {
             get {
                  return result.hasDefaultSfixed64
             }
        }
        var defaultSfixed64:Int64 {
             get {
                  return result.defaultSfixed64
             }
             set (value) {
                 result.hasDefaultSfixed64 = true
                 result.defaultSfixed64 = value
             }
        }
        func clearDefaultSfixed64() -> TestAllTypesLiteBuilder{
             result.hasDefaultSfixed64 = false
             result.defaultSfixed64 = -50
             return self
        }
        var hasDefaultFloat:Bool {
             get {
                  return result.hasDefaultFloat
             }
        }
        var defaultFloat:Float {
             get {
                  return result.defaultFloat
             }
             set (value) {
                 result.hasDefaultFloat = true
                 result.defaultFloat = value
             }
        }
        func clearDefaultFloat() -> TestAllTypesLiteBuilder{
             result.hasDefaultFloat = false
             result.defaultFloat = 51.5
             return self
        }
        var hasDefaultDouble:Bool {
             get {
                  return result.hasDefaultDouble
             }
        }
        var defaultDouble:Double {
             get {
                  return result.defaultDouble
             }
             set (value) {
                 result.hasDefaultDouble = true
                 result.defaultDouble = value
             }
        }
        func clearDefaultDouble() -> TestAllTypesLiteBuilder{
             result.hasDefaultDouble = false
             result.defaultDouble = 52000
             return self
        }
        var hasDefaultBool:Bool {
             get {
                  return result.hasDefaultBool
             }
        }
        var defaultBool:Bool {
             get {
                  return result.defaultBool
             }
             set (value) {
                 result.hasDefaultBool = true
                 result.defaultBool = value
             }
        }
        func clearDefaultBool() -> TestAllTypesLiteBuilder{
             result.hasDefaultBool = false
             result.defaultBool = true
             return self
        }
        var hasDefaultString:Bool {
             get {
                  return result.hasDefaultString
             }
        }
        var defaultString:String {
             get {
                  return result.defaultString
             }
             set (value) {
                 result.hasDefaultString = true
                 result.defaultString = value
             }
        }
        func clearDefaultString() -> TestAllTypesLiteBuilder{
             result.hasDefaultString = false
             result.defaultString = "hello"
             return self
        }
        var hasDefaultBytes:Bool {
             get {
                  return result.hasDefaultBytes
             }
        }
        var defaultBytes:[Byte] {
             get {
                  return result.defaultBytes
             }
             set (value) {
                 result.hasDefaultBytes = true
                 result.defaultBytes = value
             }
        }
        func clearDefaultBytes() -> TestAllTypesLiteBuilder{
             result.hasDefaultBytes = false
             result.defaultBytes = ([Byte]() + "world".utf8)
             return self
        }
          var hasDefaultNestedEnum:Bool{
              get {
                  return result.hasDefaultNestedEnum
              }
          }
          var defaultNestedEnum:TestAllTypesLiteNestedEnum {
              get {
                  return result.defaultNestedEnum
              }
              set (value) {
                  result.hasDefaultNestedEnum = true
                  result.defaultNestedEnum = value
              }
          }
          func clearDefaultNestedEnum() -> TestAllTypesLiteBuilder {
             result.hasDefaultNestedEnum = false
             result.defaultNestedEnum = .TestAllTypesLiteNestedEnumBar
             return self
          }
          var hasDefaultForeignEnum:Bool{
              get {
                  return result.hasDefaultForeignEnum
              }
          }
          var defaultForeignEnum:ForeignEnumLite {
              get {
                  return result.defaultForeignEnum
              }
              set (value) {
                  result.hasDefaultForeignEnum = true
                  result.defaultForeignEnum = value
              }
          }
          func clearDefaultForeignEnum() -> TestAllTypesLiteBuilder {
             result.hasDefaultForeignEnum = false
             result.defaultForeignEnum = .ForeignEnumLiteForeignLiteBar
             return self
          }
          var hasDefaultImportEnum:Bool{
              get {
                  return result.hasDefaultImportEnum
              }
          }
          var defaultImportEnum:ImportEnumLite {
              get {
                  return result.defaultImportEnum
              }
              set (value) {
                  result.hasDefaultImportEnum = true
                  result.defaultImportEnum = value
              }
          }
          func clearDefaultImportEnum() -> TestAllTypesLiteBuilder {
             result.hasDefaultImportEnum = false
             result.defaultImportEnum = .ImportEnumLiteImportLiteBar
             return self
          }
        var hasDefaultStringPiece:Bool {
             get {
                  return result.hasDefaultStringPiece
             }
        }
        var defaultStringPiece:String {
             get {
                  return result.defaultStringPiece
             }
             set (value) {
                 result.hasDefaultStringPiece = true
                 result.defaultStringPiece = value
             }
        }
        func clearDefaultStringPiece() -> TestAllTypesLiteBuilder{
             result.hasDefaultStringPiece = false
             result.defaultStringPiece = "abc"
             return self
        }
        var hasDefaultCord:Bool {
             get {
                  return result.hasDefaultCord
             }
        }
        var defaultCord:String {
             get {
                  return result.defaultCord
             }
             set (value) {
                 result.hasDefaultCord = true
                 result.defaultCord = value
             }
        }
        func clearDefaultCord() -> TestAllTypesLiteBuilder{
             result.hasDefaultCord = false
             result.defaultCord = "123"
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> TestAllTypesLiteBuilder {
          result = TestAllTypesLite()
          return self
        }
        override func clone() -> TestAllTypesLiteBuilder {
          return TestAllTypesLite.builderWithPrototype(result)
        }
        func build() -> TestAllTypesLite {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> TestAllTypesLite {
          var returnMe:TestAllTypesLite = result
          return returnMe
        }
        func mergeFrom(other:TestAllTypesLite) -> TestAllTypesLiteBuilder {
          if (other == TestAllTypesLite()) {
            return self
          }
          if other.hasOptionalInt32 {
               optionalInt32 = other.optionalInt32
          }
          if other.hasOptionalInt64 {
               optionalInt64 = other.optionalInt64
          }
          if other.hasOptionalUint32 {
               optionalUint32 = other.optionalUint32
          }
          if other.hasOptionalUint64 {
               optionalUint64 = other.optionalUint64
          }
          if other.hasOptionalSint32 {
               optionalSint32 = other.optionalSint32
          }
          if other.hasOptionalSint64 {
               optionalSint64 = other.optionalSint64
          }
          if other.hasOptionalFixed32 {
               optionalFixed32 = other.optionalFixed32
          }
          if other.hasOptionalFixed64 {
               optionalFixed64 = other.optionalFixed64
          }
          if other.hasOptionalSfixed32 {
               optionalSfixed32 = other.optionalSfixed32
          }
          if other.hasOptionalSfixed64 {
               optionalSfixed64 = other.optionalSfixed64
          }
          if other.hasOptionalFloat {
               optionalFloat = other.optionalFloat
          }
          if other.hasOptionalDouble {
               optionalDouble = other.optionalDouble
          }
          if other.hasOptionalBool {
               optionalBool = other.optionalBool
          }
          if other.hasOptionalString {
               optionalString = other.optionalString
          }
          if other.hasOptionalBytes {
               optionalBytes = other.optionalBytes
          }
          if (other.hasOptionalGroup) {
              mergeOptionalGroup(other.optionalGroup)
          }
          if (other.hasOptionalNestedMessage) {
              mergeOptionalNestedMessage(other.optionalNestedMessage)
          }
          if (other.hasOptionalForeignMessage) {
              mergeOptionalForeignMessage(other.optionalForeignMessage)
          }
          if (other.hasOptionalImportMessage) {
              mergeOptionalImportMessage(other.optionalImportMessage)
          }
          if other.hasOptionalNestedEnum {
               optionalNestedEnum = other.optionalNestedEnum
          }
          if other.hasOptionalForeignEnum {
               optionalForeignEnum = other.optionalForeignEnum
          }
          if other.hasOptionalImportEnum {
               optionalImportEnum = other.optionalImportEnum
          }
          if other.hasOptionalStringPiece {
               optionalStringPiece = other.optionalStringPiece
          }
          if other.hasOptionalCord {
               optionalCord = other.optionalCord
          }
          if (other.hasOptionalPublicImportMessage) {
              mergeOptionalPublicImportMessage(other.optionalPublicImportMessage)
          }
          if (other.hasOptionalLazyMessage) {
              mergeOptionalLazyMessage(other.optionalLazyMessage)
          }
          if !other.repeatedInt32.isEmpty {
              result.repeatedInt32 += other.repeatedInt32
          }
          if !other.repeatedInt64.isEmpty {
              result.repeatedInt64 += other.repeatedInt64
          }
          if !other.repeatedUint32.isEmpty {
              result.repeatedUint32 += other.repeatedUint32
          }
          if !other.repeatedUint64.isEmpty {
              result.repeatedUint64 += other.repeatedUint64
          }
          if !other.repeatedSint32.isEmpty {
              result.repeatedSint32 += other.repeatedSint32
          }
          if !other.repeatedSint64.isEmpty {
              result.repeatedSint64 += other.repeatedSint64
          }
          if !other.repeatedFixed32.isEmpty {
              result.repeatedFixed32 += other.repeatedFixed32
          }
          if !other.repeatedFixed64.isEmpty {
              result.repeatedFixed64 += other.repeatedFixed64
          }
          if !other.repeatedSfixed32.isEmpty {
              result.repeatedSfixed32 += other.repeatedSfixed32
          }
          if !other.repeatedSfixed64.isEmpty {
              result.repeatedSfixed64 += other.repeatedSfixed64
          }
          if !other.repeatedFloat.isEmpty {
              result.repeatedFloat += other.repeatedFloat
          }
          if !other.repeatedDouble.isEmpty {
              result.repeatedDouble += other.repeatedDouble
          }
          if !other.repeatedBool.isEmpty {
              result.repeatedBool += other.repeatedBool
          }
          if !other.repeatedString.isEmpty {
              result.repeatedString += other.repeatedString
          }
          if !other.repeatedBytes.isEmpty {
              result.repeatedBytes += other.repeatedBytes
          }
          if !other.repeatedGroup.isEmpty  {
             result.repeatedGroup += other.repeatedGroup
          }
          if !other.repeatedNestedMessage.isEmpty  {
             result.repeatedNestedMessage += other.repeatedNestedMessage
          }
          if !other.repeatedForeignMessage.isEmpty  {
             result.repeatedForeignMessage += other.repeatedForeignMessage
          }
          if !other.repeatedImportMessage.isEmpty  {
             result.repeatedImportMessage += other.repeatedImportMessage
          }
          if !other.repeatedNestedEnum.isEmpty {
             result.repeatedNestedEnum += other.repeatedNestedEnum
          }
          if !other.repeatedForeignEnum.isEmpty {
             result.repeatedForeignEnum += other.repeatedForeignEnum
          }
          if !other.repeatedImportEnum.isEmpty {
             result.repeatedImportEnum += other.repeatedImportEnum
          }
          if !other.repeatedStringPiece.isEmpty {
              result.repeatedStringPiece += other.repeatedStringPiece
          }
          if !other.repeatedCord.isEmpty {
              result.repeatedCord += other.repeatedCord
          }
          if !other.repeatedLazyMessage.isEmpty  {
             result.repeatedLazyMessage += other.repeatedLazyMessage
          }
          if other.hasDefaultInt32 {
               defaultInt32 = other.defaultInt32
          }
          if other.hasDefaultInt64 {
               defaultInt64 = other.defaultInt64
          }
          if other.hasDefaultUint32 {
               defaultUint32 = other.defaultUint32
          }
          if other.hasDefaultUint64 {
               defaultUint64 = other.defaultUint64
          }
          if other.hasDefaultSint32 {
               defaultSint32 = other.defaultSint32
          }
          if other.hasDefaultSint64 {
               defaultSint64 = other.defaultSint64
          }
          if other.hasDefaultFixed32 {
               defaultFixed32 = other.defaultFixed32
          }
          if other.hasDefaultFixed64 {
               defaultFixed64 = other.defaultFixed64
          }
          if other.hasDefaultSfixed32 {
               defaultSfixed32 = other.defaultSfixed32
          }
          if other.hasDefaultSfixed64 {
               defaultSfixed64 = other.defaultSfixed64
          }
          if other.hasDefaultFloat {
               defaultFloat = other.defaultFloat
          }
          if other.hasDefaultDouble {
               defaultDouble = other.defaultDouble
          }
          if other.hasDefaultBool {
               defaultBool = other.defaultBool
          }
          if other.hasDefaultString {
               defaultString = other.defaultString
          }
          if other.hasDefaultBytes {
               defaultBytes = other.defaultBytes
          }
          if other.hasDefaultNestedEnum {
               defaultNestedEnum = other.defaultNestedEnum
          }
          if other.hasDefaultForeignEnum {
               defaultForeignEnum = other.defaultForeignEnum
          }
          if other.hasDefaultImportEnum {
               defaultImportEnum = other.defaultImportEnum
          }
          if other.hasDefaultStringPiece {
               defaultStringPiece = other.defaultStringPiece
          }
          if other.hasDefaultCord {
               defaultCord = other.defaultCord
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllTypesLiteBuilder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllTypesLiteBuilder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 8 {
                optionalInt32 = input.readInt32()
              }
              else if tag == 16 {
                optionalInt64 = input.readInt64()
              }
              else if tag == 24 {
                optionalUint32 = input.readUInt32()
              }
              else if tag == 32 {
                optionalUint64 = input.readUInt64()
              }
              else if tag == 40 {
                optionalSint32 = input.readSInt32()
              }
              else if tag == 48 {
                optionalSint64 = input.readSInt64()
              }
              else if tag == 61 {
                optionalFixed32 = input.readFixed32()
              }
              else if tag == 65 {
                optionalFixed64 = input.readFixed64()
              }
              else if tag == 77 {
                optionalSfixed32 = input.readSFixed32()
              }
              else if tag == 81 {
                optionalSfixed64 = input.readSFixed64()
              }
              else if tag == 93 {
                optionalFloat = input.readFloat()
              }
              else if tag == 97 {
                optionalDouble = input.readDouble()
              }
              else if tag == 104 {
                optionalBool = input.readBool()
              }
              else if tag == 114 {
                optionalString = input.readString()
              }
              else if tag == 122 {
                optionalBytes = input.readData()
              }
              else if tag == 131 {
                var subBuilder:TestAllTypesLiteOptionalGroupBuilder = TestAllTypesLiteOptionalGroup.builder()
                if hasOptionalGroup {
                  subBuilder.mergeFrom(optionalGroup)
                }
                input.readGroup(16, builder:subBuilder, extensionRegistry:extensionRegistry)
                optionalGroup = subBuilder.buildPartial()
              }
              else if tag == 146 {
                var subBuilder:TestAllTypesLiteNestedMessageBuilder = TestAllTypesLiteNestedMessage.builder()
                if hasOptionalNestedMessage {
                  subBuilder.mergeFrom(optionalNestedMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalNestedMessage = subBuilder.buildPartial()
              }
              else if tag == 154 {
                var subBuilder:ForeignMessageLiteBuilder = ForeignMessageLite.builder()
                if hasOptionalForeignMessage {
                  subBuilder.mergeFrom(optionalForeignMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalForeignMessage = subBuilder.buildPartial()
              }
              else if tag == 162 {
                var subBuilder:ImportMessageLiteBuilder = ImportMessageLite.builder()
                if hasOptionalImportMessage {
                  subBuilder.mergeFrom(optionalImportMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalImportMessage = subBuilder.buildPartial()
              }
              else if tag == 168 {
                var value = input.readEnum()
                var enums:TestAllTypesLiteNestedEnum = TestAllTypesLiteNestedEnum.fromRaw(value)!
                if (TestAllTypesLiteNestedEnum.TestAllTypesLiteNestedEnumIsValidValue(enums)) {
                     optionalNestedEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(21, value:Int64(value))
                }
              }
              else if tag == 176 {
                var value = input.readEnum()
                var enums:ForeignEnumLite = ForeignEnumLite.fromRaw(value)!
                if (ForeignEnumLite.ForeignEnumLiteIsValidValue(enums)) {
                     optionalForeignEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(22, value:Int64(value))
                }
              }
              else if tag == 184 {
                var value = input.readEnum()
                var enums:ImportEnumLite = ImportEnumLite.fromRaw(value)!
                if (ImportEnumLite.ImportEnumLiteIsValidValue(enums)) {
                     optionalImportEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(23, value:Int64(value))
                }
              }
              else if tag == 194 {
                optionalStringPiece = input.readString()
              }
              else if tag == 202 {
                optionalCord = input.readString()
              }
              else if tag == 210 {
                var subBuilder:PublicImportMessageLiteBuilder = PublicImportMessageLite.builder()
                if hasOptionalPublicImportMessage {
                  subBuilder.mergeFrom(optionalPublicImportMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalPublicImportMessage = subBuilder.buildPartial()
              }
              else if tag == 218 {
                var subBuilder:TestAllTypesLiteNestedMessageBuilder = TestAllTypesLiteNestedMessage.builder()
                if hasOptionalLazyMessage {
                  subBuilder.mergeFrom(optionalLazyMessage)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                optionalLazyMessage = subBuilder.buildPartial()
              }
              else if tag == 248 {
                repeatedInt32 += [input.readInt32()]
              }
              else if tag == 256 {
                repeatedInt64 += [input.readInt64()]
              }
              else if tag == 264 {
                repeatedUint32 += [input.readUInt32()]
              }
              else if tag == 272 {
                repeatedUint64 += [input.readUInt64()]
              }
              else if tag == 280 {
                repeatedSint32 += [input.readSInt32()]
              }
              else if tag == 288 {
                repeatedSint64 += [input.readSInt64()]
              }
              else if tag == 301 {
                repeatedFixed32 += [input.readFixed32()]
              }
              else if tag == 305 {
                repeatedFixed64 += [input.readFixed64()]
              }
              else if tag == 317 {
                repeatedSfixed32 += [input.readSFixed32()]
              }
              else if tag == 321 {
                repeatedSfixed64 += [input.readSFixed64()]
              }
              else if tag == 333 {
                repeatedFloat += [input.readFloat()]
              }
              else if tag == 337 {
                repeatedDouble += [input.readDouble()]
              }
              else if tag == 344 {
                repeatedBool += [input.readBool()]
              }
              else if tag == 354 {
                repeatedString += [input.readString()]
              }
              else if tag == 362 {
                repeatedBytes += [input.readData()]
              }
              else if tag == 371 {
                var subBuilder = TestAllTypesLiteRepeatedGroup.builder()
                input.readGroup(46,builder:subBuilder,extensionRegistry:extensionRegistry)
                repeatedGroup += [subBuilder.buildPartial()]
              }
              else if tag == 386 {
                var subBuilder = TestAllTypesLiteNestedMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedNestedMessage += [subBuilder.buildPartial()]
              }
              else if tag == 394 {
                var subBuilder = ForeignMessageLite.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedForeignMessage += [subBuilder.buildPartial()]
              }
              else if tag == 402 {
                var subBuilder = ImportMessageLite.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedImportMessage += [subBuilder.buildPartial()]
              }
              else if tag == 408 {
                var value:TestAllTypesLiteNestedEnum = TestAllTypesLiteNestedEnum.fromRaw(input.readEnum())!
                if TestAllTypesLiteNestedEnum.TestAllTypesLiteNestedEnumIsValidValue(value) {
                     result.repeatedNestedEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(51, value:Int64(value.toRaw()))
                }
              }
              else if tag == 416 {
                var value:ForeignEnumLite = ForeignEnumLite.fromRaw(input.readEnum())!
                if ForeignEnumLite.ForeignEnumLiteIsValidValue(value) {
                     result.repeatedForeignEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(52, value:Int64(value.toRaw()))
                }
              }
              else if tag == 424 {
                var value:ImportEnumLite = ImportEnumLite.fromRaw(input.readEnum())!
                if ImportEnumLite.ImportEnumLiteIsValidValue(value) {
                     result.repeatedImportEnum += [value]
                } else {
                     unknownFieldsBuilder.mergeVarintField(53, value:Int64(value.toRaw()))
                }
              }
              else if tag == 434 {
                repeatedStringPiece += [input.readString()]
              }
              else if tag == 442 {
                repeatedCord += [input.readString()]
              }
              else if tag == 458 {
                var subBuilder = TestAllTypesLiteNestedMessage.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                repeatedLazyMessage += [subBuilder.buildPartial()]
              }
              else if tag == 488 {
                defaultInt32 = input.readInt32()
              }
              else if tag == 496 {
                defaultInt64 = input.readInt64()
              }
              else if tag == 504 {
                defaultUint32 = input.readUInt32()
              }
              else if tag == 512 {
                defaultUint64 = input.readUInt64()
              }
              else if tag == 520 {
                defaultSint32 = input.readSInt32()
              }
              else if tag == 528 {
                defaultSint64 = input.readSInt64()
              }
              else if tag == 541 {
                defaultFixed32 = input.readFixed32()
              }
              else if tag == 545 {
                defaultFixed64 = input.readFixed64()
              }
              else if tag == 557 {
                defaultSfixed32 = input.readSFixed32()
              }
              else if tag == 561 {
                defaultSfixed64 = input.readSFixed64()
              }
              else if tag == 573 {
                defaultFloat = input.readFloat()
              }
              else if tag == 577 {
                defaultDouble = input.readDouble()
              }
              else if tag == 584 {
                defaultBool = input.readBool()
              }
              else if tag == 594 {
                defaultString = input.readString()
              }
              else if tag == 602 {
                defaultBytes = input.readData()
              }
              else if tag == 648 {
                var value = input.readEnum()
                var enums:TestAllTypesLiteNestedEnum = TestAllTypesLiteNestedEnum.fromRaw(value)!
                if (TestAllTypesLiteNestedEnum.TestAllTypesLiteNestedEnumIsValidValue(enums)) {
                     defaultNestedEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(81, value:Int64(value))
                }
              }
              else if tag == 656 {
                var value = input.readEnum()
                var enums:ForeignEnumLite = ForeignEnumLite.fromRaw(value)!
                if (ForeignEnumLite.ForeignEnumLiteIsValidValue(enums)) {
                     defaultForeignEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(82, value:Int64(value))
                }
              }
              else if tag == 664 {
                var value = input.readEnum()
                var enums:ImportEnumLite = ImportEnumLite.fromRaw(value)!
                if (ImportEnumLite.ImportEnumLiteIsValidValue(enums)) {
                     defaultImportEnum = enums
                } else {
                     unknownFieldsBuilder.mergeVarintField(83, value:Int64(value))
                }
              }
              else if tag == 674 {
                defaultStringPiece = input.readString()
              }
              else if tag == 682 {
                defaultCord = input.readString()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        func == (lhs: ForeignMessageLite, rhs: ForeignMessageLite) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              fieldCheck = fieldCheck && (lhs.hasC == rhs.hasC) && (!lhs.hasC || lhs.c == rhs.c)
               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        }
        class ForeignMessageLite : GeneratedMessage {
          private(set) var hasC:Bool = false
          private(set) var c:Int32 = 0

          override init() {
               super.init()
          }
          override func isInitialized() -> Bool {
            return true
          }
          override func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasC {
              output.writeInt32(1, value:c)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
              return size
            }

            size = 0
            if hasC {
              size += WireFormat.computeInt32Size(1, value:c)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          class func parseFromData(data:[Byte]) -> ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromData(data).build()
          }
          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromInputStream(input:NSInputStream) -> ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromInputStream(input).build()
          }
          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream) -> ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromCodedInputStream(input).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ForeignMessageLite {
            return ForeignMessageLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func builder() -> ForeignMessageLiteBuilder {
            return ForeignMessageLiteBuilder()
          }
          class func builderWithPrototype(prototype:ForeignMessageLite) -> ForeignMessageLiteBuilder {
            return ForeignMessageLite.builder().mergeFrom(prototype)
          }
          func builder() -> ForeignMessageLiteBuilder {
            return ForeignMessageLite.builder()
          }
          func toBuilder() -> ForeignMessageLiteBuilder {
            return ForeignMessageLite.builderWithPrototype(self)
          }
          override func writeDescriptionTo(inout output:String, indent:String) {
            if hasC {
              output += "\(indent) c: \(c) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override var hashValue:Int {
           get {
                var hashCode:Int = 7
                if hasC {
                   hashCode = (hashCode &* 31) &+ c.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
              }
            }
          }

          class ForeignMessageLiteBuilder : GeneratedMessageBuilder {
          private var result:ForeignMessageLite

          override init () {
             result = ForeignMessageLite()
          }
          var hasC:Bool {
               get {
                    return result.hasC
               }
          }
          var c:Int32 {
               get {
                    return result.c
               }
               set (value) {
                   result.hasC = true
                   result.c = value
               }
          }
          func clearC() -> ForeignMessageLiteBuilder{
               result.hasC = false
               result.c = 0
               return self
          }
          override var internalGetResult:GeneratedMessage {
               get {
                  return result
               }
          }
          override func clear() -> ForeignMessageLiteBuilder {
            result = ForeignMessageLite()
            return self
          }
          override func clone() -> ForeignMessageLiteBuilder {
            return ForeignMessageLite.builderWithPrototype(result)
          }
          func build() -> ForeignMessageLite {
               checkInitialized()
               return buildPartial()
          }
          func buildPartial() -> ForeignMessageLite {
            var returnMe:ForeignMessageLite = result
            return returnMe
          }
          func mergeFrom(other:ForeignMessageLite) -> ForeignMessageLiteBuilder {
            if (other == ForeignMessageLite()) {
              return self
            }
            if other.hasC {
                 c = other.c
            }
              mergeUnknownFields(other.unknownFields)
            return self
          }
          override func mergeFromCodedInputStream(input:CodedInputStream) ->ForeignMessageLiteBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ForeignMessageLiteBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag:Int32 = input.readTag()
                if tag == 0 {
                     self.unknownFields = unknownFieldsBuilder.build()
                     return self}
                else if tag == 8 {
                  c = input.readInt32()
                }
                else {
                      if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                          unknownFields = unknownFieldsBuilder.build()
                          return self
                      }
                }
                }
             }
          }

          func == (lhs: TestPackedTypesLite, rhs: TestPackedTypesLite) -> Bool {
                if (lhs === rhs) {
                  return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.packedInt32 == rhs.packedInt32)
                 fieldCheck = fieldCheck && (lhs.packedInt64 == rhs.packedInt64)
                 fieldCheck = fieldCheck && (lhs.packedUint32 == rhs.packedUint32)
                 fieldCheck = fieldCheck && (lhs.packedUint64 == rhs.packedUint64)
                 fieldCheck = fieldCheck && (lhs.packedSint32 == rhs.packedSint32)
                 fieldCheck = fieldCheck && (lhs.packedSint64 == rhs.packedSint64)
                 fieldCheck = fieldCheck && (lhs.packedFixed32 == rhs.packedFixed32)
                 fieldCheck = fieldCheck && (lhs.packedFixed64 == rhs.packedFixed64)
                 fieldCheck = fieldCheck && (lhs.packedSfixed32 == rhs.packedSfixed32)
                 fieldCheck = fieldCheck && (lhs.packedSfixed64 == rhs.packedSfixed64)
                 fieldCheck = fieldCheck && (lhs.packedFloat == rhs.packedFloat)
                 fieldCheck = fieldCheck && (lhs.packedDouble == rhs.packedDouble)
                 fieldCheck = fieldCheck && (lhs.packedBool == rhs.packedBool)
                 fieldCheck = fieldCheck && (lhs.packedEnum == rhs.packedEnum)
                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          }
          class TestPackedTypesLite : GeneratedMessage {
            private(set) var packedInt32:[Int32] = [Int32]()
            private var packedInt32MemoizedSerializedSize:Int32 = -1
            private(set) var packedInt64:[Int64] = [Int64]()
            private var packedInt64MemoizedSerializedSize:Int32 = -1
            private(set) var packedUint32:[UInt32] = [UInt32]()
            private var packedUint32MemoizedSerializedSize:Int32 = -1
            private(set) var packedUint64:[UInt64] = [UInt64]()
            private var packedUint64MemoizedSerializedSize:Int32 = -1
            private(set) var packedSint32:[Int32] = [Int32]()
            private var packedSint32MemoizedSerializedSize:Int32 = -1
            private(set) var packedSint64:[Int64] = [Int64]()
            private var packedSint64MemoizedSerializedSize:Int32 = -1
            private(set) var packedFixed32:[UInt32] = [UInt32]()
            private var packedFixed32MemoizedSerializedSize:Int32 = -1
            private(set) var packedFixed64:[UInt64] = [UInt64]()
            private var packedFixed64MemoizedSerializedSize:Int32 = -1
            private(set) var packedSfixed32:[Int32] = [Int32]()
            private var packedSfixed32MemoizedSerializedSize:Int32 = -1
            private(set) var packedSfixed64:[Int64] = [Int64]()
            private var packedSfixed64MemoizedSerializedSize:Int32 = -1
            private(set) var packedFloat:[Float] = [Float]()
            private var packedFloatMemoizedSerializedSize:Int32 = -1
            private(set) var packedDouble:[Double] = [Double]()
            private var packedDoubleMemoizedSerializedSize:Int32 = -1
            private(set) var packedBool:[Bool] = [Bool]()
            private var packedBoolMemoizedSerializedSize:Int32 = -1
            private var packedEnumMemoizedSerializedSize:Int32 = 0
            private(set) var packedEnum:[ForeignEnumLite] = [ForeignEnumLite]()
            override init() {
                 super.init()
            }
            override func isInitialized() -> Bool {
              return true
            }
            override func writeToCodedOutputStream(output:CodedOutputStream) {
              if !packedInt32.isEmpty {
                output.writeRawVarint32(722)
                output.writeRawVarint32(packedInt32MemoizedSerializedSize)
                for value in packedInt32 {
                  output.writeInt32NoTag(value)
                }
              }
              if !packedInt64.isEmpty {
                output.writeRawVarint32(730)
                output.writeRawVarint32(packedInt64MemoizedSerializedSize)
                for value in packedInt64 {
                  output.writeInt64NoTag(value)
                }
              }
              if !packedUint32.isEmpty {
                output.writeRawVarint32(738)
                output.writeRawVarint32(packedUint32MemoizedSerializedSize)
                for value in packedUint32 {
                  output.writeUInt32NoTag(value)
                }
              }
              if !packedUint64.isEmpty {
                output.writeRawVarint32(746)
                output.writeRawVarint32(packedUint64MemoizedSerializedSize)
                for value in packedUint64 {
                  output.writeUInt64NoTag(value)
                }
              }
              if !packedSint32.isEmpty {
                output.writeRawVarint32(754)
                output.writeRawVarint32(packedSint32MemoizedSerializedSize)
                for value in packedSint32 {
                  output.writeSInt32NoTag(value)
                }
              }
              if !packedSint64.isEmpty {
                output.writeRawVarint32(762)
                output.writeRawVarint32(packedSint64MemoizedSerializedSize)
                for value in packedSint64 {
                  output.writeSInt64NoTag(value)
                }
              }
              if !packedFixed32.isEmpty {
                output.writeRawVarint32(770)
                output.writeRawVarint32(packedFixed32MemoizedSerializedSize)
                for value in packedFixed32 {
                  output.writeFixed32NoTag(value)
                }
              }
              if !packedFixed64.isEmpty {
                output.writeRawVarint32(778)
                output.writeRawVarint32(packedFixed64MemoizedSerializedSize)
                for value in packedFixed64 {
                  output.writeFixed64NoTag(value)
                }
              }
              if !packedSfixed32.isEmpty {
                output.writeRawVarint32(786)
                output.writeRawVarint32(packedSfixed32MemoizedSerializedSize)
                for value in packedSfixed32 {
                  output.writeSFixed32NoTag(value)
                }
              }
              if !packedSfixed64.isEmpty {
                output.writeRawVarint32(794)
                output.writeRawVarint32(packedSfixed64MemoizedSerializedSize)
                for value in packedSfixed64 {
                  output.writeSFixed64NoTag(value)
                }
              }
              if !packedFloat.isEmpty {
                output.writeRawVarint32(802)
                output.writeRawVarint32(packedFloatMemoizedSerializedSize)
                for value in packedFloat {
                  output.writeFloatNoTag(value)
                }
              }
              if !packedDouble.isEmpty {
                output.writeRawVarint32(810)
                output.writeRawVarint32(packedDoubleMemoizedSerializedSize)
                for value in packedDouble {
                  output.writeDoubleNoTag(value)
                }
              }
              if !packedBool.isEmpty {
                output.writeRawVarint32(818)
                output.writeRawVarint32(packedBoolMemoizedSerializedSize)
                for value in packedBool {
                  output.writeBoolNoTag(value)
                }
              }
              if !packedEnum.isEmpty {
                output.writeRawVarint32(826)
                output.writeRawVarint32(packedEnumMemoizedSerializedSize)
              }
              for value in packedEnum {
                  output.writeEnumNoTag(value.toRaw())
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override func serializedSize() -> Int32 {
              var size:Int32 = memoizedSerializedSize
              if size != -1 {
                return size
              }

              size = 0
                var dataSizePackedInt32:Int32 = 0
                for element in packedInt32 {
                    dataSizePackedInt32 += WireFormat.computeInt32SizeNoTag(element)
                }
                size += dataSizePackedInt32
                if !packedInt32.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedInt32)
                }
                packedInt32MemoizedSerializedSize = dataSizePackedInt32
                var dataSizePackedInt64:Int32 = 0
                for element in packedInt64 {
                    dataSizePackedInt64 += WireFormat.computeInt64SizeNoTag(element)
                }
                size += dataSizePackedInt64
                if !packedInt64.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedInt64)
                }
                packedInt64MemoizedSerializedSize = dataSizePackedInt64
                var dataSizePackedUint32:Int32 = 0
                for element in packedUint32 {
                    dataSizePackedUint32 += WireFormat.computeUInt32SizeNoTag(element)
                }
                size += dataSizePackedUint32
                if !packedUint32.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedUint32)
                }
                packedUint32MemoizedSerializedSize = dataSizePackedUint32
                var dataSizePackedUint64:Int32 = 0
                for element in packedUint64 {
                    dataSizePackedUint64 += WireFormat.computeUInt64SizeNoTag(element)
                }
                size += dataSizePackedUint64
                if !packedUint64.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedUint64)
                }
                packedUint64MemoizedSerializedSize = dataSizePackedUint64
                var dataSizePackedSint32:Int32 = 0
                for element in packedSint32 {
                    dataSizePackedSint32 += WireFormat.computeSInt32SizeNoTag(element)
                }
                size += dataSizePackedSint32
                if !packedSint32.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedSint32)
                }
                packedSint32MemoizedSerializedSize = dataSizePackedSint32
                var dataSizePackedSint64:Int32 = 0
                for element in packedSint64 {
                    dataSizePackedSint64 += WireFormat.computeSInt64SizeNoTag(element)
                }
                size += dataSizePackedSint64
                if !packedSint64.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedSint64)
                }
                packedSint64MemoizedSerializedSize = dataSizePackedSint64
                var dataSizePackedFixed32:Int32 = 0
                dataSizePackedFixed32 = 4 * Int32(packedFixed32.count)
                size += dataSizePackedFixed32
                if !packedFixed32.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedFixed32)
                }
                packedFixed32MemoizedSerializedSize = dataSizePackedFixed32
                var dataSizePackedFixed64:Int32 = 0
                dataSizePackedFixed64 = 8 * Int32(packedFixed64.count)
                size += dataSizePackedFixed64
                if !packedFixed64.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedFixed64)
                }
                packedFixed64MemoizedSerializedSize = dataSizePackedFixed64
                var dataSizePackedSfixed32:Int32 = 0
                dataSizePackedSfixed32 = 4 * Int32(packedSfixed32.count)
                size += dataSizePackedSfixed32
                if !packedSfixed32.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedSfixed32)
                }
                packedSfixed32MemoizedSerializedSize = dataSizePackedSfixed32
                var dataSizePackedSfixed64:Int32 = 0
                dataSizePackedSfixed64 = 8 * Int32(packedSfixed64.count)
                size += dataSizePackedSfixed64
                if !packedSfixed64.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedSfixed64)
                }
                packedSfixed64MemoizedSerializedSize = dataSizePackedSfixed64
                var dataSizePackedFloat:Int32 = 0
                dataSizePackedFloat = 4 * Int32(packedFloat.count)
                size += dataSizePackedFloat
                if !packedFloat.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedFloat)
                }
                packedFloatMemoizedSerializedSize = dataSizePackedFloat
                var dataSizePackedDouble:Int32 = 0
                dataSizePackedDouble = 8 * Int32(packedDouble.count)
                size += dataSizePackedDouble
                if !packedDouble.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedDouble)
                }
                packedDoubleMemoizedSerializedSize = dataSizePackedDouble
                var dataSizePackedBool:Int32 = 0
                dataSizePackedBool = 1 * Int32(packedBool.count)
                size += dataSizePackedBool
                if !packedBool.isEmpty {
                  size += 2
                  size += WireFormat.computeInt32SizeNoTag(dataSizePackedBool)
                }
                packedBoolMemoizedSerializedSize = dataSizePackedBool
                var dataSizepackedEnum:Int32 = 0
                for value in packedEnum {
                    dataSizepackedEnum += WireFormat.computeEnumSizeNoTag(value.toRaw())
                }
                size += dataSizepackedEnum
                if !packedEnum.isEmpty {
                  size += 2
                  size += WireFormat.computeRawVarint32Size(dataSizepackedEnum)
                packedEnumMemoizedSerializedSize = dataSizepackedEnum
              size += unknownFields.serializedSize()
              memoizedSerializedSize = size
              return size
            }
            class func parseFromData(data:[Byte]) -> TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromData(data).build()
            }
            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromInputStream(input:NSInputStream) -> TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromInputStream(input).build()
            }
            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream) -> TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromCodedInputStream(input).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedTypesLite {
              return TestPackedTypesLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func builder() -> TestPackedTypesLiteBuilder {
              return TestPackedTypesLiteBuilder()
            }
            class func builderWithPrototype(prototype:TestPackedTypesLite) -> TestPackedTypesLiteBuilder {
              return TestPackedTypesLite.builder().mergeFrom(prototype)
            }
            func builder() -> TestPackedTypesLiteBuilder {
              return TestPackedTypesLite.builder()
            }
            func toBuilder() -> TestPackedTypesLiteBuilder {
              return TestPackedTypesLite.builderWithPrototype(self)
            }
            override func writeDescriptionTo(inout output:String, indent:String) {
              var packedInt32ElementIndex:Int = 0
              for element in packedInt32  {
                  output += "\(indent) packedInt32[\(packedInt32ElementIndex)]: \(element)\n"
                  packedInt32ElementIndex++
              }
              var packedInt64ElementIndex:Int = 0
              for element in packedInt64  {
                  output += "\(indent) packedInt64[\(packedInt64ElementIndex)]: \(element)\n"
                  packedInt64ElementIndex++
              }
              var packedUint32ElementIndex:Int = 0
              for element in packedUint32  {
                  output += "\(indent) packedUint32[\(packedUint32ElementIndex)]: \(element)\n"
                  packedUint32ElementIndex++
              }
              var packedUint64ElementIndex:Int = 0
              for element in packedUint64  {
                  output += "\(indent) packedUint64[\(packedUint64ElementIndex)]: \(element)\n"
                  packedUint64ElementIndex++
              }
              var packedSint32ElementIndex:Int = 0
              for element in packedSint32  {
                  output += "\(indent) packedSint32[\(packedSint32ElementIndex)]: \(element)\n"
                  packedSint32ElementIndex++
              }
              var packedSint64ElementIndex:Int = 0
              for element in packedSint64  {
                  output += "\(indent) packedSint64[\(packedSint64ElementIndex)]: \(element)\n"
                  packedSint64ElementIndex++
              }
              var packedFixed32ElementIndex:Int = 0
              for element in packedFixed32  {
                  output += "\(indent) packedFixed32[\(packedFixed32ElementIndex)]: \(element)\n"
                  packedFixed32ElementIndex++
              }
              var packedFixed64ElementIndex:Int = 0
              for element in packedFixed64  {
                  output += "\(indent) packedFixed64[\(packedFixed64ElementIndex)]: \(element)\n"
                  packedFixed64ElementIndex++
              }
              var packedSfixed32ElementIndex:Int = 0
              for element in packedSfixed32  {
                  output += "\(indent) packedSfixed32[\(packedSfixed32ElementIndex)]: \(element)\n"
                  packedSfixed32ElementIndex++
              }
              var packedSfixed64ElementIndex:Int = 0
              for element in packedSfixed64  {
                  output += "\(indent) packedSfixed64[\(packedSfixed64ElementIndex)]: \(element)\n"
                  packedSfixed64ElementIndex++
              }
              var packedFloatElementIndex:Int = 0
              for element in packedFloat  {
                  output += "\(indent) packedFloat[\(packedFloatElementIndex)]: \(element)\n"
                  packedFloatElementIndex++
              }
              var packedDoubleElementIndex:Int = 0
              for element in packedDouble  {
                  output += "\(indent) packedDouble[\(packedDoubleElementIndex)]: \(element)\n"
                  packedDoubleElementIndex++
              }
              var packedBoolElementIndex:Int = 0
              for element in packedBool  {
                  output += "\(indent) packedBool[\(packedBoolElementIndex)]: \(element)\n"
                  packedBoolElementIndex++
              }
              var packedEnumElementIndex:Int = 0
              for element in packedEnum {
                  output += "\(indent) packedEnum[\(packedEnumElementIndex)]: \(element.toRaw())"
                  packedEnumElementIndex++
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override var hashValue:Int {
             get {
                  var hashCode:Int = 7
                  for element in packedInt32 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedInt64 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedUint32 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedUint64 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedSint32 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedSint64 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedFixed32 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedFixed64 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedSfixed32 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedSfixed64 {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedFloat {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedDouble {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedBool {
                      hashCode = (hashCode &* 31) &+ element.hashValue
                  }
                  for element in packedEnum {
                      hashCode = (hashCode &* 31) &+ Int(element.toRaw())
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
                }
              }
            }

            class TestPackedTypesLiteBuilder : GeneratedMessageBuilder {
            private var result:TestPackedTypesLite

            override init () {
               result = TestPackedTypesLite()
            }
            var packedInt32:[Int32] {
                 get {
                     return result.packedInt32
                 }
                 set (array) {
                     result.packedInt32 = array
                 }
            }
            func clearPackedInt32() -> TestPackedTypesLiteBuilder {
               result.packedInt32.removeAll(keepCapacity: false)
               return self
            }
            var packedInt64:[Int64] {
                 get {
                     return result.packedInt64
                 }
                 set (array) {
                     result.packedInt64 = array
                 }
            }
            func clearPackedInt64() -> TestPackedTypesLiteBuilder {
               result.packedInt64.removeAll(keepCapacity: false)
               return self
            }
            var packedUint32:[UInt32] {
                 get {
                     return result.packedUint32
                 }
                 set (array) {
                     result.packedUint32 = array
                 }
            }
            func clearPackedUint32() -> TestPackedTypesLiteBuilder {
               result.packedUint32.removeAll(keepCapacity: false)
               return self
            }
            var packedUint64:[UInt64] {
                 get {
                     return result.packedUint64
                 }
                 set (array) {
                     result.packedUint64 = array
                 }
            }
            func clearPackedUint64() -> TestPackedTypesLiteBuilder {
               result.packedUint64.removeAll(keepCapacity: false)
               return self
            }
            var packedSint32:[Int32] {
                 get {
                     return result.packedSint32
                 }
                 set (array) {
                     result.packedSint32 = array
                 }
            }
            func clearPackedSint32() -> TestPackedTypesLiteBuilder {
               result.packedSint32.removeAll(keepCapacity: false)
               return self
            }
            var packedSint64:[Int64] {
                 get {
                     return result.packedSint64
                 }
                 set (array) {
                     result.packedSint64 = array
                 }
            }
            func clearPackedSint64() -> TestPackedTypesLiteBuilder {
               result.packedSint64.removeAll(keepCapacity: false)
               return self
            }
            var packedFixed32:[UInt32] {
                 get {
                     return result.packedFixed32
                 }
                 set (array) {
                     result.packedFixed32 = array
                 }
            }
            func clearPackedFixed32() -> TestPackedTypesLiteBuilder {
               result.packedFixed32.removeAll(keepCapacity: false)
               return self
            }
            var packedFixed64:[UInt64] {
                 get {
                     return result.packedFixed64
                 }
                 set (array) {
                     result.packedFixed64 = array
                 }
            }
            func clearPackedFixed64() -> TestPackedTypesLiteBuilder {
               result.packedFixed64.removeAll(keepCapacity: false)
               return self
            }
            var packedSfixed32:[Int32] {
                 get {
                     return result.packedSfixed32
                 }
                 set (array) {
                     result.packedSfixed32 = array
                 }
            }
            func clearPackedSfixed32() -> TestPackedTypesLiteBuilder {
               result.packedSfixed32.removeAll(keepCapacity: false)
               return self
            }
            var packedSfixed64:[Int64] {
                 get {
                     return result.packedSfixed64
                 }
                 set (array) {
                     result.packedSfixed64 = array
                 }
            }
            func clearPackedSfixed64() -> TestPackedTypesLiteBuilder {
               result.packedSfixed64.removeAll(keepCapacity: false)
               return self
            }
            var packedFloat:[Float] {
                 get {
                     return result.packedFloat
                 }
                 set (array) {
                     result.packedFloat = array
                 }
            }
            func clearPackedFloat() -> TestPackedTypesLiteBuilder {
               result.packedFloat.removeAll(keepCapacity: false)
               return self
            }
            var packedDouble:[Double] {
                 get {
                     return result.packedDouble
                 }
                 set (array) {
                     result.packedDouble = array
                 }
            }
            func clearPackedDouble() -> TestPackedTypesLiteBuilder {
               result.packedDouble.removeAll(keepCapacity: false)
               return self
            }
            var packedBool:[Bool] {
                 get {
                     return result.packedBool
                 }
                 set (array) {
                     result.packedBool = array
                 }
            }
            func clearPackedBool() -> TestPackedTypesLiteBuilder {
               result.packedBool.removeAll(keepCapacity: false)
               return self
            }
            var packedEnum:[ForeignEnumLite] {
                get {
                    return result.packedEnum
                }
                set (value) {
                    result.packedEnum += value
                }
            }
            func clearPackedEnum() -> TestPackedTypesLiteBuilder {
              result.packedEnum.removeAll(keepCapacity: false)
              return self
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> TestPackedTypesLiteBuilder {
              result = TestPackedTypesLite()
              return self
            }
            override func clone() -> TestPackedTypesLiteBuilder {
              return TestPackedTypesLite.builderWithPrototype(result)
            }
            func build() -> TestPackedTypesLite {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> TestPackedTypesLite {
              var returnMe:TestPackedTypesLite = result
              return returnMe
            }
            func mergeFrom(other:TestPackedTypesLite) -> TestPackedTypesLiteBuilder {
              if (other == TestPackedTypesLite()) {
                return self
              }
              if !other.packedInt32.isEmpty {
                  result.packedInt32 += other.packedInt32
              }
              if !other.packedInt64.isEmpty {
                  result.packedInt64 += other.packedInt64
              }
              if !other.packedUint32.isEmpty {
                  result.packedUint32 += other.packedUint32
              }
              if !other.packedUint64.isEmpty {
                  result.packedUint64 += other.packedUint64
              }
              if !other.packedSint32.isEmpty {
                  result.packedSint32 += other.packedSint32
              }
              if !other.packedSint64.isEmpty {
                  result.packedSint64 += other.packedSint64
              }
              if !other.packedFixed32.isEmpty {
                  result.packedFixed32 += other.packedFixed32
              }
              if !other.packedFixed64.isEmpty {
                  result.packedFixed64 += other.packedFixed64
              }
              if !other.packedSfixed32.isEmpty {
                  result.packedSfixed32 += other.packedSfixed32
              }
              if !other.packedSfixed64.isEmpty {
                  result.packedSfixed64 += other.packedSfixed64
              }
              if !other.packedFloat.isEmpty {
                  result.packedFloat += other.packedFloat
              }
              if !other.packedDouble.isEmpty {
                  result.packedDouble += other.packedDouble
              }
              if !other.packedBool.isEmpty {
                  result.packedBool += other.packedBool
              }
              if !other.packedEnum.isEmpty {
                 result.packedEnum += other.packedEnum
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->TestPackedTypesLiteBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedTypesLiteBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else if tag == 722 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedInt32 += [input.readInt32()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 730 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedInt64 += [input.readInt64()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 738 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedUint32 += [input.readUInt32()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 746 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedUint64 += [input.readUInt64()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 754 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedSint32 += [input.readSInt32()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 762 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedSint64 += [input.readSInt64()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 770 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedFixed32 += [input.readFixed32()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 778 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedFixed64 += [input.readFixed64()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 786 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedSfixed32 += [input.readSFixed32()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 794 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedSfixed64 += [input.readSFixed64()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 802 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedFloat += [input.readFloat()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 810 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedDouble += [input.readDouble()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 818 {
                    var length:Int32 = input.readRawVarint32()
                    var limit:Int32 = input.pushLimit(length)
                    while (input.bytesUntilLimit() > 0) {
                      result.packedBool += [input.readBool()]
                    }
                    input.popLimit(limit)
                  }
                  else if tag == 826 {
                    var length:Int32 = input.readRawVarint32()
                    var oldLimit:Int32 = input.pushLimit(length)
                    while input.bytesUntilLimit() > 0 {
                      var value:ForeignEnumLite = ForeignEnumLite.fromRaw(input.readEnum())!
                      if ForeignEnumLite.ForeignEnumLiteIsValidValue(value) {
                           result.packedEnum += [value]
                      } else {
                           unknownFieldsBuilder.mergeVarintField(103, value:Int64(value.toRaw()))
                      }
                    }
                    input.popLimit(oldLimit)
                  }
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }

            func == (lhs: TestAllExtensionsLite, rhs: TestAllExtensionsLite) -> Bool {
                  if (lhs === rhs) {
                    return true
                  }
                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            }
            class TestAllExtensionsLite : ExtendableMessage {
              override init() {
                   super.init()
              }
              override func isInitialized() -> Bool {
                if !extensionsAreInitialized() {
                  return false
                }
                return true
              }
              override func writeToCodedOutputStream(output:CodedOutputStream) {
                writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
                unknownFields.writeToCodedOutputStream(output)
              }
              override func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                  return size
                }

                size = 0
                size += extensionsSerializedSize()
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              class func parseFromData(data:[Byte]) -> TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromData(data).build()
              }
              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromInputStream(input:NSInputStream) -> TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromInputStream(input).build()
              }
              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream) -> TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromCodedInputStream(input).build()
              }
              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllExtensionsLite {
                return TestAllExtensionsLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              class func builder() -> TestAllExtensionsLiteBuilder {
                return TestAllExtensionsLiteBuilder()
              }
              class func builderWithPrototype(prototype:TestAllExtensionsLite) -> TestAllExtensionsLiteBuilder {
                return TestAllExtensionsLite.builder().mergeFrom(prototype)
              }
              func builder() -> TestAllExtensionsLiteBuilder {
                return TestAllExtensionsLite.builder()
              }
              func toBuilder() -> TestAllExtensionsLiteBuilder {
                return TestAllExtensionsLite.builderWithPrototype(self)
              }
              override func writeDescriptionTo(inout output:String, indent:String) {
                writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override var hashValue:Int {
               get {
                    var hashCode:Int = 7
                    hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                  }
                }
              }

              class TestAllExtensionsLiteBuilder : ExtendableMessageBuilder {
              private var result:TestAllExtensionsLite

              override init () {
                 result = TestAllExtensionsLite()
              }
              override var internalGetResult:ExtendableMessage {
                   get {
                       return result
                   }
              }
              override func clear() -> TestAllExtensionsLiteBuilder {
                result = TestAllExtensionsLite()
                return self
              }
              override func clone() -> TestAllExtensionsLiteBuilder {
                return TestAllExtensionsLite.builderWithPrototype(result)
              }
              func build() -> TestAllExtensionsLite {
                   checkInitialized()
                   return buildPartial()
              }
              func buildPartial() -> TestAllExtensionsLite {
                var returnMe:TestAllExtensionsLite = result
                return returnMe
              }
              func mergeFrom(other:TestAllExtensionsLite) -> TestAllExtensionsLiteBuilder {
                if (other == TestAllExtensionsLite()) {
                  return self
                }
                mergeExtensionFields(other)
                  mergeUnknownFields(other.unknownFields)
                return self
              }
              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestAllExtensionsLiteBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestAllExtensionsLiteBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag:Int32 = input.readTag()
                    if tag == 0 {
                         self.unknownFields = unknownFieldsBuilder.build()
                         return self}
                    else {
                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                              unknownFields = unknownFieldsBuilder.build()
                              return self
                          }
                    }
                    }
                 }
              }

              func == (lhs: OptionalGroup_extension_lite, rhs: OptionalGroup_extension_lite) -> Bool {
                    if (lhs === rhs) {
                      return true
                    }
                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                    fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
              }
              class OptionalGroup_extension_lite : GeneratedMessage {
                private(set) var hasA:Bool = false
                private(set) var a:Int32 = 0

                override init() {
                     super.init()
                }
                override func isInitialized() -> Bool {
                  return true
                }
                override func writeToCodedOutputStream(output:CodedOutputStream) {
                  if hasA {
                    output.writeInt32(17, value:a)
                  }
                  unknownFields.writeToCodedOutputStream(output)
                }
                override func serializedSize() -> Int32 {
                  var size:Int32 = memoizedSerializedSize
                  if size != -1 {
                    return size
                  }

                  size = 0
                  if hasA {
                    size += WireFormat.computeInt32Size(17, value:a)
                  }
                  size += unknownFields.serializedSize()
                  memoizedSerializedSize = size
                  return size
                }
                class func parseFromData(data:[Byte]) -> OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromData(data).build()
                }
                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromInputStream(input:NSInputStream) -> OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromInputStream(input).build()
                }
                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream) -> OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromCodedInputStream(input).build()
                }
                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OptionalGroup_extension_lite {
                  return OptionalGroup_extension_lite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                }
                class func builder() -> OptionalGroup_extension_liteBuilder {
                  return OptionalGroup_extension_liteBuilder()
                }
                class func builderWithPrototype(prototype:OptionalGroup_extension_lite) -> OptionalGroup_extension_liteBuilder {
                  return OptionalGroup_extension_lite.builder().mergeFrom(prototype)
                }
                func builder() -> OptionalGroup_extension_liteBuilder {
                  return OptionalGroup_extension_lite.builder()
                }
                func toBuilder() -> OptionalGroup_extension_liteBuilder {
                  return OptionalGroup_extension_lite.builderWithPrototype(self)
                }
                override func writeDescriptionTo(inout output:String, indent:String) {
                  if hasA {
                    output += "\(indent) a: \(a) \n"
                  }
                  unknownFields.writeDescriptionTo(&output, indent:indent)
                }
                override var hashValue:Int {
                 get {
                      var hashCode:Int = 7
                      if hasA {
                         hashCode = (hashCode &* 31) &+ a.hashValue
                      }
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                    }
                  }
                }

                class OptionalGroup_extension_liteBuilder : GeneratedMessageBuilder {
                private var result:OptionalGroup_extension_lite

                override init () {
                   result = OptionalGroup_extension_lite()
                }
                var hasA:Bool {
                     get {
                          return result.hasA
                     }
                }
                var a:Int32 {
                     get {
                          return result.a
                     }
                     set (value) {
                         result.hasA = true
                         result.a = value
                     }
                }
                func clearA() -> OptionalGroup_extension_liteBuilder{
                     result.hasA = false
                     result.a = 0
                     return self
                }
                override var internalGetResult:GeneratedMessage {
                     get {
                        return result
                     }
                }
                override func clear() -> OptionalGroup_extension_liteBuilder {
                  result = OptionalGroup_extension_lite()
                  return self
                }
                override func clone() -> OptionalGroup_extension_liteBuilder {
                  return OptionalGroup_extension_lite.builderWithPrototype(result)
                }
                func build() -> OptionalGroup_extension_lite {
                     checkInitialized()
                     return buildPartial()
                }
                func buildPartial() -> OptionalGroup_extension_lite {
                  var returnMe:OptionalGroup_extension_lite = result
                  return returnMe
                }
                func mergeFrom(other:OptionalGroup_extension_lite) -> OptionalGroup_extension_liteBuilder {
                  if (other == OptionalGroup_extension_lite()) {
                    return self
                  }
                  if other.hasA {
                       a = other.a
                  }
                    mergeUnknownFields(other.unknownFields)
                  return self
                }
                override func mergeFromCodedInputStream(input:CodedInputStream) ->OptionalGroup_extension_liteBuilder {
                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                }
                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OptionalGroup_extension_liteBuilder {
                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                  while (true) {
                    var tag:Int32 = input.readTag()
                      if tag == 0 {
                           self.unknownFields = unknownFieldsBuilder.build()
                           return self}
                      else if tag == 136 {
                        a = input.readInt32()
                      }
                      else {
                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                unknownFields = unknownFieldsBuilder.build()
                                return self
                            }
                      }
                      }
                   }
                }

                func == (lhs: RepeatedGroup_extension_lite, rhs: RepeatedGroup_extension_lite) -> Bool {
                      if (lhs === rhs) {
                        return true
                      }
                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                      fieldCheck = fieldCheck && (lhs.hasA == rhs.hasA) && (!lhs.hasA || lhs.a == rhs.a)
                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                }
                class RepeatedGroup_extension_lite : GeneratedMessage {
                  private(set) var hasA:Bool = false
                  private(set) var a:Int32 = 0

                  override init() {
                       super.init()
                  }
                  override func isInitialized() -> Bool {
                    return true
                  }
                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                    if hasA {
                      output.writeInt32(47, value:a)
                    }
                    unknownFields.writeToCodedOutputStream(output)
                  }
                  override func serializedSize() -> Int32 {
                    var size:Int32 = memoizedSerializedSize
                    if size != -1 {
                      return size
                    }

                    size = 0
                    if hasA {
                      size += WireFormat.computeInt32Size(47, value:a)
                    }
                    size += unknownFields.serializedSize()
                    memoizedSerializedSize = size
                    return size
                  }
                  class func parseFromData(data:[Byte]) -> RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromData(data).build()
                  }
                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromInputStream(input:NSInputStream) -> RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromInputStream(input).build()
                  }
                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream) -> RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromCodedInputStream(input).build()
                  }
                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extension_lite {
                    return RepeatedGroup_extension_lite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                  }
                  class func builder() -> RepeatedGroup_extension_liteBuilder {
                    return RepeatedGroup_extension_liteBuilder()
                  }
                  class func builderWithPrototype(prototype:RepeatedGroup_extension_lite) -> RepeatedGroup_extension_liteBuilder {
                    return RepeatedGroup_extension_lite.builder().mergeFrom(prototype)
                  }
                  func builder() -> RepeatedGroup_extension_liteBuilder {
                    return RepeatedGroup_extension_lite.builder()
                  }
                  func toBuilder() -> RepeatedGroup_extension_liteBuilder {
                    return RepeatedGroup_extension_lite.builderWithPrototype(self)
                  }
                  override func writeDescriptionTo(inout output:String, indent:String) {
                    if hasA {
                      output += "\(indent) a: \(a) \n"
                    }
                    unknownFields.writeDescriptionTo(&output, indent:indent)
                  }
                  override var hashValue:Int {
                   get {
                        var hashCode:Int = 7
                        if hasA {
                           hashCode = (hashCode &* 31) &+ a.hashValue
                        }
                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                        return hashCode
                      }
                    }
                  }

                  class RepeatedGroup_extension_liteBuilder : GeneratedMessageBuilder {
                  private var result:RepeatedGroup_extension_lite

                  override init () {
                     result = RepeatedGroup_extension_lite()
                  }
                  var hasA:Bool {
                       get {
                            return result.hasA
                       }
                  }
                  var a:Int32 {
                       get {
                            return result.a
                       }
                       set (value) {
                           result.hasA = true
                           result.a = value
                       }
                  }
                  func clearA() -> RepeatedGroup_extension_liteBuilder{
                       result.hasA = false
                       result.a = 0
                       return self
                  }
                  override var internalGetResult:GeneratedMessage {
                       get {
                          return result
                       }
                  }
                  override func clear() -> RepeatedGroup_extension_liteBuilder {
                    result = RepeatedGroup_extension_lite()
                    return self
                  }
                  override func clone() -> RepeatedGroup_extension_liteBuilder {
                    return RepeatedGroup_extension_lite.builderWithPrototype(result)
                  }
                  func build() -> RepeatedGroup_extension_lite {
                       checkInitialized()
                       return buildPartial()
                  }
                  func buildPartial() -> RepeatedGroup_extension_lite {
                    var returnMe:RepeatedGroup_extension_lite = result
                    return returnMe
                  }
                  func mergeFrom(other:RepeatedGroup_extension_lite) -> RepeatedGroup_extension_liteBuilder {
                    if (other == RepeatedGroup_extension_lite()) {
                      return self
                    }
                    if other.hasA {
                         a = other.a
                    }
                      mergeUnknownFields(other.unknownFields)
                    return self
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream) ->RepeatedGroup_extension_liteBuilder {
                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                  }
                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RepeatedGroup_extension_liteBuilder {
                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                    while (true) {
                      var tag:Int32 = input.readTag()
                        if tag == 0 {
                             self.unknownFields = unknownFieldsBuilder.build()
                             return self}
                        else if tag == 376 {
                          a = input.readInt32()
                        }
                        else {
                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                  unknownFields = unknownFieldsBuilder.build()
                                  return self
                              }
                        }
                        }
                     }
                  }

                  func == (lhs: TestPackedExtensionsLite, rhs: TestPackedExtensionsLite) -> Bool {
                        if (lhs === rhs) {
                          return true
                        }
                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                        fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1), endExclusive:Int32(536870912))
                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                  }
                  class TestPackedExtensionsLite : ExtendableMessage {
                    override init() {
                         super.init()
                    }
                    override func isInitialized() -> Bool {
                      if !extensionsAreInitialized() {
                        return false
                      }
                      return true
                    }
                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                      writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1), endExclusive:Int32(536870912))
                      unknownFields.writeToCodedOutputStream(output)
                    }
                    override func serializedSize() -> Int32 {
                      var size:Int32 = memoizedSerializedSize
                      if size != -1 {
                        return size
                      }

                      size = 0
                      size += extensionsSerializedSize()
                      size += unknownFields.serializedSize()
                      memoizedSerializedSize = size
                      return size
                    }
                    class func parseFromData(data:[Byte]) -> TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromData(data).build()
                    }
                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromInputStream(input:NSInputStream) -> TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromInputStream(input).build()
                    }
                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromCodedInputStream(input).build()
                    }
                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedExtensionsLite {
                      return TestPackedExtensionsLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                    }
                    class func builder() -> TestPackedExtensionsLiteBuilder {
                      return TestPackedExtensionsLiteBuilder()
                    }
                    class func builderWithPrototype(prototype:TestPackedExtensionsLite) -> TestPackedExtensionsLiteBuilder {
                      return TestPackedExtensionsLite.builder().mergeFrom(prototype)
                    }
                    func builder() -> TestPackedExtensionsLiteBuilder {
                      return TestPackedExtensionsLite.builder()
                    }
                    func toBuilder() -> TestPackedExtensionsLiteBuilder {
                      return TestPackedExtensionsLite.builderWithPrototype(self)
                    }
                    override func writeDescriptionTo(inout output:String, indent:String) {
                      writeExtensionDescription(&output, startInclusive:Int32(1), endExclusive:Int32(536870912), indent:indent)
                      unknownFields.writeDescriptionTo(&output, indent:indent)
                    }
                    override var hashValue:Int {
                     get {
                          var hashCode:Int = 7
                          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1), endExclusive:Int32(536870912)))
                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                          return hashCode
                        }
                      }
                    }

                    class TestPackedExtensionsLiteBuilder : ExtendableMessageBuilder {
                    private var result:TestPackedExtensionsLite

                    override init () {
                       result = TestPackedExtensionsLite()
                    }
                    override var internalGetResult:ExtendableMessage {
                         get {
                             return result
                         }
                    }
                    override func clear() -> TestPackedExtensionsLiteBuilder {
                      result = TestPackedExtensionsLite()
                      return self
                    }
                    override func clone() -> TestPackedExtensionsLiteBuilder {
                      return TestPackedExtensionsLite.builderWithPrototype(result)
                    }
                    func build() -> TestPackedExtensionsLite {
                         checkInitialized()
                         return buildPartial()
                    }
                    func buildPartial() -> TestPackedExtensionsLite {
                      var returnMe:TestPackedExtensionsLite = result
                      return returnMe
                    }
                    func mergeFrom(other:TestPackedExtensionsLite) -> TestPackedExtensionsLiteBuilder {
                      if (other == TestPackedExtensionsLite()) {
                        return self
                      }
                      mergeExtensionFields(other)
                        mergeUnknownFields(other.unknownFields)
                      return self
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestPackedExtensionsLiteBuilder {
                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                    }
                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestPackedExtensionsLiteBuilder {
                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                      while (true) {
                        var tag:Int32 = input.readTag()
                          if tag == 0 {
                               self.unknownFields = unknownFieldsBuilder.build()
                               return self}
                          else {
                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                    unknownFields = unknownFieldsBuilder.build()
                                    return self
                                }
                          }
                          }
                       }
                    }

                    func == (lhs: TestNestedExtensionLite, rhs: TestNestedExtensionLite) -> Bool {
                          if (lhs === rhs) {
                            return true
                          }
                          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                          return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                    }
                    class TestNestedExtensionLite : GeneratedMessage {
                      var nestedExtension:ExtensionField {
                           get {
                               return TestNestedExtensionLite_nestedExtension
                           }
                      }
                      override init() {
                           super.init()
                      }
                      override func isInitialized() -> Bool {
                        return true
                      }
                      override func writeToCodedOutputStream(output:CodedOutputStream) {
                        unknownFields.writeToCodedOutputStream(output)
                      }
                      override func serializedSize() -> Int32 {
                        var size:Int32 = memoizedSerializedSize
                        if size != -1 {
                          return size
                        }

                        size = 0
                        size += unknownFields.serializedSize()
                        memoizedSerializedSize = size
                        return size
                      }
                      class func parseFromData(data:[Byte]) -> TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromData(data).build()
                      }
                      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromInputStream(input:NSInputStream) -> TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromInputStream(input).build()
                      }
                      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream) -> TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromCodedInputStream(input).build()
                      }
                      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedExtensionLite {
                        return TestNestedExtensionLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                      }
                      class func builder() -> TestNestedExtensionLiteBuilder {
                        return TestNestedExtensionLiteBuilder()
                      }
                      class func builderWithPrototype(prototype:TestNestedExtensionLite) -> TestNestedExtensionLiteBuilder {
                        return TestNestedExtensionLite.builder().mergeFrom(prototype)
                      }
                      func builder() -> TestNestedExtensionLiteBuilder {
                        return TestNestedExtensionLite.builder()
                      }
                      func toBuilder() -> TestNestedExtensionLiteBuilder {
                        return TestNestedExtensionLite.builderWithPrototype(self)
                      }
                      override func writeDescriptionTo(inout output:String, indent:String) {
                        unknownFields.writeDescriptionTo(&output, indent:indent)
                      }
                      override var hashValue:Int {
                       get {
                            var hashCode:Int = 7
                            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                            return hashCode
                          }
                        }
                      }

                      class TestNestedExtensionLiteBuilder : GeneratedMessageBuilder {
                      private var result:TestNestedExtensionLite

                      override init () {
                         result = TestNestedExtensionLite()
                      }
                      override var internalGetResult:GeneratedMessage {
                           get {
                              return result
                           }
                      }
                      override func clear() -> TestNestedExtensionLiteBuilder {
                        result = TestNestedExtensionLite()
                        return self
                      }
                      override func clone() -> TestNestedExtensionLiteBuilder {
                        return TestNestedExtensionLite.builderWithPrototype(result)
                      }
                      func build() -> TestNestedExtensionLite {
                           checkInitialized()
                           return buildPartial()
                      }
                      func buildPartial() -> TestNestedExtensionLite {
                        var returnMe:TestNestedExtensionLite = result
                        return returnMe
                      }
                      func mergeFrom(other:TestNestedExtensionLite) -> TestNestedExtensionLiteBuilder {
                        if (other == TestNestedExtensionLite()) {
                          return self
                        }
                          mergeUnknownFields(other.unknownFields)
                        return self
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestNestedExtensionLiteBuilder {
                           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                      }
                      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestNestedExtensionLiteBuilder {
                        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                        while (true) {
                          var tag:Int32 = input.readTag()
                            if tag == 0 {
                                 self.unknownFields = unknownFieldsBuilder.build()
                                 return self}
                            else {
                                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                      unknownFields = unknownFieldsBuilder.build()
                                      return self
                                  }
                            }
                            }
                         }
                      }

                      func == (lhs: TestDeprecatedLite, rhs: TestDeprecatedLite) -> Bool {
                            if (lhs === rhs) {
                              return true
                            }
                            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                            fieldCheck = fieldCheck && (lhs.hasDeprecatedField == rhs.hasDeprecatedField) && (!lhs.hasDeprecatedField || lhs.deprecatedField == rhs.deprecatedField)
                             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                      }
                      class TestDeprecatedLite : GeneratedMessage {
                        private(set) var hasDeprecatedField:Bool = false
                        private(set) var deprecatedField:Int32 = 0

                        override init() {
                             super.init()
                        }
                        override func isInitialized() -> Bool {
                          return true
                        }
                        override func writeToCodedOutputStream(output:CodedOutputStream) {
                          if hasDeprecatedField {
                            output.writeInt32(1, value:deprecatedField)
                          }
                          unknownFields.writeToCodedOutputStream(output)
                        }
                        override func serializedSize() -> Int32 {
                          var size:Int32 = memoizedSerializedSize
                          if size != -1 {
                            return size
                          }

                          size = 0
                          if hasDeprecatedField {
                            size += WireFormat.computeInt32Size(1, value:deprecatedField)
                          }
                          size += unknownFields.serializedSize()
                          memoizedSerializedSize = size
                          return size
                        }
                        class func parseFromData(data:[Byte]) -> TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromData(data).build()
                        }
                        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromInputStream(input:NSInputStream) -> TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromInputStream(input).build()
                        }
                        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream) -> TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromCodedInputStream(input).build()
                        }
                        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDeprecatedLite {
                          return TestDeprecatedLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                        }
                        class func builder() -> TestDeprecatedLiteBuilder {
                          return TestDeprecatedLiteBuilder()
                        }
                        class func builderWithPrototype(prototype:TestDeprecatedLite) -> TestDeprecatedLiteBuilder {
                          return TestDeprecatedLite.builder().mergeFrom(prototype)
                        }
                        func builder() -> TestDeprecatedLiteBuilder {
                          return TestDeprecatedLite.builder()
                        }
                        func toBuilder() -> TestDeprecatedLiteBuilder {
                          return TestDeprecatedLite.builderWithPrototype(self)
                        }
                        override func writeDescriptionTo(inout output:String, indent:String) {
                          if hasDeprecatedField {
                            output += "\(indent) deprecatedField: \(deprecatedField) \n"
                          }
                          unknownFields.writeDescriptionTo(&output, indent:indent)
                        }
                        override var hashValue:Int {
                         get {
                              var hashCode:Int = 7
                              if hasDeprecatedField {
                                 hashCode = (hashCode &* 31) &+ deprecatedField.hashValue
                              }
                              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                              return hashCode
                            }
                          }
                        }

                        class TestDeprecatedLiteBuilder : GeneratedMessageBuilder {
                        private var result:TestDeprecatedLite

                        override init () {
                           result = TestDeprecatedLite()
                        }
                        var hasDeprecatedField:Bool {
                             get {
                                  return result.hasDeprecatedField
                             }
                        }
                        var deprecatedField:Int32 {
                             get {
                                  return result.deprecatedField
                             }
                             set (value) {
                                 result.hasDeprecatedField = true
                                 result.deprecatedField = value
                             }
                        }
                        func clearDeprecatedField() -> TestDeprecatedLiteBuilder{
                             result.hasDeprecatedField = false
                             result.deprecatedField = 0
                             return self
                        }
                        override var internalGetResult:GeneratedMessage {
                             get {
                                return result
                             }
                        }
                        override func clear() -> TestDeprecatedLiteBuilder {
                          result = TestDeprecatedLite()
                          return self
                        }
                        override func clone() -> TestDeprecatedLiteBuilder {
                          return TestDeprecatedLite.builderWithPrototype(result)
                        }
                        func build() -> TestDeprecatedLite {
                             checkInitialized()
                             return buildPartial()
                        }
                        func buildPartial() -> TestDeprecatedLite {
                          var returnMe:TestDeprecatedLite = result
                          return returnMe
                        }
                        func mergeFrom(other:TestDeprecatedLite) -> TestDeprecatedLiteBuilder {
                          if (other == TestDeprecatedLite()) {
                            return self
                          }
                          if other.hasDeprecatedField {
                               deprecatedField = other.deprecatedField
                          }
                            mergeUnknownFields(other.unknownFields)
                          return self
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestDeprecatedLiteBuilder {
                             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                        }
                        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestDeprecatedLiteBuilder {
                          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                          while (true) {
                            var tag:Int32 = input.readTag()
                              if tag == 0 {
                                   self.unknownFields = unknownFieldsBuilder.build()
                                   return self}
                              else if tag == 8 {
                                deprecatedField = input.readInt32()
                              }
                              else {
                                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                        unknownFields = unknownFieldsBuilder.build()
                                        return self
                                    }
                              }
                              }
                           }
                        }

                        func == (lhs: TestParsingMergeLite, rhs: TestParsingMergeLite) -> Bool {
                              if (lhs === rhs) {
                                return true
                              }
                              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                              fieldCheck = fieldCheck && (lhs.hasRequiredAllTypes == rhs.hasRequiredAllTypes) && (!lhs.hasRequiredAllTypes || lhs.requiredAllTypes == rhs.requiredAllTypes)
                               fieldCheck = fieldCheck && (lhs.hasOptionalAllTypes == rhs.hasOptionalAllTypes) && (!lhs.hasOptionalAllTypes || lhs.optionalAllTypes == rhs.optionalAllTypes)
                               fieldCheck = fieldCheck && (lhs.repeatedAllTypes == rhs.repeatedAllTypes)
                               fieldCheck = fieldCheck && (lhs.hasOptionalGroup == rhs.hasOptionalGroup) && (!lhs.hasOptionalGroup || lhs.optionalGroup == rhs.optionalGroup)
                               fieldCheck = fieldCheck && (lhs.repeatedGroup == rhs.repeatedGroup)
                               fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                        }
                        class TestParsingMergeLite : ExtendableMessage {
                          private(set) var hasRequiredAllTypes:Bool = false
                          private(set) var requiredAllTypes:TestAllTypesLite = TestAllTypesLite()
                          private(set) var hasOptionalAllTypes:Bool = false
                          private(set) var optionalAllTypes:TestAllTypesLite = TestAllTypesLite()
                          private(set) var hasOptionalGroup:Bool = false
                          private(set) var optionalGroup:TestParsingMergeLiteOptionalGroup = TestParsingMergeLiteOptionalGroup()
                          var optionalExt:ExtensionField {
                               get {
                                   return TestParsingMergeLite_optionalExt
                               }
                          }
                          var repeatedExt:ExtensionField {
                               get {
                                   return TestParsingMergeLite_repeatedExt
                               }
                          }
                          private(set) var repeatedAllTypes:[TestAllTypesLite]  = [TestAllTypesLite]()
                          private(set) var repeatedGroup:[TestParsingMergeLiteRepeatedGroup]  = [TestParsingMergeLiteRepeatedGroup]()
                          override init() {
                               super.init()
                          }
                          override func isInitialized() -> Bool {
                            if !hasRequiredAllTypes {
                              return false
                            }
                            if !extensionsAreInitialized() {
                              return false
                            }
                            return true
                          }
                          override func writeToCodedOutputStream(output:CodedOutputStream) {
                            if hasRequiredAllTypes {
                              output.writeMessage(1, value:requiredAllTypes)
                            }
                            if hasOptionalAllTypes {
                              output.writeMessage(2, value:optionalAllTypes)
                            }
                            for element in repeatedAllTypes {
                                output.writeMessage(3, value:element)
                            }
                            if hasOptionalGroup {
                              output.writeGroup(10, value:optionalGroup)
                            }
                            for element in repeatedGroup {
                                output.writeGroup(20, value:element)
                            }
                            writeExtensionsToCodedOutputStream(output, startInclusive:Int32(1000), endExclusive:Int32(536870912))
                            unknownFields.writeToCodedOutputStream(output)
                          }
                          override func serializedSize() -> Int32 {
                            var size:Int32 = memoizedSerializedSize
                            if size != -1 {
                              return size
                            }

                            size = 0
                            if hasRequiredAllTypes {
                              size += WireFormat.computeMessageSize(1, value:requiredAllTypes)
                            }
                            if hasOptionalAllTypes {
                              size += WireFormat.computeMessageSize(2, value:optionalAllTypes)
                            }
                            for element in repeatedAllTypes {
                                size += WireFormat.computeMessageSize(3, value:element)
                            }
                            if hasOptionalGroup {
                              size += WireFormat.computeGroupSize(10, value:optionalGroup)
                            }
                            for element in repeatedGroup {
                                size += WireFormat.computeGroupSize(20, value:element)
                            }
                            size += extensionsSerializedSize()
                            size += unknownFields.serializedSize()
                            memoizedSerializedSize = size
                            return size
                          }
                          class func parseFromData(data:[Byte]) -> TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromData(data).build()
                          }
                          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromInputStream(input).build()
                          }
                          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromCodedInputStream(input).build()
                          }
                          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLite {
                            return TestParsingMergeLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                          }
                          class func builder() -> TestParsingMergeLiteBuilder {
                            return TestParsingMergeLiteBuilder()
                          }
                          class func builderWithPrototype(prototype:TestParsingMergeLite) -> TestParsingMergeLiteBuilder {
                            return TestParsingMergeLite.builder().mergeFrom(prototype)
                          }
                          func builder() -> TestParsingMergeLiteBuilder {
                            return TestParsingMergeLite.builder()
                          }
                          func toBuilder() -> TestParsingMergeLiteBuilder {
                            return TestParsingMergeLite.builderWithPrototype(self)
                          }
                          override func writeDescriptionTo(inout output:String, indent:String) {
                            if hasRequiredAllTypes {
                              output += "\(indent) requiredAllTypes {\n"
                              requiredAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent) }\n"
                            }
                            if hasOptionalAllTypes {
                              output += "\(indent) optionalAllTypes {\n"
                              optionalAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent) }\n"
                            }
                            var repeatedAllTypesElementIndex:Int = 0
                            for element in repeatedAllTypes {
                                output += "\(indent) repeatedAllTypes[\(repeatedAllTypesElementIndex)] {\n"
                                element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                output += "\(indent)}\n"
                                repeatedAllTypesElementIndex++
                            }
                            if hasOptionalGroup {
                              output += "\(indent) optionalGroup {\n"
                              optionalGroup.writeDescriptionTo(&output, indent:"\(indent)  ")
                              output += "\(indent) }\n"
                            }
                            var repeatedGroupElementIndex:Int = 0
                            for element in repeatedGroup {
                                output += "\(indent) repeatedGroup[\(repeatedGroupElementIndex)] {\n"
                                element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                output += "\(indent)}\n"
                                repeatedGroupElementIndex++
                            }
                            writeExtensionDescription(&output, startInclusive:Int32(1000), endExclusive:Int32(536870912), indent:indent)
                            unknownFields.writeDescriptionTo(&output, indent:indent)
                          }
                          override var hashValue:Int {
                           get {
                                var hashCode:Int = 7
                                if hasRequiredAllTypes {
                                  hashCode = (hashCode &* 31) &+ requiredAllTypes.hashValue
                                }
                                if hasOptionalAllTypes {
                                  hashCode = (hashCode &* 31) &+ optionalAllTypes.hashValue
                                }
                                for element in repeatedAllTypes {
                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                }
                                if hasOptionalGroup {
                                  hashCode = (hashCode &* 31) &+ optionalGroup.hashValue
                                }
                                for element in repeatedGroup {
                                    hashCode = (hashCode &* 31) &+ element.hashValue
                                }
                                hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(1000), endExclusive:Int32(536870912)))
                                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                return hashCode
                              }
                            }
                          }

                          func == (lhs: TestParsingMergeLiteRepeatedFieldsGenerator, rhs: TestParsingMergeLiteRepeatedFieldsGenerator) -> Bool {
                                if (lhs === rhs) {
                                  return true
                                }
                                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                fieldCheck = fieldCheck && (lhs.field1 == rhs.field1)
                                 fieldCheck = fieldCheck && (lhs.field2 == rhs.field2)
                                 fieldCheck = fieldCheck && (lhs.field3 == rhs.field3)
                                 fieldCheck = fieldCheck && (lhs.group1 == rhs.group1)
                                 fieldCheck = fieldCheck && (lhs.group2 == rhs.group2)
                                 fieldCheck = fieldCheck && (lhs.ext1 == rhs.ext1)
                                 fieldCheck = fieldCheck && (lhs.ext2 == rhs.ext2)
                                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                          }
                          class TestParsingMergeLiteRepeatedFieldsGenerator : GeneratedMessage {
                            private(set) var field1:[TestAllTypesLite]  = [TestAllTypesLite]()
                            private(set) var field2:[TestAllTypesLite]  = [TestAllTypesLite]()
                            private(set) var field3:[TestAllTypesLite]  = [TestAllTypesLite]()
                            private(set) var group1:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1]  = [TestParsingMergeLiteRepeatedFieldsGeneratorGroup1]()
                            private(set) var group2:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2]  = [TestParsingMergeLiteRepeatedFieldsGeneratorGroup2]()
                            private(set) var ext1:[TestAllTypesLite]  = [TestAllTypesLite]()
                            private(set) var ext2:[TestAllTypesLite]  = [TestAllTypesLite]()
                            override init() {
                                 super.init()
                            }
                            override func isInitialized() -> Bool {
                              return true
                            }
                            override func writeToCodedOutputStream(output:CodedOutputStream) {
                              for element in field1 {
                                  output.writeMessage(1, value:element)
                              }
                              for element in field2 {
                                  output.writeMessage(2, value:element)
                              }
                              for element in field3 {
                                  output.writeMessage(3, value:element)
                              }
                              for element in group1 {
                                  output.writeGroup(10, value:element)
                              }
                              for element in group2 {
                                  output.writeGroup(20, value:element)
                              }
                              for element in ext1 {
                                  output.writeMessage(1000, value:element)
                              }
                              for element in ext2 {
                                  output.writeMessage(1001, value:element)
                              }
                              unknownFields.writeToCodedOutputStream(output)
                            }
                            override func serializedSize() -> Int32 {
                              var size:Int32 = memoizedSerializedSize
                              if size != -1 {
                                return size
                              }

                              size = 0
                              for element in field1 {
                                  size += WireFormat.computeMessageSize(1, value:element)
                              }
                              for element in field2 {
                                  size += WireFormat.computeMessageSize(2, value:element)
                              }
                              for element in field3 {
                                  size += WireFormat.computeMessageSize(3, value:element)
                              }
                              for element in group1 {
                                  size += WireFormat.computeGroupSize(10, value:element)
                              }
                              for element in group2 {
                                  size += WireFormat.computeGroupSize(20, value:element)
                              }
                              for element in ext1 {
                                  size += WireFormat.computeMessageSize(1000, value:element)
                              }
                              for element in ext2 {
                                  size += WireFormat.computeMessageSize(1001, value:element)
                              }
                              size += unknownFields.serializedSize()
                              memoizedSerializedSize = size
                              return size
                            }
                            class func parseFromData(data:[Byte]) -> TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromData(data).build()
                            }
                            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromInputStream(input).build()
                            }
                            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input).build()
                            }
                            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGenerator {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                            }
                            class func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                              return TestParsingMergeLiteRepeatedFieldsGeneratorBuilder()
                            }
                            class func builderWithPrototype(prototype:TestParsingMergeLiteRepeatedFieldsGenerator) -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder().mergeFrom(prototype)
                            }
                            func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builder()
                            }
                            func toBuilder() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                              return TestParsingMergeLiteRepeatedFieldsGenerator.builderWithPrototype(self)
                            }
                            override func writeDescriptionTo(inout output:String, indent:String) {
                              var field1ElementIndex:Int = 0
                              for element in field1 {
                                  output += "\(indent) field1[\(field1ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  field1ElementIndex++
                              }
                              var field2ElementIndex:Int = 0
                              for element in field2 {
                                  output += "\(indent) field2[\(field2ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  field2ElementIndex++
                              }
                              var field3ElementIndex:Int = 0
                              for element in field3 {
                                  output += "\(indent) field3[\(field3ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  field3ElementIndex++
                              }
                              var group1ElementIndex:Int = 0
                              for element in group1 {
                                  output += "\(indent) group1[\(group1ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  group1ElementIndex++
                              }
                              var group2ElementIndex:Int = 0
                              for element in group2 {
                                  output += "\(indent) group2[\(group2ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  group2ElementIndex++
                              }
                              var ext1ElementIndex:Int = 0
                              for element in ext1 {
                                  output += "\(indent) ext1[\(ext1ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  ext1ElementIndex++
                              }
                              var ext2ElementIndex:Int = 0
                              for element in ext2 {
                                  output += "\(indent) ext2[\(ext2ElementIndex)] {\n"
                                  element.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent)}\n"
                                  ext2ElementIndex++
                              }
                              unknownFields.writeDescriptionTo(&output, indent:indent)
                            }
                            override var hashValue:Int {
                             get {
                                  var hashCode:Int = 7
                                  for element in field1 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in field2 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in field3 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in group1 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in group2 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in ext1 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  for element in ext2 {
                                      hashCode = (hashCode &* 31) &+ element.hashValue
                                  }
                                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                  return hashCode
                                }
                              }
                            }

                            func == (lhs: TestParsingMergeLiteRepeatedFieldsGeneratorGroup1, rhs: TestParsingMergeLiteRepeatedFieldsGeneratorGroup1) -> Bool {
                                  if (lhs === rhs) {
                                    return true
                                  }
                                  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                  fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
                                   return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                            }
                            class TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 : GeneratedMessage {
                              private(set) var hasField1:Bool = false
                              private(set) var field1:TestAllTypesLite = TestAllTypesLite()
                              override init() {
                                   super.init()
                              }
                              override func isInitialized() -> Bool {
                                return true
                              }
                              override func writeToCodedOutputStream(output:CodedOutputStream) {
                                if hasField1 {
                                  output.writeMessage(11, value:field1)
                                }
                                unknownFields.writeToCodedOutputStream(output)
                              }
                              override func serializedSize() -> Int32 {
                                var size:Int32 = memoizedSerializedSize
                                if size != -1 {
                                  return size
                                }

                                size = 0
                                if hasField1 {
                                  size += WireFormat.computeMessageSize(11, value:field1)
                                }
                                size += unknownFields.serializedSize()
                                memoizedSerializedSize = size
                                return size
                              }
                              class func parseFromData(data:[Byte]) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromData(data).build()
                              }
                              class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromInputStream(input).build()
                              }
                              class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromCodedInputStream(input).build()
                              }
                              class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                              }
                              class func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder()
                              }
                              class func builderWithPrototype(prototype:TestParsingMergeLiteRepeatedFieldsGeneratorGroup1) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder().mergeFrom(prototype)
                              }
                              func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder()
                              }
                              func toBuilder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builderWithPrototype(self)
                              }
                              override func writeDescriptionTo(inout output:String, indent:String) {
                                if hasField1 {
                                  output += "\(indent) field1 {\n"
                                  field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                                  output += "\(indent) }\n"
                                }
                                unknownFields.writeDescriptionTo(&output, indent:indent)
                              }
                              override var hashValue:Int {
                               get {
                                    var hashCode:Int = 7
                                    if hasField1 {
                                      hashCode = (hashCode &* 31) &+ field1.hashValue
                                    }
                                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                    return hashCode
                                  }
                                }
                              }

                              class TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder : GeneratedMessageBuilder {
                              private var result:TestParsingMergeLiteRepeatedFieldsGeneratorGroup1

                              override init () {
                                 result = TestParsingMergeLiteRepeatedFieldsGeneratorGroup1()
                              }
                              var hasField1:Bool {
                                   get {
                                       return result.hasField1
                                   }
                              }
                              var field1:TestAllTypesLite {
                                   get {
                                       return result.field1     }
                                   set (value) {
                                       result.hasField1 = true
                                       result.field1 = value
                                   }
                              }
                              func setField1Builder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                field1 = builderForValue.build()
                                return self
                              }
                              func mergeField1(value:TestAllTypesLite) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                if (result.hasField1 && result.field1 != TestAllTypesLite()) {
                                  result.field1 = TestAllTypesLite.builderWithPrototype(result.field1).mergeFrom(value).buildPartial()
                                } else {
                                  result.field1 = value
                                }
                                result.hasField1 = true
                                return self
                              }
                              func clearField1() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                result.hasField1 = false
                                result.field1 = TestAllTypesLite()
                                return self
                              }
                              override var internalGetResult:GeneratedMessage {
                                   get {
                                      return result
                                   }
                              }
                              override func clear() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                result = TestParsingMergeLiteRepeatedFieldsGeneratorGroup1()
                                return self
                              }
                              override func clone() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                return TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builderWithPrototype(result)
                              }
                              func build() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                   checkInitialized()
                                   return buildPartial()
                              }
                              func buildPartial() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 {
                                var returnMe:TestParsingMergeLiteRepeatedFieldsGeneratorGroup1 = result
                                return returnMe
                              }
                              func mergeFrom(other:TestParsingMergeLiteRepeatedFieldsGeneratorGroup1) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                if (other == TestParsingMergeLiteRepeatedFieldsGeneratorGroup1()) {
                                  return self
                                }
                                if (other.hasField1) {
                                    mergeField1(other.field1)
                                }
                                  mergeUnknownFields(other.unknownFields)
                                return self
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                              }
                              override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup1Builder {
                                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                while (true) {
                                  var tag:Int32 = input.readTag()
                                    if tag == 0 {
                                         self.unknownFields = unknownFieldsBuilder.build()
                                         return self}
                                    else if tag == 90 {
                                      var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                      if hasField1 {
                                        subBuilder.mergeFrom(field1)
                                      }
                                      input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                      field1 = subBuilder.buildPartial()
                                    }
                                    else {
                                          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                              unknownFields = unknownFieldsBuilder.build()
                                              return self
                                          }
                                    }
                                    }
                                 }
                              }

                              func == (lhs: TestParsingMergeLiteRepeatedFieldsGeneratorGroup2, rhs: TestParsingMergeLiteRepeatedFieldsGeneratorGroup2) -> Bool {
                                    if (lhs === rhs) {
                                      return true
                                    }
                                    var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                    fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
                                     return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                              }
                              class TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 : GeneratedMessage {
                                private(set) var hasField1:Bool = false
                                private(set) var field1:TestAllTypesLite = TestAllTypesLite()
                                override init() {
                                     super.init()
                                }
                                override func isInitialized() -> Bool {
                                  return true
                                }
                                override func writeToCodedOutputStream(output:CodedOutputStream) {
                                  if hasField1 {
                                    output.writeMessage(21, value:field1)
                                  }
                                  unknownFields.writeToCodedOutputStream(output)
                                }
                                override func serializedSize() -> Int32 {
                                  var size:Int32 = memoizedSerializedSize
                                  if size != -1 {
                                    return size
                                  }

                                  size = 0
                                  if hasField1 {
                                    size += WireFormat.computeMessageSize(21, value:field1)
                                  }
                                  size += unknownFields.serializedSize()
                                  memoizedSerializedSize = size
                                  return size
                                }
                                class func parseFromData(data:[Byte]) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromData(data).build()
                                }
                                class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromInputStream(input).build()
                                }
                                class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromCodedInputStream(input).build()
                                }
                                class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                }
                                class func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder()
                                }
                                class func builderWithPrototype(prototype:TestParsingMergeLiteRepeatedFieldsGeneratorGroup2) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder().mergeFrom(prototype)
                                }
                                func builder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder()
                                }
                                func toBuilder() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builderWithPrototype(self)
                                }
                                override func writeDescriptionTo(inout output:String, indent:String) {
                                  if hasField1 {
                                    output += "\(indent) field1 {\n"
                                    field1.writeDescriptionTo(&output, indent:"\(indent)  ")
                                    output += "\(indent) }\n"
                                  }
                                  unknownFields.writeDescriptionTo(&output, indent:indent)
                                }
                                override var hashValue:Int {
                                 get {
                                      var hashCode:Int = 7
                                      if hasField1 {
                                        hashCode = (hashCode &* 31) &+ field1.hashValue
                                      }
                                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                      return hashCode
                                    }
                                  }
                                }

                                class TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder : GeneratedMessageBuilder {
                                private var result:TestParsingMergeLiteRepeatedFieldsGeneratorGroup2

                                override init () {
                                   result = TestParsingMergeLiteRepeatedFieldsGeneratorGroup2()
                                }
                                var hasField1:Bool {
                                     get {
                                         return result.hasField1
                                     }
                                }
                                var field1:TestAllTypesLite {
                                     get {
                                         return result.field1     }
                                     set (value) {
                                         result.hasField1 = true
                                         result.field1 = value
                                     }
                                }
                                func setField1Builder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  field1 = builderForValue.build()
                                  return self
                                }
                                func mergeField1(value:TestAllTypesLite) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  if (result.hasField1 && result.field1 != TestAllTypesLite()) {
                                    result.field1 = TestAllTypesLite.builderWithPrototype(result.field1).mergeFrom(value).buildPartial()
                                  } else {
                                    result.field1 = value
                                  }
                                  result.hasField1 = true
                                  return self
                                }
                                func clearField1() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  result.hasField1 = false
                                  result.field1 = TestAllTypesLite()
                                  return self
                                }
                                override var internalGetResult:GeneratedMessage {
                                     get {
                                        return result
                                     }
                                }
                                override func clear() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  result = TestParsingMergeLiteRepeatedFieldsGeneratorGroup2()
                                  return self
                                }
                                override func clone() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  return TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builderWithPrototype(result)
                                }
                                func build() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                     checkInitialized()
                                     return buildPartial()
                                }
                                func buildPartial() -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 {
                                  var returnMe:TestParsingMergeLiteRepeatedFieldsGeneratorGroup2 = result
                                  return returnMe
                                }
                                func mergeFrom(other:TestParsingMergeLiteRepeatedFieldsGeneratorGroup2) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  if (other == TestParsingMergeLiteRepeatedFieldsGeneratorGroup2()) {
                                    return self
                                  }
                                  if (other.hasField1) {
                                      mergeField1(other.field1)
                                  }
                                    mergeUnknownFields(other.unknownFields)
                                  return self
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorGroup2Builder {
                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                  while (true) {
                                    var tag:Int32 = input.readTag()
                                      if tag == 0 {
                                           self.unknownFields = unknownFieldsBuilder.build()
                                           return self}
                                      else if tag == 170 {
                                        var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                        if hasField1 {
                                          subBuilder.mergeFrom(field1)
                                        }
                                        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                        field1 = subBuilder.buildPartial()
                                      }
                                      else {
                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                unknownFields = unknownFieldsBuilder.build()
                                                return self
                                            }
                                      }
                                      }
                                   }
                                }

                                class TestParsingMergeLiteRepeatedFieldsGeneratorBuilder : GeneratedMessageBuilder {
                                private var result:TestParsingMergeLiteRepeatedFieldsGenerator

                                override init () {
                                   result = TestParsingMergeLiteRepeatedFieldsGenerator()
                                }
                                var field1:[TestAllTypesLite] {
                                     get {
                                         return result.field1
                                     }
                                     set (value) {
                                         result.field1 = value
                                     }
                                }
                                func clearField1() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.field1.removeAll(keepCapacity: false)
                                  return self
                                }
                                var field2:[TestAllTypesLite] {
                                     get {
                                         return result.field2
                                     }
                                     set (value) {
                                         result.field2 = value
                                     }
                                }
                                func clearField2() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.field2.removeAll(keepCapacity: false)
                                  return self
                                }
                                var field3:[TestAllTypesLite] {
                                     get {
                                         return result.field3
                                     }
                                     set (value) {
                                         result.field3 = value
                                     }
                                }
                                func clearField3() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.field3.removeAll(keepCapacity: false)
                                  return self
                                }
                                var group1:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup1] {
                                     get {
                                         return result.group1
                                     }
                                     set (value) {
                                         result.group1 = value
                                     }
                                }
                                func clearGroup1() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.group1.removeAll(keepCapacity: false)
                                  return self
                                }
                                var group2:[TestParsingMergeLiteRepeatedFieldsGeneratorGroup2] {
                                     get {
                                         return result.group2
                                     }
                                     set (value) {
                                         result.group2 = value
                                     }
                                }
                                func clearGroup2() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.group2.removeAll(keepCapacity: false)
                                  return self
                                }
                                var ext1:[TestAllTypesLite] {
                                     get {
                                         return result.ext1
                                     }
                                     set (value) {
                                         result.ext1 = value
                                     }
                                }
                                func clearExt1() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.ext1.removeAll(keepCapacity: false)
                                  return self
                                }
                                var ext2:[TestAllTypesLite] {
                                     get {
                                         return result.ext2
                                     }
                                     set (value) {
                                         result.ext2 = value
                                     }
                                }
                                func clearExt2() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result.ext2.removeAll(keepCapacity: false)
                                  return self
                                }
                                override var internalGetResult:GeneratedMessage {
                                     get {
                                        return result
                                     }
                                }
                                override func clear() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  result = TestParsingMergeLiteRepeatedFieldsGenerator()
                                  return self
                                }
                                override func clone() -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  return TestParsingMergeLiteRepeatedFieldsGenerator.builderWithPrototype(result)
                                }
                                func build() -> TestParsingMergeLiteRepeatedFieldsGenerator {
                                     checkInitialized()
                                     return buildPartial()
                                }
                                func buildPartial() -> TestParsingMergeLiteRepeatedFieldsGenerator {
                                  var returnMe:TestParsingMergeLiteRepeatedFieldsGenerator = result
                                  return returnMe
                                }
                                func mergeFrom(other:TestParsingMergeLiteRepeatedFieldsGenerator) -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  if (other == TestParsingMergeLiteRepeatedFieldsGenerator()) {
                                    return self
                                  }
                                  if !other.field1.isEmpty  {
                                     result.field1 += other.field1
                                  }
                                  if !other.field2.isEmpty  {
                                     result.field2 += other.field2
                                  }
                                  if !other.field3.isEmpty  {
                                     result.field3 += other.field3
                                  }
                                  if !other.group1.isEmpty  {
                                     result.group1 += other.group1
                                  }
                                  if !other.group2.isEmpty  {
                                     result.group2 += other.group2
                                  }
                                  if !other.ext1.isEmpty  {
                                     result.ext1 += other.ext1
                                  }
                                  if !other.ext2.isEmpty  {
                                     result.ext2 += other.ext2
                                  }
                                    mergeUnknownFields(other.unknownFields)
                                  return self
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                     return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                }
                                override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedFieldsGeneratorBuilder {
                                  var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                  while (true) {
                                    var tag:Int32 = input.readTag()
                                      if tag == 0 {
                                           self.unknownFields = unknownFieldsBuilder.build()
                                           return self}
                                      else if tag == 10 {
                                        var subBuilder = TestAllTypesLite.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        field1 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 18 {
                                        var subBuilder = TestAllTypesLite.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        field2 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 26 {
                                        var subBuilder = TestAllTypesLite.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        field3 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 83 {
                                        var subBuilder = TestParsingMergeLiteRepeatedFieldsGeneratorGroup1.builder()
                                        input.readGroup(10,builder:subBuilder,extensionRegistry:extensionRegistry)
                                        group1 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 163 {
                                        var subBuilder = TestParsingMergeLiteRepeatedFieldsGeneratorGroup2.builder()
                                        input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
                                        group2 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 8002 {
                                        var subBuilder = TestAllTypesLite.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        ext1 += [subBuilder.buildPartial()]
                                      }
                                      else if tag == 8010 {
                                        var subBuilder = TestAllTypesLite.builder()
                                        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                        ext2 += [subBuilder.buildPartial()]
                                      }
                                      else {
                                            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                unknownFields = unknownFieldsBuilder.build()
                                                return self
                                            }
                                      }
                                      }
                                   }
                                }

                                func == (lhs: TestParsingMergeLiteOptionalGroup, rhs: TestParsingMergeLiteOptionalGroup) -> Bool {
                                      if (lhs === rhs) {
                                        return true
                                      }
                                      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                      fieldCheck = fieldCheck && (lhs.hasOptionalGroupAllTypes == rhs.hasOptionalGroupAllTypes) && (!lhs.hasOptionalGroupAllTypes || lhs.optionalGroupAllTypes == rhs.optionalGroupAllTypes)
                                       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                }
                                class TestParsingMergeLiteOptionalGroup : GeneratedMessage {
                                  private(set) var hasOptionalGroupAllTypes:Bool = false
                                  private(set) var optionalGroupAllTypes:TestAllTypesLite = TestAllTypesLite()
                                  override init() {
                                       super.init()
                                  }
                                  override func isInitialized() -> Bool {
                                    return true
                                  }
                                  override func writeToCodedOutputStream(output:CodedOutputStream) {
                                    if hasOptionalGroupAllTypes {
                                      output.writeMessage(11, value:optionalGroupAllTypes)
                                    }
                                    unknownFields.writeToCodedOutputStream(output)
                                  }
                                  override func serializedSize() -> Int32 {
                                    var size:Int32 = memoizedSerializedSize
                                    if size != -1 {
                                      return size
                                    }

                                    size = 0
                                    if hasOptionalGroupAllTypes {
                                      size += WireFormat.computeMessageSize(11, value:optionalGroupAllTypes)
                                    }
                                    size += unknownFields.serializedSize()
                                    memoizedSerializedSize = size
                                    return size
                                  }
                                  class func parseFromData(data:[Byte]) -> TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromData(data).build()
                                  }
                                  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromInputStream(input).build()
                                  }
                                  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromCodedInputStream(input).build()
                                  }
                                  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteOptionalGroup {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                  }
                                  class func builder() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    return TestParsingMergeLiteOptionalGroupBuilder()
                                  }
                                  class func builderWithPrototype(prototype:TestParsingMergeLiteOptionalGroup) -> TestParsingMergeLiteOptionalGroupBuilder {
                                    return TestParsingMergeLiteOptionalGroup.builder().mergeFrom(prototype)
                                  }
                                  func builder() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    return TestParsingMergeLiteOptionalGroup.builder()
                                  }
                                  func toBuilder() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    return TestParsingMergeLiteOptionalGroup.builderWithPrototype(self)
                                  }
                                  override func writeDescriptionTo(inout output:String, indent:String) {
                                    if hasOptionalGroupAllTypes {
                                      output += "\(indent) optionalGroupAllTypes {\n"
                                      optionalGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                      output += "\(indent) }\n"
                                    }
                                    unknownFields.writeDescriptionTo(&output, indent:indent)
                                  }
                                  override var hashValue:Int {
                                   get {
                                        var hashCode:Int = 7
                                        if hasOptionalGroupAllTypes {
                                          hashCode = (hashCode &* 31) &+ optionalGroupAllTypes.hashValue
                                        }
                                        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                        return hashCode
                                      }
                                    }
                                  }

                                  class TestParsingMergeLiteOptionalGroupBuilder : GeneratedMessageBuilder {
                                  private var result:TestParsingMergeLiteOptionalGroup

                                  override init () {
                                     result = TestParsingMergeLiteOptionalGroup()
                                  }
                                  var hasOptionalGroupAllTypes:Bool {
                                       get {
                                           return result.hasOptionalGroupAllTypes
                                       }
                                  }
                                  var optionalGroupAllTypes:TestAllTypesLite {
                                       get {
                                           return result.optionalGroupAllTypes     }
                                       set (value) {
                                           result.hasOptionalGroupAllTypes = true
                                           result.optionalGroupAllTypes = value
                                       }
                                  }
                                  func setOptionalGroupAllTypesBuilder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteOptionalGroupBuilder {
                                    optionalGroupAllTypes = builderForValue.build()
                                    return self
                                  }
                                  func mergeOptionalGroupAllTypes(value:TestAllTypesLite) -> TestParsingMergeLiteOptionalGroupBuilder {
                                    if (result.hasOptionalGroupAllTypes && result.optionalGroupAllTypes != TestAllTypesLite()) {
                                      result.optionalGroupAllTypes = TestAllTypesLite.builderWithPrototype(result.optionalGroupAllTypes).mergeFrom(value).buildPartial()
                                    } else {
                                      result.optionalGroupAllTypes = value
                                    }
                                    result.hasOptionalGroupAllTypes = true
                                    return self
                                  }
                                  func clearOptionalGroupAllTypes() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    result.hasOptionalGroupAllTypes = false
                                    result.optionalGroupAllTypes = TestAllTypesLite()
                                    return self
                                  }
                                  override var internalGetResult:GeneratedMessage {
                                       get {
                                          return result
                                       }
                                  }
                                  override func clear() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    result = TestParsingMergeLiteOptionalGroup()
                                    return self
                                  }
                                  override func clone() -> TestParsingMergeLiteOptionalGroupBuilder {
                                    return TestParsingMergeLiteOptionalGroup.builderWithPrototype(result)
                                  }
                                  func build() -> TestParsingMergeLiteOptionalGroup {
                                       checkInitialized()
                                       return buildPartial()
                                  }
                                  func buildPartial() -> TestParsingMergeLiteOptionalGroup {
                                    var returnMe:TestParsingMergeLiteOptionalGroup = result
                                    return returnMe
                                  }
                                  func mergeFrom(other:TestParsingMergeLiteOptionalGroup) -> TestParsingMergeLiteOptionalGroupBuilder {
                                    if (other == TestParsingMergeLiteOptionalGroup()) {
                                      return self
                                    }
                                    if (other.hasOptionalGroupAllTypes) {
                                        mergeOptionalGroupAllTypes(other.optionalGroupAllTypes)
                                    }
                                      mergeUnknownFields(other.unknownFields)
                                    return self
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteOptionalGroupBuilder {
                                       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                  }
                                  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteOptionalGroupBuilder {
                                    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                    while (true) {
                                      var tag:Int32 = input.readTag()
                                        if tag == 0 {
                                             self.unknownFields = unknownFieldsBuilder.build()
                                             return self}
                                        else if tag == 90 {
                                          var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                          if hasOptionalGroupAllTypes {
                                            subBuilder.mergeFrom(optionalGroupAllTypes)
                                          }
                                          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                          optionalGroupAllTypes = subBuilder.buildPartial()
                                        }
                                        else {
                                              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                  unknownFields = unknownFieldsBuilder.build()
                                                  return self
                                              }
                                        }
                                        }
                                     }
                                  }

                                  func == (lhs: TestParsingMergeLiteRepeatedGroup, rhs: TestParsingMergeLiteRepeatedGroup) -> Bool {
                                        if (lhs === rhs) {
                                          return true
                                        }
                                        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                                        fieldCheck = fieldCheck && (lhs.hasRepeatedGroupAllTypes == rhs.hasRepeatedGroupAllTypes) && (!lhs.hasRepeatedGroupAllTypes || lhs.repeatedGroupAllTypes == rhs.repeatedGroupAllTypes)
                                         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                                  }
                                  class TestParsingMergeLiteRepeatedGroup : GeneratedMessage {
                                    private(set) var hasRepeatedGroupAllTypes:Bool = false
                                    private(set) var repeatedGroupAllTypes:TestAllTypesLite = TestAllTypesLite()
                                    override init() {
                                         super.init()
                                    }
                                    override func isInitialized() -> Bool {
                                      return true
                                    }
                                    override func writeToCodedOutputStream(output:CodedOutputStream) {
                                      if hasRepeatedGroupAllTypes {
                                        output.writeMessage(21, value:repeatedGroupAllTypes)
                                      }
                                      unknownFields.writeToCodedOutputStream(output)
                                    }
                                    override func serializedSize() -> Int32 {
                                      var size:Int32 = memoizedSerializedSize
                                      if size != -1 {
                                        return size
                                      }

                                      size = 0
                                      if hasRepeatedGroupAllTypes {
                                        size += WireFormat.computeMessageSize(21, value:repeatedGroupAllTypes)
                                      }
                                      size += unknownFields.serializedSize()
                                      memoizedSerializedSize = size
                                      return size
                                    }
                                    class func parseFromData(data:[Byte]) -> TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromData(data).build()
                                    }
                                    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream) -> TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromInputStream(input).build()
                                    }
                                    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream) -> TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromCodedInputStream(input).build()
                                    }
                                    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedGroup {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
                                    }
                                    class func builder() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      return TestParsingMergeLiteRepeatedGroupBuilder()
                                    }
                                    class func builderWithPrototype(prototype:TestParsingMergeLiteRepeatedGroup) -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      return TestParsingMergeLiteRepeatedGroup.builder().mergeFrom(prototype)
                                    }
                                    func builder() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      return TestParsingMergeLiteRepeatedGroup.builder()
                                    }
                                    func toBuilder() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      return TestParsingMergeLiteRepeatedGroup.builderWithPrototype(self)
                                    }
                                    override func writeDescriptionTo(inout output:String, indent:String) {
                                      if hasRepeatedGroupAllTypes {
                                        output += "\(indent) repeatedGroupAllTypes {\n"
                                        repeatedGroupAllTypes.writeDescriptionTo(&output, indent:"\(indent)  ")
                                        output += "\(indent) }\n"
                                      }
                                      unknownFields.writeDescriptionTo(&output, indent:indent)
                                    }
                                    override var hashValue:Int {
                                     get {
                                          var hashCode:Int = 7
                                          if hasRepeatedGroupAllTypes {
                                            hashCode = (hashCode &* 31) &+ repeatedGroupAllTypes.hashValue
                                          }
                                          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                                          return hashCode
                                        }
                                      }
                                    }

                                    class TestParsingMergeLiteRepeatedGroupBuilder : GeneratedMessageBuilder {
                                    private var result:TestParsingMergeLiteRepeatedGroup

                                    override init () {
                                       result = TestParsingMergeLiteRepeatedGroup()
                                    }
                                    var hasRepeatedGroupAllTypes:Bool {
                                         get {
                                             return result.hasRepeatedGroupAllTypes
                                         }
                                    }
                                    var repeatedGroupAllTypes:TestAllTypesLite {
                                         get {
                                             return result.repeatedGroupAllTypes     }
                                         set (value) {
                                             result.hasRepeatedGroupAllTypes = true
                                             result.repeatedGroupAllTypes = value
                                         }
                                    }
                                    func setRepeatedGroupAllTypesBuilder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      repeatedGroupAllTypes = builderForValue.build()
                                      return self
                                    }
                                    func mergeRepeatedGroupAllTypes(value:TestAllTypesLite) -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      if (result.hasRepeatedGroupAllTypes && result.repeatedGroupAllTypes != TestAllTypesLite()) {
                                        result.repeatedGroupAllTypes = TestAllTypesLite.builderWithPrototype(result.repeatedGroupAllTypes).mergeFrom(value).buildPartial()
                                      } else {
                                        result.repeatedGroupAllTypes = value
                                      }
                                      result.hasRepeatedGroupAllTypes = true
                                      return self
                                    }
                                    func clearRepeatedGroupAllTypes() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      result.hasRepeatedGroupAllTypes = false
                                      result.repeatedGroupAllTypes = TestAllTypesLite()
                                      return self
                                    }
                                    override var internalGetResult:GeneratedMessage {
                                         get {
                                            return result
                                         }
                                    }
                                    override func clear() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      result = TestParsingMergeLiteRepeatedGroup()
                                      return self
                                    }
                                    override func clone() -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      return TestParsingMergeLiteRepeatedGroup.builderWithPrototype(result)
                                    }
                                    func build() -> TestParsingMergeLiteRepeatedGroup {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> TestParsingMergeLiteRepeatedGroup {
                                      var returnMe:TestParsingMergeLiteRepeatedGroup = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:TestParsingMergeLiteRepeatedGroup) -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      if (other == TestParsingMergeLiteRepeatedGroup()) {
                                        return self
                                      }
                                      if (other.hasRepeatedGroupAllTypes) {
                                          mergeRepeatedGroupAllTypes(other.repeatedGroupAllTypes)
                                      }
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteRepeatedGroupBuilder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteRepeatedGroupBuilder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 170 {
                                            var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                            if hasRepeatedGroupAllTypes {
                                              subBuilder.mergeFrom(repeatedGroupAllTypes)
                                            }
                                            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                            repeatedGroupAllTypes = subBuilder.buildPartial()
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }

                                    class TestParsingMergeLiteBuilder : ExtendableMessageBuilder {
                                    private var result:TestParsingMergeLite

                                    override init () {
                                       result = TestParsingMergeLite()
                                    }
                                    var hasRequiredAllTypes:Bool {
                                         get {
                                             return result.hasRequiredAllTypes
                                         }
                                    }
                                    var requiredAllTypes:TestAllTypesLite {
                                         get {
                                             return result.requiredAllTypes     }
                                         set (value) {
                                             result.hasRequiredAllTypes = true
                                             result.requiredAllTypes = value
                                         }
                                    }
                                    func setRequiredAllTypesBuilder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteBuilder {
                                      requiredAllTypes = builderForValue.build()
                                      return self
                                    }
                                    func mergeRequiredAllTypes(value:TestAllTypesLite) -> TestParsingMergeLiteBuilder {
                                      if (result.hasRequiredAllTypes && result.requiredAllTypes != TestAllTypesLite()) {
                                        result.requiredAllTypes = TestAllTypesLite.builderWithPrototype(result.requiredAllTypes).mergeFrom(value).buildPartial()
                                      } else {
                                        result.requiredAllTypes = value
                                      }
                                      result.hasRequiredAllTypes = true
                                      return self
                                    }
                                    func clearRequiredAllTypes() -> TestParsingMergeLiteBuilder {
                                      result.hasRequiredAllTypes = false
                                      result.requiredAllTypes = TestAllTypesLite()
                                      return self
                                    }
                                    var hasOptionalAllTypes:Bool {
                                         get {
                                             return result.hasOptionalAllTypes
                                         }
                                    }
                                    var optionalAllTypes:TestAllTypesLite {
                                         get {
                                             return result.optionalAllTypes     }
                                         set (value) {
                                             result.hasOptionalAllTypes = true
                                             result.optionalAllTypes = value
                                         }
                                    }
                                    func setOptionalAllTypesBuilder(builderForValue:TestAllTypesLiteBuilder) -> TestParsingMergeLiteBuilder {
                                      optionalAllTypes = builderForValue.build()
                                      return self
                                    }
                                    func mergeOptionalAllTypes(value:TestAllTypesLite) -> TestParsingMergeLiteBuilder {
                                      if (result.hasOptionalAllTypes && result.optionalAllTypes != TestAllTypesLite()) {
                                        result.optionalAllTypes = TestAllTypesLite.builderWithPrototype(result.optionalAllTypes).mergeFrom(value).buildPartial()
                                      } else {
                                        result.optionalAllTypes = value
                                      }
                                      result.hasOptionalAllTypes = true
                                      return self
                                    }
                                    func clearOptionalAllTypes() -> TestParsingMergeLiteBuilder {
                                      result.hasOptionalAllTypes = false
                                      result.optionalAllTypes = TestAllTypesLite()
                                      return self
                                    }
                                    var repeatedAllTypes:[TestAllTypesLite] {
                                         get {
                                             return result.repeatedAllTypes
                                         }
                                         set (value) {
                                             result.repeatedAllTypes = value
                                         }
                                    }
                                    func clearRepeatedAllTypes() -> TestParsingMergeLiteBuilder {
                                      result.repeatedAllTypes.removeAll(keepCapacity: false)
                                      return self
                                    }
                                    var hasOptionalGroup:Bool {
                                         get {
                                             return result.hasOptionalGroup
                                         }
                                    }
                                    var optionalGroup:TestParsingMergeLiteOptionalGroup {
                                         get {
                                             return result.optionalGroup     }
                                         set (value) {
                                             result.hasOptionalGroup = true
                                             result.optionalGroup = value
                                         }
                                    }
                                    func setOptionalGroupBuilder(builderForValue:TestParsingMergeLiteOptionalGroupBuilder) -> TestParsingMergeLiteBuilder {
                                      optionalGroup = builderForValue.build()
                                      return self
                                    }
                                    func mergeOptionalGroup(value:TestParsingMergeLiteOptionalGroup) -> TestParsingMergeLiteBuilder {
                                      if (result.hasOptionalGroup && result.optionalGroup != TestParsingMergeLiteOptionalGroup()) {
                                        result.optionalGroup = TestParsingMergeLiteOptionalGroup.builderWithPrototype(result.optionalGroup).mergeFrom(value).buildPartial()
                                      } else {
                                        result.optionalGroup = value
                                      }
                                      result.hasOptionalGroup = true
                                      return self
                                    }
                                    func clearOptionalGroup() -> TestParsingMergeLiteBuilder {
                                      result.hasOptionalGroup = false
                                      result.optionalGroup = TestParsingMergeLiteOptionalGroup()
                                      return self
                                    }
                                    var repeatedGroup:[TestParsingMergeLiteRepeatedGroup] {
                                         get {
                                             return result.repeatedGroup
                                         }
                                         set (value) {
                                             result.repeatedGroup = value
                                         }
                                    }
                                    func clearRepeatedGroup() -> TestParsingMergeLiteBuilder {
                                      result.repeatedGroup.removeAll(keepCapacity: false)
                                      return self
                                    }
                                    override var internalGetResult:ExtendableMessage {
                                         get {
                                             return result
                                         }
                                    }
                                    override func clear() -> TestParsingMergeLiteBuilder {
                                      result = TestParsingMergeLite()
                                      return self
                                    }
                                    override func clone() -> TestParsingMergeLiteBuilder {
                                      return TestParsingMergeLite.builderWithPrototype(result)
                                    }
                                    func build() -> TestParsingMergeLite {
                                         checkInitialized()
                                         return buildPartial()
                                    }
                                    func buildPartial() -> TestParsingMergeLite {
                                      var returnMe:TestParsingMergeLite = result
                                      return returnMe
                                    }
                                    func mergeFrom(other:TestParsingMergeLite) -> TestParsingMergeLiteBuilder {
                                      if (other == TestParsingMergeLite()) {
                                        return self
                                      }
                                      if (other.hasRequiredAllTypes) {
                                          mergeRequiredAllTypes(other.requiredAllTypes)
                                      }
                                      if (other.hasOptionalAllTypes) {
                                          mergeOptionalAllTypes(other.optionalAllTypes)
                                      }
                                      if !other.repeatedAllTypes.isEmpty  {
                                         result.repeatedAllTypes += other.repeatedAllTypes
                                      }
                                      if (other.hasOptionalGroup) {
                                          mergeOptionalGroup(other.optionalGroup)
                                      }
                                      if !other.repeatedGroup.isEmpty  {
                                         result.repeatedGroup += other.repeatedGroup
                                      }
                                      mergeExtensionFields(other)
                                        mergeUnknownFields(other.unknownFields)
                                      return self
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestParsingMergeLiteBuilder {
                                         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
                                    }
                                    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestParsingMergeLiteBuilder {
                                      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                                      while (true) {
                                        var tag:Int32 = input.readTag()
                                          if tag == 0 {
                                               self.unknownFields = unknownFieldsBuilder.build()
                                               return self}
                                          else if tag == 10 {
                                            var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                            if hasRequiredAllTypes {
                                              subBuilder.mergeFrom(requiredAllTypes)
                                            }
                                            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                            requiredAllTypes = subBuilder.buildPartial()
                                          }
                                          else if tag == 18 {
                                            var subBuilder:TestAllTypesLiteBuilder = TestAllTypesLite.builder()
                                            if hasOptionalAllTypes {
                                              subBuilder.mergeFrom(optionalAllTypes)
                                            }
                                            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                                            optionalAllTypes = subBuilder.buildPartial()
                                          }
                                          else if tag == 26 {
                                            var subBuilder = TestAllTypesLite.builder()
                                            input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                                            repeatedAllTypes += [subBuilder.buildPartial()]
                                          }
                                          else if tag == 83 {
                                            var subBuilder:TestParsingMergeLiteOptionalGroupBuilder = TestParsingMergeLiteOptionalGroup.builder()
                                            if hasOptionalGroup {
                                              subBuilder.mergeFrom(optionalGroup)
                                            }
                                            input.readGroup(10, builder:subBuilder, extensionRegistry:extensionRegistry)
                                            optionalGroup = subBuilder.buildPartial()
                                          }
                                          else if tag == 163 {
                                            var subBuilder = TestParsingMergeLiteRepeatedGroup.builder()
                                            input.readGroup(20,builder:subBuilder,extensionRegistry:extensionRegistry)
                                            repeatedGroup += [subBuilder.buildPartial()]
                                          }
                                          else {
                                                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                                                    unknownFields = unknownFieldsBuilder.build()
                                                    return self
                                                }
                                          }
                                          }
                                       }
                                    }


                                    // @@protoc_insertion_point(global_scope)
