// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestMsetRoot {
    private var TestMessageSetExtension1_messageSetExtension:ConcreteExtensionField<TestMessageSetExtension1,TestMessageSet>
    private var TestMessageSetExtension2_messageSetExtension:ConcreteExtensionField<TestMessageSetExtension2,TestMessageSet>
    var extensionRegistry:ExtensionRegistry

    init() {
        TestMessageSetExtension1_messageSetExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1545008, defaultValue:TestMessageSetExtension1(), isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
        TestMessageSetExtension2_messageSetExtension = ConcreteExtensionField(type:ExtensionType.ExtensionTypeMessage, fieldNumber:1547769, defaultValue:TestMessageSetExtension2(), isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
      registry.addExtension(TestMessageSetExtension1_messageSetExtension)
      registry.addExtension(TestMessageSetExtension2_messageSetExtension)
    }
    }

func == (lhs: TestMessageSet, rhs: TestMessageSet) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4), endExclusive:Int32(2147483647))
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestMessageSet : ExtendableMessage {
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !extensionsAreInitialized() {
      return false
    }
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4), endExclusive:Int32(2147483647))
    unknownFields.writeAsMessageSetTo(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    size += extensionsSerializedSize()
    size += unknownFields.serializedSizeAsMessageSet()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSet {
    return TestMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestMessageSetBuilder {
    return TestMessageSetBuilder()
  }
  class func builderWithPrototype(prototype:TestMessageSet) -> TestMessageSetBuilder {
    return TestMessageSet.builder().mergeFrom(prototype)
  }
  func builder() -> TestMessageSetBuilder {
    return TestMessageSet.builder()
  }
  func toBuilder() -> TestMessageSetBuilder {
    return TestMessageSet.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    writeExtensionDescription(&output, startInclusive:Int32(4), endExclusive:Int32(2147483647), indent:indent)
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4), endExclusive:Int32(2147483647)))
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class TestMessageSetBuilder : ExtendableMessageBuilder {
  private var result:TestMessageSet

  override init () {
     result = TestMessageSet()
  }
  override var internalGetResult:ExtendableMessage {
       get {
           return result
       }
  }
  override func clear() -> TestMessageSetBuilder {
    result = TestMessageSet()
    return self
  }
  override func clone() -> TestMessageSetBuilder {
    return TestMessageSet.builderWithPrototype(result)
  }
  func build() -> TestMessageSet {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TestMessageSet {
    var returnMe:TestMessageSet = result
    return returnMe
  }
  func mergeFrom(other:TestMessageSet) -> TestMessageSetBuilder {
    if (other == TestMessageSet()) {
      return self
    }
    mergeExtensionFields(other)
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }

  func == (lhs: TestMessageSetContainer, rhs: TestMessageSetContainer) -> Bool {
        if (lhs === rhs) {
          return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMessageSet == rhs.hasMessageSet) && (!lhs.hasMessageSet || lhs.messageSet == rhs.messageSet)
         return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  }
  class TestMessageSetContainer : GeneratedMessage {
    private(set) var hasMessageSet:Bool = false
    private(set) var messageSet:TestMessageSet = TestMessageSet()
    override init() {
         super.init()
    }
    override func isInitialized() -> Bool {
      if hasMessageSet {
        if !messageSet.isInitialized() {
          return false
        }
      }
      return true
    }
    override func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasMessageSet {
        output.writeMessage(1, value:messageSet)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override func serializedSize() -> Int32 {
      var size:Int32 = memoizedSerializedSize
      if size != -1 {
        return size
      }

      size = 0
      if hasMessageSet {
        size += WireFormat.computeMessageSize(1, value:messageSet)
      }
      size += unknownFields.serializedSize()
      memoizedSerializedSize = size
      return size
    }
    class func parseFromData(data:[Byte]) -> TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromData(data).build()
    }
    class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromInputStream(input:NSInputStream) -> TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromInputStream(input).build()
    }
    class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromCodedInputStream(input).build()
    }
    class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetContainer {
      return TestMessageSetContainer.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    class func builder() -> TestMessageSetContainerBuilder {
      return TestMessageSetContainerBuilder()
    }
    class func builderWithPrototype(prototype:TestMessageSetContainer) -> TestMessageSetContainerBuilder {
      return TestMessageSetContainer.builder().mergeFrom(prototype)
    }
    func builder() -> TestMessageSetContainerBuilder {
      return TestMessageSetContainer.builder()
    }
    func toBuilder() -> TestMessageSetContainerBuilder {
      return TestMessageSetContainer.builderWithPrototype(self)
    }
    override func writeDescriptionTo(inout output:String, indent:String) {
      if hasMessageSet {
        output += "\(indent) messageSet {\n"
        messageSet.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override var hashValue:Int {
     get {
          var hashCode:Int = 7
          if hasMessageSet {
            hashCode = (hashCode &* 31) &+ messageSet.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
        }
      }
    }

    class TestMessageSetContainerBuilder : GeneratedMessageBuilder {
    private var result:TestMessageSetContainer

    override init () {
       result = TestMessageSetContainer()
    }
    var hasMessageSet:Bool {
         get {
             return result.hasMessageSet
         }
    }
    var messageSet:TestMessageSet {
         get {
             return result.messageSet     }
         set (value) {
             result.hasMessageSet = true
             result.messageSet = value
         }
    }
    func setMessageSetBuilder(builderForValue:TestMessageSetBuilder) -> TestMessageSetContainerBuilder {
      messageSet = builderForValue.build()
      return self
    }
    func mergeMessageSet(value:TestMessageSet) -> TestMessageSetContainerBuilder {
      if (result.hasMessageSet && result.messageSet != TestMessageSet()) {
        result.messageSet = TestMessageSet.builderWithPrototype(result.messageSet).mergeFrom(value).buildPartial()
      } else {
        result.messageSet = value
      }
      result.hasMessageSet = true
      return self
    }
    func clearMessageSet() -> TestMessageSetContainerBuilder {
      result.hasMessageSet = false
      result.messageSet = TestMessageSet()
      return self
    }
    override var internalGetResult:GeneratedMessage {
         get {
            return result
         }
    }
    override func clear() -> TestMessageSetContainerBuilder {
      result = TestMessageSetContainer()
      return self
    }
    override func clone() -> TestMessageSetContainerBuilder {
      return TestMessageSetContainer.builderWithPrototype(result)
    }
    func build() -> TestMessageSetContainer {
         checkInitialized()
         return buildPartial()
    }
    func buildPartial() -> TestMessageSetContainer {
      var returnMe:TestMessageSetContainer = result
      return returnMe
    }
    func mergeFrom(other:TestMessageSetContainer) -> TestMessageSetContainerBuilder {
      if (other == TestMessageSetContainer()) {
        return self
      }
      if (other.hasMessageSet) {
          mergeMessageSet(other.messageSet)
      }
        mergeUnknownFields(other.unknownFields)
      return self
    }
    override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetContainerBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetContainerBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag:Int32 = input.readTag()
          if tag == 0 {
               self.unknownFields = unknownFieldsBuilder.build()
               return self}
          else if tag == 10 {
            var subBuilder:TestMessageSetBuilder = TestMessageSet.builder()
            if hasMessageSet {
              subBuilder.mergeFrom(messageSet)
            }
            input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            messageSet = subBuilder.buildPartial()
          }
          else {
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                    unknownFields = unknownFieldsBuilder.build()
                    return self
                }
          }
          }
       }
    }

    func == (lhs: TestMessageSetExtension1, rhs: TestMessageSetExtension1) -> Bool {
          if (lhs === rhs) {
            return true
          }
          var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
          fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
           return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
    }
    class TestMessageSetExtension1 : GeneratedMessage {
      private(set) var hasI:Bool = false
      private(set) var i:Int32 = 0

      var messageSetExtension:ExtensionField {
           get {
               return TestMessageSetExtension1_messageSetExtension
           }
      }
      override init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasI {
          output.writeInt32(15, value:i)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
          return size
        }

        size = 0
        if hasI {
          size += WireFormat.computeInt32Size(15, value:i)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1 {
        return TestMessageSetExtension1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> TestMessageSetExtension1Builder {
        return TestMessageSetExtension1Builder()
      }
      class func builderWithPrototype(prototype:TestMessageSetExtension1) -> TestMessageSetExtension1Builder {
        return TestMessageSetExtension1.builder().mergeFrom(prototype)
      }
      func builder() -> TestMessageSetExtension1Builder {
        return TestMessageSetExtension1.builder()
      }
      func toBuilder() -> TestMessageSetExtension1Builder {
        return TestMessageSetExtension1.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        if hasI {
          output += "\(indent) i: \(i) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
       get {
            var hashCode:Int = 7
            if hasI {
               hashCode = (hashCode &* 31) &+ i.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
          }
        }
      }

      class TestMessageSetExtension1Builder : GeneratedMessageBuilder {
      private var result:TestMessageSetExtension1

      override init () {
         result = TestMessageSetExtension1()
      }
      var hasI:Bool {
           get {
                return result.hasI
           }
      }
      var i:Int32 {
           get {
                return result.i
           }
           set (value) {
               result.hasI = true
               result.i = value
           }
      }
      func clearI() -> TestMessageSetExtension1Builder{
           result.hasI = false
           result.i = 0
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return result
           }
      }
      override func clear() -> TestMessageSetExtension1Builder {
        result = TestMessageSetExtension1()
        return self
      }
      override func clone() -> TestMessageSetExtension1Builder {
        return TestMessageSetExtension1.builderWithPrototype(result)
      }
      func build() -> TestMessageSetExtension1 {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> TestMessageSetExtension1 {
        var returnMe:TestMessageSetExtension1 = result
        return returnMe
      }
      func mergeFrom(other:TestMessageSetExtension1) -> TestMessageSetExtension1Builder {
        if (other == TestMessageSetExtension1()) {
          return self
        }
        if other.hasI {
             i = other.i
        }
          mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetExtension1Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1Builder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag:Int32 = input.readTag()
            if tag == 0 {
                 self.unknownFields = unknownFieldsBuilder.build()
                 return self}
            else if tag == 120 {
              i = input.readInt32()
            }
            else {
                  if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                      unknownFields = unknownFieldsBuilder.build()
                      return self
                  }
            }
            }
         }
      }

      func == (lhs: TestMessageSetExtension2, rhs: TestMessageSetExtension2) -> Bool {
            if (lhs === rhs) {
              return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
             return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
      }
      class TestMessageSetExtension2 : GeneratedMessage {
        private(set) var hasStr:Bool = false
        private(set) var str:String = ""

        var messageSetExtension:ExtensionField {
             get {
                 return TestMessageSetExtension2_messageSetExtension
             }
        }
        override init() {
             super.init()
        }
        override func isInitialized() -> Bool {
          return true
        }
        override func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasStr {
            output.writeString(25, value:str)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override func serializedSize() -> Int32 {
          var size:Int32 = memoizedSerializedSize
          if size != -1 {
            return size
          }

          size = 0
          if hasStr {
            size += WireFormat.computeStringSize(25, value:str)
          }
          size += unknownFields.serializedSize()
          memoizedSerializedSize = size
          return size
        }
        class func parseFromData(data:[Byte]) -> TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromData(data).build()
        }
        class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromInputStream(input:NSInputStream) -> TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromInputStream(input).build()
        }
        class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromCodedInputStream(input).build()
        }
        class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2 {
          return TestMessageSetExtension2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        class func builder() -> TestMessageSetExtension2Builder {
          return TestMessageSetExtension2Builder()
        }
        class func builderWithPrototype(prototype:TestMessageSetExtension2) -> TestMessageSetExtension2Builder {
          return TestMessageSetExtension2.builder().mergeFrom(prototype)
        }
        func builder() -> TestMessageSetExtension2Builder {
          return TestMessageSetExtension2.builder()
        }
        func toBuilder() -> TestMessageSetExtension2Builder {
          return TestMessageSetExtension2.builderWithPrototype(self)
        }
        override func writeDescriptionTo(inout output:String, indent:String) {
          if hasStr {
            output += "\(indent) str: \(str) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override var hashValue:Int {
         get {
              var hashCode:Int = 7
              if hasStr {
                 hashCode = (hashCode &* 31) &+ str.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
            }
          }
        }

        class TestMessageSetExtension2Builder : GeneratedMessageBuilder {
        private var result:TestMessageSetExtension2

        override init () {
           result = TestMessageSetExtension2()
        }
        var hasStr:Bool {
             get {
                  return result.hasStr
             }
        }
        var str:String {
             get {
                  return result.str
             }
             set (value) {
                 result.hasStr = true
                 result.str = value
             }
        }
        func clearStr() -> TestMessageSetExtension2Builder{
             result.hasStr = false
             result.str = ""
             return self
        }
        override var internalGetResult:GeneratedMessage {
             get {
                return result
             }
        }
        override func clear() -> TestMessageSetExtension2Builder {
          result = TestMessageSetExtension2()
          return self
        }
        override func clone() -> TestMessageSetExtension2Builder {
          return TestMessageSetExtension2.builderWithPrototype(result)
        }
        func build() -> TestMessageSetExtension2 {
             checkInitialized()
             return buildPartial()
        }
        func buildPartial() -> TestMessageSetExtension2 {
          var returnMe:TestMessageSetExtension2 = result
          return returnMe
        }
        func mergeFrom(other:TestMessageSetExtension2) -> TestMessageSetExtension2Builder {
          if (other == TestMessageSetExtension2()) {
            return self
          }
          if other.hasStr {
               str = other.str
          }
            mergeUnknownFields(other.unknownFields)
          return self
        }
        override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetExtension2Builder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2Builder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag:Int32 = input.readTag()
              if tag == 0 {
                   self.unknownFields = unknownFieldsBuilder.build()
                   return self}
              else if tag == 202 {
                str = input.readString()
              }
              else {
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                        unknownFields = unknownFieldsBuilder.build()
                        return self
                    }
              }
              }
           }
        }

        func == (lhs: RawMessageSet, rhs: RawMessageSet) -> Bool {
              if (lhs === rhs) {
                return true
              }
              var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
              fieldCheck = fieldCheck && (lhs.item == rhs.item)
               return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        }
        class RawMessageSet : GeneratedMessage {
          private(set) var item:[RawMessageSetItem]  = [RawMessageSetItem]()
          override init() {
               super.init()
          }
          override func isInitialized() -> Bool {
            var isInititem:Bool = true
            for element in item {
                if (!element.isInitialized()) {
                    isInititem = false
                    break 
                }
            }
            if !isInititem {
             return isInititem
             }
            return true
          }
          override func writeToCodedOutputStream(output:CodedOutputStream) {
            for element in item {
                output.writeGroup(1, value:element)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
              return size
            }

            size = 0
            for element in item {
                size += WireFormat.computeGroupSize(1, value:element)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          class func parseFromData(data:[Byte]) -> RawMessageSet {
            return RawMessageSet.builder().mergeFromData(data).build()
          }
          class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RawMessageSet {
            return RawMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromInputStream(input:NSInputStream) -> RawMessageSet {
            return RawMessageSet.builder().mergeFromInputStream(input).build()
          }
          class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RawMessageSet {
            return RawMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream) -> RawMessageSet {
            return RawMessageSet.builder().mergeFromCodedInputStream(input).build()
          }
          class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSet {
            return RawMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          class func builder() -> RawMessageSetBuilder {
            return RawMessageSetBuilder()
          }
          class func builderWithPrototype(prototype:RawMessageSet) -> RawMessageSetBuilder {
            return RawMessageSet.builder().mergeFrom(prototype)
          }
          func builder() -> RawMessageSetBuilder {
            return RawMessageSet.builder()
          }
          func toBuilder() -> RawMessageSetBuilder {
            return RawMessageSet.builderWithPrototype(self)
          }
          override func writeDescriptionTo(inout output:String, indent:String) {
            var itemElementIndex:Int = 0
            for element in item {
                output += "\(indent) item[\(itemElementIndex)] {\n"
                element.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                itemElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override var hashValue:Int {
           get {
                var hashCode:Int = 7
                for element in item {
                    hashCode = (hashCode &* 31) &+ element.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
              }
            }
          }

          func == (lhs: RawMessageSetItem, rhs: RawMessageSetItem) -> Bool {
                if (lhs === rhs) {
                  return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasTypeId == rhs.hasTypeId) && (!lhs.hasTypeId || lhs.typeId == rhs.typeId)
                 fieldCheck = fieldCheck && (lhs.hasMessage == rhs.hasMessage) && (!lhs.hasMessage || lhs.message == rhs.message)
                 return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
          }
          class RawMessageSetItem : GeneratedMessage {
            private(set) var hasTypeId:Bool = false
            private(set) var typeId:Int32 = 0

            private(set) var hasMessage:Bool = false
            private(set) var message:[Byte] = [Byte]()

            override init() {
                 super.init()
            }
            override func isInitialized() -> Bool {
              if !hasTypeId {
                return false
              }
              if !hasMessage {
                return false
              }
              return true
            }
            override func writeToCodedOutputStream(output:CodedOutputStream) {
              if hasTypeId {
                output.writeInt32(2, value:typeId)
              }
              if hasMessage {
                output.writeData(3, value:message)
              }
              unknownFields.writeToCodedOutputStream(output)
            }
            override func serializedSize() -> Int32 {
              var size:Int32 = memoizedSerializedSize
              if size != -1 {
                return size
              }

              size = 0
              if hasTypeId {
                size += WireFormat.computeInt32Size(2, value:typeId)
              }
              if hasMessage {
                size += WireFormat.computeDataSize(3, value:message)
              }
              size += unknownFields.serializedSize()
              memoizedSerializedSize = size
              return size
            }
            class func parseFromData(data:[Byte]) -> RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromData(data).build()
            }
            class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromInputStream(input:NSInputStream) -> RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromInputStream(input).build()
            }
            class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream) -> RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromCodedInputStream(input).build()
            }
            class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSetItem {
              return RawMessageSetItem.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
            }
            class func builder() -> RawMessageSetItemBuilder {
              return RawMessageSetItemBuilder()
            }
            class func builderWithPrototype(prototype:RawMessageSetItem) -> RawMessageSetItemBuilder {
              return RawMessageSetItem.builder().mergeFrom(prototype)
            }
            func builder() -> RawMessageSetItemBuilder {
              return RawMessageSetItem.builder()
            }
            func toBuilder() -> RawMessageSetItemBuilder {
              return RawMessageSetItem.builderWithPrototype(self)
            }
            override func writeDescriptionTo(inout output:String, indent:String) {
              if hasTypeId {
                output += "\(indent) typeId: \(typeId) \n"
              }
              if hasMessage {
                output += "\(indent) message: \(message) \n"
              }
              unknownFields.writeDescriptionTo(&output, indent:indent)
            }
            override var hashValue:Int {
             get {
                  var hashCode:Int = 7
                  if hasTypeId {
                     hashCode = (hashCode &* 31) &+ typeId.hashValue
                  }
                  if hasMessage {
                     hashCode = (hashCode &* 31) &+ message.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
                }
              }
            }

            class RawMessageSetItemBuilder : GeneratedMessageBuilder {
            private var result:RawMessageSetItem

            override init () {
               result = RawMessageSetItem()
            }
            var hasTypeId:Bool {
                 get {
                      return result.hasTypeId
                 }
            }
            var typeId:Int32 {
                 get {
                      return result.typeId
                 }
                 set (value) {
                     result.hasTypeId = true
                     result.typeId = value
                 }
            }
            func clearTypeId() -> RawMessageSetItemBuilder{
                 result.hasTypeId = false
                 result.typeId = 0
                 return self
            }
            var hasMessage:Bool {
                 get {
                      return result.hasMessage
                 }
            }
            var message:[Byte] {
                 get {
                      return result.message
                 }
                 set (value) {
                     result.hasMessage = true
                     result.message = value
                 }
            }
            func clearMessage() -> RawMessageSetItemBuilder{
                 result.hasMessage = false
                 result.message = [Byte]()
                 return self
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> RawMessageSetItemBuilder {
              result = RawMessageSetItem()
              return self
            }
            override func clone() -> RawMessageSetItemBuilder {
              return RawMessageSetItem.builderWithPrototype(result)
            }
            func build() -> RawMessageSetItem {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> RawMessageSetItem {
              var returnMe:RawMessageSetItem = result
              return returnMe
            }
            func mergeFrom(other:RawMessageSetItem) -> RawMessageSetItemBuilder {
              if (other == RawMessageSetItem()) {
                return self
              }
              if other.hasTypeId {
                   typeId = other.typeId
              }
              if other.hasMessage {
                   message = other.message
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->RawMessageSetItemBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSetItemBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else if tag == 16 {
                    typeId = input.readInt32()
                  }
                  else if tag == 26 {
                    message = input.readData()
                  }
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }

            class RawMessageSetBuilder : GeneratedMessageBuilder {
            private var result:RawMessageSet

            override init () {
               result = RawMessageSet()
            }
            var item:[RawMessageSetItem] {
                 get {
                     return result.item
                 }
                 set (value) {
                     result.item = value
                 }
            }
            func clearItem() -> RawMessageSetBuilder {
              result.item.removeAll(keepCapacity: false)
              return self
            }
            override var internalGetResult:GeneratedMessage {
                 get {
                    return result
                 }
            }
            override func clear() -> RawMessageSetBuilder {
              result = RawMessageSet()
              return self
            }
            override func clone() -> RawMessageSetBuilder {
              return RawMessageSet.builderWithPrototype(result)
            }
            func build() -> RawMessageSet {
                 checkInitialized()
                 return buildPartial()
            }
            func buildPartial() -> RawMessageSet {
              var returnMe:RawMessageSet = result
              return returnMe
            }
            func mergeFrom(other:RawMessageSet) -> RawMessageSetBuilder {
              if (other == RawMessageSet()) {
                return self
              }
              if !other.item.isEmpty  {
                 result.item += other.item
              }
                mergeUnknownFields(other.unknownFields)
              return self
            }
            override func mergeFromCodedInputStream(input:CodedInputStream) ->RawMessageSetBuilder {
                 return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
            }
            override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSetBuilder {
              var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
              while (true) {
                var tag:Int32 = input.readTag()
                  if tag == 0 {
                       self.unknownFields = unknownFieldsBuilder.build()
                       return self}
                  else if tag == 11 {
                    var subBuilder = RawMessageSetItem.builder()
                    input.readGroup(1,builder:subBuilder,extensionRegistry:extensionRegistry)
                    item += [subBuilder.buildPartial()]
                  }
                  else {
                        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                            unknownFields = unknownFieldsBuilder.build()
                            return self
                        }
                  }
                  }
               }
            }


            // @@protoc_insertion_point(global_scope)
