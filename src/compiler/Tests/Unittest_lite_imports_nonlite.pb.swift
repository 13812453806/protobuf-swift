// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestLiteImportsNonliteRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        UnittestRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

func == (lhs: TestLiteImportsNonlite, rhs: TestLiteImportsNonlite) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasMessage == rhs.hasMessage) && (!lhs.hasMessage || lhs.message == rhs.message)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestLiteImportsNonlite : GeneratedMessage {
  private(set) var hasMessage:Bool = false
  private(set) var message:TestAllTypes = TestAllTypes()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMessage {
      output.writeMessage(1, value:message)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasMessage {
      size += WireFormat.computeMessageSize(1, value:message)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestLiteImportsNonlite {
    return TestLiteImportsNonlite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestLiteImportsNonliteBuilder {
    return TestLiteImportsNonliteBuilder()
  }
  class func builderWithPrototype(prototype:TestLiteImportsNonlite) -> TestLiteImportsNonliteBuilder {
    return TestLiteImportsNonlite.builder().mergeFrom(prototype)
  }
  func builder() -> TestLiteImportsNonliteBuilder {
    return TestLiteImportsNonlite.builder()
  }
  func toBuilder() -> TestLiteImportsNonliteBuilder {
    return TestLiteImportsNonlite.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasMessage {
      output += "\(indent) message {\n"
      message.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasMessage {
          hashCode = (hashCode &* 31) &+ message.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class TestLiteImportsNonliteBuilder : GeneratedMessageBuilder {
  private var result:TestLiteImportsNonlite

  override init () {
     result = TestLiteImportsNonlite()
  }
  var hasMessage:Bool {
       get {
           return result.hasMessage
       }
  }
  var message:TestAllTypes {
       get {
           return result.message     }
       set (value) {
           result.hasMessage = true
           result.message = value
       }
  }
  func setMessageBuilder(builderForValue:TestAllTypesBuilder) -> TestLiteImportsNonliteBuilder {
    message = builderForValue.build()
    return self
  }
  func mergeMessage(value:TestAllTypes) -> TestLiteImportsNonliteBuilder {
    if (result.hasMessage && result.message != TestAllTypes()) {
      result.message = TestAllTypes.builderWithPrototype(result.message).mergeFrom(value).buildPartial()
    } else {
      result.message = value
    }
    result.hasMessage = true
    return self
  }
  func clearMessage() -> TestLiteImportsNonliteBuilder {
    result.hasMessage = false
    result.message = TestAllTypes()
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> TestLiteImportsNonliteBuilder {
    result = TestLiteImportsNonlite()
    return self
  }
  override func clone() -> TestLiteImportsNonliteBuilder {
    return TestLiteImportsNonlite.builderWithPrototype(result)
  }
  func build() -> TestLiteImportsNonlite {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TestLiteImportsNonlite {
    var returnMe:TestLiteImportsNonlite = result
    return returnMe
  }
  func mergeFrom(other:TestLiteImportsNonlite) -> TestLiteImportsNonliteBuilder {
    if (other == TestLiteImportsNonlite()) {
      return self
    }
    if (other.hasMessage) {
        mergeMessage(other.message)
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestLiteImportsNonliteBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestLiteImportsNonliteBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 10 {
          var subBuilder:TestAllTypesBuilder = TestAllTypes.builder()
          if hasMessage {
            subBuilder.mergeFrom(message)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          message = subBuilder.buildPartial()
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }


  // @@protoc_insertion_point(global_scope)
