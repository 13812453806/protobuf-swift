// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestEmbedOptimizeForRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
        UnittestOptimizeForRoot.registerAllExtensions(registry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

func == (lhs: TestEmbedOptimizedForSize, rhs: TestEmbedOptimizedForSize) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
       fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class TestEmbedOptimizedForSize : GeneratedMessage {
  private(set) var hasOptionalMessage:Bool = false
  private(set) var optionalMessage:TestOptimizedForSize = TestOptimizedForSize()
  private(set) var repeatedMessage:[TestOptimizedForSize]  = [TestOptimizedForSize]()
  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if hasOptionalMessage {
      if !optionalMessage.isInitialized() {
        return false
      }
    }
    var isInitrepeatedMessage:Bool = true
    for element in repeatedMessage {
        if (!element.isInitialized()) {
            isInitrepeatedMessage = false
            break 
        }
    }
    if !isInitrepeatedMessage {
     return isInitrepeatedMessage
     }
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOptionalMessage {
      output.writeMessage(1, value:optionalMessage)
    }
    for element in repeatedMessage {
        output.writeMessage(2, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasOptionalMessage {
      size += WireFormat.computeMessageSize(1, value:optionalMessage)
    }
    for element in repeatedMessage {
        size += WireFormat.computeMessageSize(2, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSizeBuilder()
  }
  class func builderWithPrototype(prototype:TestEmbedOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builder().mergeFrom(prototype)
  }
  func builder() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builder()
  }
  func toBuilder() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasOptionalMessage {
      output += "\(indent) optionalMessage {\n"
      optionalMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    var repeatedMessageElementIndex:Int = 0
    for element in repeatedMessage {
        output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedMessageElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasOptionalMessage {
          hashCode = (hashCode &* 31) &+ optionalMessage.hashValue
        }
        for element in repeatedMessage {
            hashCode = (hashCode &* 31) &+ element.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class TestEmbedOptimizedForSizeBuilder : GeneratedMessageBuilder {
  private var result:TestEmbedOptimizedForSize

  override init () {
     result = TestEmbedOptimizedForSize()
  }
  var hasOptionalMessage:Bool {
       get {
           return result.hasOptionalMessage
       }
  }
  var optionalMessage:TestOptimizedForSize {
       get {
           return result.optionalMessage     }
       set (value) {
           result.hasOptionalMessage = true
           result.optionalMessage = value
       }
  }
  func setOptionalMessageBuilder(builderForValue:TestOptimizedForSizeBuilder) -> TestEmbedOptimizedForSizeBuilder {
    optionalMessage = builderForValue.build()
    return self
  }
  func mergeOptionalMessage(value:TestOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    if (result.hasOptionalMessage && result.optionalMessage != TestOptimizedForSize()) {
      result.optionalMessage = TestOptimizedForSize.builderWithPrototype(result.optionalMessage).mergeFrom(value).buildPartial()
    } else {
      result.optionalMessage = value
    }
    result.hasOptionalMessage = true
    return self
  }
  func clearOptionalMessage() -> TestEmbedOptimizedForSizeBuilder {
    result.hasOptionalMessage = false
    result.optionalMessage = TestOptimizedForSize()
    return self
  }
  var repeatedMessage:[TestOptimizedForSize] {
       get {
           return result.repeatedMessage
       }
       set (value) {
           result.repeatedMessage = value
       }
  }
  func clearRepeatedMessage() -> TestEmbedOptimizedForSizeBuilder {
    result.repeatedMessage.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> TestEmbedOptimizedForSizeBuilder {
    result = TestEmbedOptimizedForSize()
    return self
  }
  override func clone() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builderWithPrototype(result)
  }
  func build() -> TestEmbedOptimizedForSize {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TestEmbedOptimizedForSize {
    var returnMe:TestEmbedOptimizedForSize = result
    return returnMe
  }
  func mergeFrom(other:TestEmbedOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    if (other == TestEmbedOptimizedForSize()) {
      return self
    }
    if (other.hasOptionalMessage) {
        mergeOptionalMessage(other.optionalMessage)
    }
    if !other.repeatedMessage.isEmpty  {
       result.repeatedMessage += other.repeatedMessage
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestEmbedOptimizedForSizeBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSizeBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 10 {
          var subBuilder:TestOptimizedForSizeBuilder = TestOptimizedForSize.builder()
          if hasOptionalMessage {
            subBuilder.mergeFrom(optionalMessage)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          optionalMessage = subBuilder.buildPartial()
        }
        else if tag == 18 {
          var subBuilder = TestOptimizedForSize.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          repeatedMessage += [subBuilder.buildPartial()]
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }


  // @@protoc_insertion_point(global_scope)
