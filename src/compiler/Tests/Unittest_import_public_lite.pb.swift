// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

private class UnittestImportPublicLiteRoot {
    var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(extensionRegistry)
      }
    func registerAllExtensions(registry:ExtensionRegistry) {
    }
    }

func == (lhs: PublicImportMessageLite, rhs: PublicImportMessageLite) -> Bool {
      if (lhs === rhs) {
        return true
      }
      var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
      fieldCheck = fieldCheck && (lhs.hasE == rhs.hasE) && (!lhs.hasE || lhs.e == rhs.e)
       return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}
class PublicImportMessageLite : GeneratedMessage {
  private(set) var hasE:Bool = false
  private(set) var e:Int32 = 0

  override init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasE {
      output.writeInt32(1, value:e)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
      return size
    }

    size = 0
    if hasE {
      size += WireFormat.computeInt32Size(1, value:e)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PublicImportMessageLite {
    return PublicImportMessageLite.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> PublicImportMessageLiteBuilder {
    return PublicImportMessageLiteBuilder()
  }
  class func builderWithPrototype(prototype:PublicImportMessageLite) -> PublicImportMessageLiteBuilder {
    return PublicImportMessageLite.builder().mergeFrom(prototype)
  }
  func builder() -> PublicImportMessageLiteBuilder {
    return PublicImportMessageLite.builder()
  }
  func toBuilder() -> PublicImportMessageLiteBuilder {
    return PublicImportMessageLite.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasE {
      output += "\(indent) e: \(e) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
   get {
        var hashCode:Int = 7
        if hasE {
           hashCode = (hashCode &* 31) &+ e.hashValue
        }
        hashCode = (hashCode &* 31) &+  unknownFields.hashValue
        return hashCode
      }
    }
  }

  class PublicImportMessageLiteBuilder : GeneratedMessageBuilder {
  private var result:PublicImportMessageLite

  override init () {
     result = PublicImportMessageLite()
  }
  var hasE:Bool {
       get {
            return result.hasE
       }
  }
  var e:Int32 {
       get {
            return result.e
       }
       set (value) {
           result.hasE = true
           result.e = value
       }
  }
  func clearE() -> PublicImportMessageLiteBuilder{
       result.hasE = false
       result.e = 0
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return result
       }
  }
  override func clear() -> PublicImportMessageLiteBuilder {
    result = PublicImportMessageLite()
    return self
  }
  override func clone() -> PublicImportMessageLiteBuilder {
    return PublicImportMessageLite.builderWithPrototype(result)
  }
  func build() -> PublicImportMessageLite {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> PublicImportMessageLite {
    var returnMe:PublicImportMessageLite = result
    return returnMe
  }
  func mergeFrom(other:PublicImportMessageLite) -> PublicImportMessageLiteBuilder {
    if (other == PublicImportMessageLite()) {
      return self
    }
    if other.hasE {
         e = other.e
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->PublicImportMessageLiteBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PublicImportMessageLiteBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag:Int32 = input.readTag()
        if tag == 0 {
             self.unknownFields = unknownFieldsBuilder.build()
             return self}
        else if tag == 8 {
          e = input.readInt32()
        }
        else {
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                  unknownFields = unknownFieldsBuilder.build()
                  return self
              }
        }
        }
     }
  }


  // @@protoc_insertion_point(global_scope)
