// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file performance.proto

import Foundation
import ProtocolBuffers


public func == (lhs: PBUser, rhs: PBUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasGroup == rhs.hasGroup) && (!lhs.hasGroup || lhs.group == rhs.group)
  fieldCheck = fieldCheck && (lhs.hasGroupName == rhs.hasGroupName) && (!lhs.hasGroupName || lhs.groupName == rhs.groupName)
  fieldCheck = fieldCheck && (lhs.hasGroupLastName == rhs.hasGroupLastName) && (!lhs.hasGroupLastName || lhs.groupLastName == rhs.groupLastName)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBGroup, rhs: PBGroup) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOwner == rhs.hasOwner) && (!lhs.hasOwner || lhs.owner == rhs.owner)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBPerfomanceBatch, rhs: PBPerfomanceBatch) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.batch == rhs.batch)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBPerfomance, rhs: PBPerfomance) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInts == rhs.hasInts) && (!lhs.hasInts || lhs.ints == rhs.ints)
  fieldCheck = fieldCheck && (lhs.hasInts64 == rhs.hasInts64) && (!lhs.hasInts64 || lhs.ints64 == rhs.ints64)
  fieldCheck = fieldCheck && (lhs.hasDoubles == rhs.hasDoubles) && (!lhs.hasDoubles || lhs.doubles == rhs.doubles)
  fieldCheck = fieldCheck && (lhs.hasFloats == rhs.hasFloats) && (!lhs.hasFloats || lhs.floats == rhs.floats)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  fieldCheck = fieldCheck && (lhs.hasBytes == rhs.hasBytes) && (!lhs.hasBytes || lhs.bytes == rhs.bytes)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBFoo, rhs: PBFoo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVal == rhs.hasVal) && (!lhs.hasVal || lhs.val == rhs.val)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBBar, rhs: PBBar) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBBaz, rhs: PBBaz) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBIceCreamCone, rhs: PBIceCreamCone) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasScoops == rhs.hasScoops) && (!lhs.hasScoops || lhs.scoops == rhs.scoops)
  fieldCheck = fieldCheck && (lhs.hasFlavor == rhs.hasFlavor) && (!lhs.hasFlavor || lhs.flavor == rhs.flavor)
  fieldCheck = fieldCheck && (lhs.hasMapper == rhs.hasMapper) && (!lhs.hasMapper || lhs.mapper == rhs.mapper)
  fieldCheck = fieldCheck && (lhs.points == rhs.points)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBIceCreamCone.PBMapperEntry, rhs: PBIceCreamCone.PBMapperEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: PBProtoPoint, rhs: PBProtoPoint) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public struct PerformanceRoot {
  public static var sharedInstance : PerformanceRoot {
   struct Static {
       static let instance : PerformanceRoot = PerformanceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class PBUser : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasGroup:Bool = false
  public private(set) var group:PBGroup!
  public private(set) var hasGroupName:Bool = false
  public private(set) var groupName:String = ""

  public private(set) var hasGroupLastName:Bool = false
  public private(set) var groupLastName:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasGroup {
      output.writeMessage(1, value:group)
    }
    if hasGroupName {
      output.writeString(2, value:groupName)
    }
    if hasGroupLastName {
      output.writeString(3, value:groupLastName)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasGroup {
        if let varSizegroup = group?.computeMessageSize(1) {
            serialize_size += varSizegroup
        }
    }
    if hasGroupName {
      serialize_size += groupName.computeStringSize(2)
    }
    if hasGroupLastName {
      serialize_size += groupLastName.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBUser {
    return PBUser.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBUser {
    return PBUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBUser {
    return PBUser.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBUser {
    return PBUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBUser {
    return PBUser.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUser {
    return PBUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBUser.Builder {
    return PBUser.classBuilder() as! PBUser.Builder
  }
  public func builder() -> PBUser.Builder {
    return classBuilder() as! PBUser.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBUser.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBUser.builder()
  }
  public func toBuilder() -> PBUser.Builder {
    return PBUser.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBUser) -> PBUser.Builder {
    return PBUser.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasGroup {
      output += "\(indent) group {\n"
      group?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasGroupName {
      output += "\(indent) groupName: \(groupName) \n"
    }
    if hasGroupLastName {
      output += "\(indent) groupLastName: \(groupLastName) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasGroup {
              if let hashValuegroup = group?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuegroup
              }
          }
          if hasGroupName {
             hashCode = (hashCode &* 31) &+ groupName.hashValue
          }
          if hasGroupLastName {
             hashCode = (hashCode &* 31) &+ groupLastName.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBUser"
  }
  override public func className() -> String {
      return "PBUser"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBUser.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBUser = PBUser()
    public func getMessage() -> PBUser {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasGroup:Bool {
         get {
             return builderResult.hasGroup
         }
    }
    public var group:PBGroup! {
         get {
             if groupBuilder_ != nil {
                builderResult.group = groupBuilder_.getMessage()
             }
             return builderResult.group
         }
         set (value) {
             builderResult.hasGroup = true
             builderResult.group = value
         }
    }
    private var groupBuilder_:PBGroup.Builder! {
         didSet {
            builderResult.hasGroup = true
         }
    }
    public func getGroupBuilder() -> PBGroup.Builder {
      if groupBuilder_ == nil {
         groupBuilder_ = PBGroup.Builder()
         builderResult.group = groupBuilder_.getMessage()
         if group != nil {
            groupBuilder_.mergeFrom(group)
         }
      }
      return groupBuilder_
    }
    public func setGroup(value:PBGroup!) -> PBUser.Builder {
      self.group = value
      return self
    }
    public func mergeGroup(value:PBGroup) -> PBUser.Builder {
      if builderResult.hasGroup {
        builderResult.group = PBGroup.builderWithPrototype(builderResult.group).mergeFrom(value).buildPartial()
      } else {
        builderResult.group = value
      }
      builderResult.hasGroup = true
      return self
    }
    public func clearGroup() -> PBUser.Builder {
      groupBuilder_ = nil
      builderResult.hasGroup = false
      builderResult.group = nil
      return self
    }
    public var hasGroupName:Bool {
         get {
              return builderResult.hasGroupName
         }
    }
    public var groupName:String {
         get {
              return builderResult.groupName
         }
         set (value) {
             builderResult.hasGroupName = true
             builderResult.groupName = value
         }
    }
    public func setGroupName(value:String) -> PBUser.Builder {
      self.groupName = value
      return self
    }
    public func clearGroupName() -> PBUser.Builder{
         builderResult.hasGroupName = false
         builderResult.groupName = ""
         return self
    }
    public var hasGroupLastName:Bool {
         get {
              return builderResult.hasGroupLastName
         }
    }
    public var groupLastName:String {
         get {
              return builderResult.groupLastName
         }
         set (value) {
             builderResult.hasGroupLastName = true
             builderResult.groupLastName = value
         }
    }
    public func setGroupLastName(value:String) -> PBUser.Builder {
      self.groupLastName = value
      return self
    }
    public func clearGroupLastName() -> PBUser.Builder{
         builderResult.hasGroupLastName = false
         builderResult.groupLastName = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBUser.Builder {
      builderResult = PBUser()
      return self
    }
    public override func clone() -> PBUser.Builder {
      return PBUser.builderWithPrototype(builderResult)
    }
    public override func build() -> PBUser {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBUser {
      var returnMe:PBUser = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBUser) -> PBUser.Builder {
      if other == PBUser() {
       return self
      }
      if (other.hasGroup) {
          mergeGroup(other.group)
      }
      if other.hasGroupName {
           groupName = other.groupName
      }
      if other.hasGroupLastName {
           groupLastName = other.groupLastName
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBUser.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBUser.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:PBGroup.Builder = PBGroup.builder()
          if hasGroup {
            subBuilder.mergeFrom(group)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          group = subBuilder.buildPartial()

        case 18 :
          groupName = input.readString()

        case 26 :
          groupLastName = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBGroup : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasOwner:Bool = false
  public private(set) var owner:PBUser!
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOwner {
      output.writeMessage(1, value:owner)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasOwner {
        if let varSizeowner = owner?.computeMessageSize(1) {
            serialize_size += varSizeowner
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBGroup {
    return PBGroup.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBGroup {
    return PBGroup.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBGroup {
    return PBGroup.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBGroup {
    return PBGroup.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBGroup {
    return PBGroup.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBGroup {
    return PBGroup.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBGroup.Builder {
    return PBGroup.classBuilder() as! PBGroup.Builder
  }
  public func builder() -> PBGroup.Builder {
    return classBuilder() as! PBGroup.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBGroup.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBGroup.builder()
  }
  public func toBuilder() -> PBGroup.Builder {
    return PBGroup.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBGroup) -> PBGroup.Builder {
    return PBGroup.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasOwner {
      output += "\(indent) owner {\n"
      owner?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOwner {
              if let hashValueowner = owner?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValueowner
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBGroup"
  }
  override public func className() -> String {
      return "PBGroup"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBGroup.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBGroup = PBGroup()
    public func getMessage() -> PBGroup {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasOwner:Bool {
         get {
             return builderResult.hasOwner
         }
    }
    public var owner:PBUser! {
         get {
             if ownerBuilder_ != nil {
                builderResult.owner = ownerBuilder_.getMessage()
             }
             return builderResult.owner
         }
         set (value) {
             builderResult.hasOwner = true
             builderResult.owner = value
         }
    }
    private var ownerBuilder_:PBUser.Builder! {
         didSet {
            builderResult.hasOwner = true
         }
    }
    public func getOwnerBuilder() -> PBUser.Builder {
      if ownerBuilder_ == nil {
         ownerBuilder_ = PBUser.Builder()
         builderResult.owner = ownerBuilder_.getMessage()
         if owner != nil {
            ownerBuilder_.mergeFrom(owner)
         }
      }
      return ownerBuilder_
    }
    public func setOwner(value:PBUser!) -> PBGroup.Builder {
      self.owner = value
      return self
    }
    public func mergeOwner(value:PBUser) -> PBGroup.Builder {
      if builderResult.hasOwner {
        builderResult.owner = PBUser.builderWithPrototype(builderResult.owner).mergeFrom(value).buildPartial()
      } else {
        builderResult.owner = value
      }
      builderResult.hasOwner = true
      return self
    }
    public func clearOwner() -> PBGroup.Builder {
      ownerBuilder_ = nil
      builderResult.hasOwner = false
      builderResult.owner = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBGroup.Builder {
      builderResult = PBGroup()
      return self
    }
    public override func clone() -> PBGroup.Builder {
      return PBGroup.builderWithPrototype(builderResult)
    }
    public override func build() -> PBGroup {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBGroup {
      var returnMe:PBGroup = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBGroup) -> PBGroup.Builder {
      if other == PBGroup() {
       return self
      }
      if (other.hasOwner) {
          mergeOwner(other.owner)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBGroup.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBGroup.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:PBUser.Builder = PBUser.builder()
          if hasOwner {
            subBuilder.mergeFrom(owner)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          owner = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBPerfomanceBatch : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var batch:Array<PBPerfomance>  = Array<PBPerfomance>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementbatch in batch {
        output.writeMessage(1, value:oneElementbatch)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    for oneElementbatch in batch {
        serialize_size += oneElementbatch.computeMessageSize(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch {
    return PBPerfomanceBatch.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBPerfomanceBatch.Builder {
    return PBPerfomanceBatch.classBuilder() as! PBPerfomanceBatch.Builder
  }
  public func builder() -> PBPerfomanceBatch.Builder {
    return classBuilder() as! PBPerfomanceBatch.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBPerfomanceBatch.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBPerfomanceBatch.builder()
  }
  public func toBuilder() -> PBPerfomanceBatch.Builder {
    return PBPerfomanceBatch.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBPerfomanceBatch) -> PBPerfomanceBatch.Builder {
    return PBPerfomanceBatch.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    var batchElementIndex:Int = 0
    for oneElementbatch in batch {
        output += "\(indent) batch[\(batchElementIndex)] {\n"
        oneElementbatch.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        batchElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementbatch in batch {
              hashCode = (hashCode &* 31) &+ oneElementbatch.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBPerfomanceBatch"
  }
  override public func className() -> String {
      return "PBPerfomanceBatch"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBPerfomanceBatch.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBPerfomanceBatch = PBPerfomanceBatch()
    public func getMessage() -> PBPerfomanceBatch {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var batch:Array<PBPerfomance> {
         get {
             return builderResult.batch
         }
         set (value) {
             builderResult.batch = value
         }
    }
    public func setBatch(value:Array<PBPerfomance>) -> PBPerfomanceBatch.Builder {
      self.batch = value
      return self
    }
    public func clearBatch() -> PBPerfomanceBatch.Builder {
      builderResult.batch.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBPerfomanceBatch.Builder {
      builderResult = PBPerfomanceBatch()
      return self
    }
    public override func clone() -> PBPerfomanceBatch.Builder {
      return PBPerfomanceBatch.builderWithPrototype(builderResult)
    }
    public override func build() -> PBPerfomanceBatch {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBPerfomanceBatch {
      var returnMe:PBPerfomanceBatch = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBPerfomanceBatch) -> PBPerfomanceBatch.Builder {
      if other == PBPerfomanceBatch() {
       return self
      }
      if !other.batch.isEmpty  {
         builderResult.batch += other.batch
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBPerfomanceBatch.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomanceBatch.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder = PBPerfomance.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          batch += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBPerfomance : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasInts:Bool = false
  public private(set) var ints:Int32 = Int32(0)

  public private(set) var hasInts64:Bool = false
  public private(set) var ints64:Int64 = Int64(0)

  public private(set) var hasDoubles:Bool = false
  public private(set) var doubles:Double = Double(0)

  public private(set) var hasFloats:Bool = false
  public private(set) var floats:Float = Float(0)

  public private(set) var hasStr:Bool = false
  public private(set) var str:String = ""

  public private(set) var hasBytes:Bool = false
  public private(set) var bytes:NSData = NSData()

  public private(set) var hasDescription:Bool = false
  public private(set) var description_:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasInts {
      output.writeInt32(1, value:ints)
    }
    if hasInts64 {
      output.writeInt64(2, value:ints64)
    }
    if hasDoubles {
      output.writeDouble(3, value:doubles)
    }
    if hasFloats {
      output.writeFloat(4, value:floats)
    }
    if hasStr {
      output.writeString(5, value:str)
    }
    if hasBytes {
      output.writeData(6, value:bytes)
    }
    if hasDescription {
      output.writeString(7, value:description_)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasInts {
      serialize_size += ints.computeInt32Size(1)
    }
    if hasInts64 {
      serialize_size += ints64.computeInt64Size(2)
    }
    if hasDoubles {
      serialize_size += doubles.computeDoubleSize(3)
    }
    if hasFloats {
      serialize_size += floats.computeFloatSize(4)
    }
    if hasStr {
      serialize_size += str.computeStringSize(5)
    }
    if hasBytes {
      serialize_size += bytes.computeDataSize(6)
    }
    if hasDescription {
      serialize_size += description_.computeStringSize(7)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomance {
    return PBPerfomance.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBPerfomance.Builder {
    return PBPerfomance.classBuilder() as! PBPerfomance.Builder
  }
  public func builder() -> PBPerfomance.Builder {
    return classBuilder() as! PBPerfomance.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBPerfomance.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBPerfomance.builder()
  }
  public func toBuilder() -> PBPerfomance.Builder {
    return PBPerfomance.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBPerfomance) -> PBPerfomance.Builder {
    return PBPerfomance.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasInts {
      output += "\(indent) ints: \(ints) \n"
    }
    if hasInts64 {
      output += "\(indent) ints64: \(ints64) \n"
    }
    if hasDoubles {
      output += "\(indent) doubles: \(doubles) \n"
    }
    if hasFloats {
      output += "\(indent) floats: \(floats) \n"
    }
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    if hasBytes {
      output += "\(indent) bytes: \(bytes) \n"
    }
    if hasDescription {
      output += "\(indent) description_: \(description_) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasInts {
             hashCode = (hashCode &* 31) &+ ints.hashValue
          }
          if hasInts64 {
             hashCode = (hashCode &* 31) &+ ints64.hashValue
          }
          if hasDoubles {
             hashCode = (hashCode &* 31) &+ doubles.hashValue
          }
          if hasFloats {
             hashCode = (hashCode &* 31) &+ floats.hashValue
          }
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          if hasBytes {
             hashCode = (hashCode &* 31) &+ bytes.hashValue
          }
          if hasDescription {
             hashCode = (hashCode &* 31) &+ description_.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBPerfomance"
  }
  override public func className() -> String {
      return "PBPerfomance"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBPerfomance.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBPerfomance = PBPerfomance()
    public func getMessage() -> PBPerfomance {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasInts:Bool {
         get {
              return builderResult.hasInts
         }
    }
    public var ints:Int32 {
         get {
              return builderResult.ints
         }
         set (value) {
             builderResult.hasInts = true
             builderResult.ints = value
         }
    }
    public func setInts(value:Int32) -> PBPerfomance.Builder {
      self.ints = value
      return self
    }
    public func clearInts() -> PBPerfomance.Builder{
         builderResult.hasInts = false
         builderResult.ints = Int32(0)
         return self
    }
    public var hasInts64:Bool {
         get {
              return builderResult.hasInts64
         }
    }
    public var ints64:Int64 {
         get {
              return builderResult.ints64
         }
         set (value) {
             builderResult.hasInts64 = true
             builderResult.ints64 = value
         }
    }
    public func setInts64(value:Int64) -> PBPerfomance.Builder {
      self.ints64 = value
      return self
    }
    public func clearInts64() -> PBPerfomance.Builder{
         builderResult.hasInts64 = false
         builderResult.ints64 = Int64(0)
         return self
    }
    public var hasDoubles:Bool {
         get {
              return builderResult.hasDoubles
         }
    }
    public var doubles:Double {
         get {
              return builderResult.doubles
         }
         set (value) {
             builderResult.hasDoubles = true
             builderResult.doubles = value
         }
    }
    public func setDoubles(value:Double) -> PBPerfomance.Builder {
      self.doubles = value
      return self
    }
    public func clearDoubles() -> PBPerfomance.Builder{
         builderResult.hasDoubles = false
         builderResult.doubles = Double(0)
         return self
    }
    public var hasFloats:Bool {
         get {
              return builderResult.hasFloats
         }
    }
    public var floats:Float {
         get {
              return builderResult.floats
         }
         set (value) {
             builderResult.hasFloats = true
             builderResult.floats = value
         }
    }
    public func setFloats(value:Float) -> PBPerfomance.Builder {
      self.floats = value
      return self
    }
    public func clearFloats() -> PBPerfomance.Builder{
         builderResult.hasFloats = false
         builderResult.floats = Float(0)
         return self
    }
    public var hasStr:Bool {
         get {
              return builderResult.hasStr
         }
    }
    public var str:String {
         get {
              return builderResult.str
         }
         set (value) {
             builderResult.hasStr = true
             builderResult.str = value
         }
    }
    public func setStr(value:String) -> PBPerfomance.Builder {
      self.str = value
      return self
    }
    public func clearStr() -> PBPerfomance.Builder{
         builderResult.hasStr = false
         builderResult.str = ""
         return self
    }
    public var hasBytes:Bool {
         get {
              return builderResult.hasBytes
         }
    }
    public var bytes:NSData {
         get {
              return builderResult.bytes
         }
         set (value) {
             builderResult.hasBytes = true
             builderResult.bytes = value
         }
    }
    public func setBytes(value:NSData) -> PBPerfomance.Builder {
      self.bytes = value
      return self
    }
    public func clearBytes() -> PBPerfomance.Builder{
         builderResult.hasBytes = false
         builderResult.bytes = NSData()
         return self
    }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String) -> PBPerfomance.Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> PBPerfomance.Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBPerfomance.Builder {
      builderResult = PBPerfomance()
      return self
    }
    public override func clone() -> PBPerfomance.Builder {
      return PBPerfomance.builderWithPrototype(builderResult)
    }
    public override func build() -> PBPerfomance {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBPerfomance {
      var returnMe:PBPerfomance = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBPerfomance) -> PBPerfomance.Builder {
      if other == PBPerfomance() {
       return self
      }
      if other.hasInts {
           ints = other.ints
      }
      if other.hasInts64 {
           ints64 = other.ints64
      }
      if other.hasDoubles {
           doubles = other.doubles
      }
      if other.hasFloats {
           floats = other.floats
      }
      if other.hasStr {
           str = other.str
      }
      if other.hasBytes {
           bytes = other.bytes
      }
      if other.hasDescription {
           description_ = other.description_
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBPerfomance.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBPerfomance.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          ints = input.readInt32()

        case 16 :
          ints64 = input.readInt64()

        case 25 :
          doubles = input.readDouble()

        case 37 :
          floats = input.readFloat()

        case 42 :
          str = input.readString()

        case 50 :
          bytes = input.readData()

        case 58 :
          description_ = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBFoo : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasVal:Bool = false
  public private(set) var val:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasVal {
      output.writeInt32(1, value:val)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasVal {
      serialize_size += val.computeInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBFoo {
    return PBFoo.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBFoo {
    return PBFoo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBFoo {
    return PBFoo.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBFoo {
    return PBFoo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBFoo {
    return PBFoo.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFoo {
    return PBFoo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBFoo.Builder {
    return PBFoo.classBuilder() as! PBFoo.Builder
  }
  public func builder() -> PBFoo.Builder {
    return classBuilder() as! PBFoo.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBFoo.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBFoo.builder()
  }
  public func toBuilder() -> PBFoo.Builder {
    return PBFoo.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBFoo) -> PBFoo.Builder {
    return PBFoo.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasVal {
      output += "\(indent) val: \(val) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasVal {
             hashCode = (hashCode &* 31) &+ val.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBFoo"
  }
  override public func className() -> String {
      return "PBFoo"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBFoo.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBFoo = PBFoo()
    public func getMessage() -> PBFoo {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasVal:Bool {
         get {
              return builderResult.hasVal
         }
    }
    public var val:Int32 {
         get {
              return builderResult.val
         }
         set (value) {
             builderResult.hasVal = true
             builderResult.val = value
         }
    }
    public func setVal(value:Int32) -> PBFoo.Builder {
      self.val = value
      return self
    }
    public func clearVal() -> PBFoo.Builder{
         builderResult.hasVal = false
         builderResult.val = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBFoo.Builder {
      builderResult = PBFoo()
      return self
    }
    public override func clone() -> PBFoo.Builder {
      return PBFoo.builderWithPrototype(builderResult)
    }
    public override func build() -> PBFoo {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBFoo {
      var returnMe:PBFoo = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBFoo) -> PBFoo.Builder {
      if other == PBFoo() {
       return self
      }
      if other.hasVal {
           val = other.val
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBFoo.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBFoo.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          val = input.readInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBBar : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasFoo:Bool = false
  public private(set) var foo:PBFoo!
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasFoo {
      output.writeMessage(1, value:foo)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasFoo {
        if let varSizefoo = foo?.computeMessageSize(1) {
            serialize_size += varSizefoo
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBBar {
    return PBBar.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBBar {
    return PBBar.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBBar {
    return PBBar.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBBar {
    return PBBar.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBBar {
    return PBBar.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBBar {
    return PBBar.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBBar.Builder {
    return PBBar.classBuilder() as! PBBar.Builder
  }
  public func builder() -> PBBar.Builder {
    return classBuilder() as! PBBar.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBBar.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBBar.builder()
  }
  public func toBuilder() -> PBBar.Builder {
    return PBBar.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBBar) -> PBBar.Builder {
    return PBBar.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasFoo {
      output += "\(indent) foo {\n"
      foo?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFoo {
              if let hashValuefoo = foo?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuefoo
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBBar"
  }
  override public func className() -> String {
      return "PBBar"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBBar.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBBar = PBBar()
    public func getMessage() -> PBBar {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasFoo:Bool {
         get {
             return builderResult.hasFoo
         }
    }
    public var foo:PBFoo! {
         get {
             if fooBuilder_ != nil {
                builderResult.foo = fooBuilder_.getMessage()
             }
             return builderResult.foo
         }
         set (value) {
             builderResult.hasFoo = true
             builderResult.foo = value
         }
    }
    private var fooBuilder_:PBFoo.Builder! {
         didSet {
            builderResult.hasFoo = true
         }
    }
    public func getFooBuilder() -> PBFoo.Builder {
      if fooBuilder_ == nil {
         fooBuilder_ = PBFoo.Builder()
         builderResult.foo = fooBuilder_.getMessage()
         if foo != nil {
            fooBuilder_.mergeFrom(foo)
         }
      }
      return fooBuilder_
    }
    public func setFoo(value:PBFoo!) -> PBBar.Builder {
      self.foo = value
      return self
    }
    public func mergeFoo(value:PBFoo) -> PBBar.Builder {
      if builderResult.hasFoo {
        builderResult.foo = PBFoo.builderWithPrototype(builderResult.foo).mergeFrom(value).buildPartial()
      } else {
        builderResult.foo = value
      }
      builderResult.hasFoo = true
      return self
    }
    public func clearFoo() -> PBBar.Builder {
      fooBuilder_ = nil
      builderResult.hasFoo = false
      builderResult.foo = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBBar.Builder {
      builderResult = PBBar()
      return self
    }
    public override func clone() -> PBBar.Builder {
      return PBBar.builderWithPrototype(builderResult)
    }
    public override func build() -> PBBar {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBBar {
      var returnMe:PBBar = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBBar) -> PBBar.Builder {
      if other == PBBar() {
       return self
      }
      if (other.hasFoo) {
          mergeFoo(other.foo)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBBar.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBBar.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:PBFoo.Builder = PBFoo.builder()
          if hasFoo {
            subBuilder.mergeFrom(foo)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          foo = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBBaz : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasBar:Bool = false
  public private(set) var bar:PBBar!
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasBar {
      output.writeMessage(1, value:bar)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasBar {
        if let varSizebar = bar?.computeMessageSize(1) {
            serialize_size += varSizebar
        }
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBBaz {
    return PBBaz.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBBaz {
    return PBBaz.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBBaz {
    return PBBaz.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBBaz {
    return PBBaz.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBBaz {
    return PBBaz.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBBaz {
    return PBBaz.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBBaz.Builder {
    return PBBaz.classBuilder() as! PBBaz.Builder
  }
  public func builder() -> PBBaz.Builder {
    return classBuilder() as! PBBaz.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBBaz.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBBaz.builder()
  }
  public func toBuilder() -> PBBaz.Builder {
    return PBBaz.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBBaz) -> PBBaz.Builder {
    return PBBaz.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasBar {
      output += "\(indent) bar {\n"
      bar?.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasBar {
              if let hashValuebar = bar?.hashValue {
                  hashCode = (hashCode &* 31) &+ hashValuebar
              }
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBBaz"
  }
  override public func className() -> String {
      return "PBBaz"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBBaz.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBBaz = PBBaz()
    public func getMessage() -> PBBaz {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasBar:Bool {
         get {
             return builderResult.hasBar
         }
    }
    public var bar:PBBar! {
         get {
             if barBuilder_ != nil {
                builderResult.bar = barBuilder_.getMessage()
             }
             return builderResult.bar
         }
         set (value) {
             builderResult.hasBar = true
             builderResult.bar = value
         }
    }
    private var barBuilder_:PBBar.Builder! {
         didSet {
            builderResult.hasBar = true
         }
    }
    public func getBarBuilder() -> PBBar.Builder {
      if barBuilder_ == nil {
         barBuilder_ = PBBar.Builder()
         builderResult.bar = barBuilder_.getMessage()
         if bar != nil {
            barBuilder_.mergeFrom(bar)
         }
      }
      return barBuilder_
    }
    public func setBar(value:PBBar!) -> PBBaz.Builder {
      self.bar = value
      return self
    }
    public func mergeBar(value:PBBar) -> PBBaz.Builder {
      if builderResult.hasBar {
        builderResult.bar = PBBar.builderWithPrototype(builderResult.bar).mergeFrom(value).buildPartial()
      } else {
        builderResult.bar = value
      }
      builderResult.hasBar = true
      return self
    }
    public func clearBar() -> PBBaz.Builder {
      barBuilder_ = nil
      builderResult.hasBar = false
      builderResult.bar = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBBaz.Builder {
      builderResult = PBBaz()
      return self
    }
    public override func clone() -> PBBaz.Builder {
      return PBBaz.builderWithPrototype(builderResult)
    }
    public override func build() -> PBBaz {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBBaz {
      var returnMe:PBBaz = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBBaz) -> PBBaz.Builder {
      if other == PBBaz() {
       return self
      }
      if (other.hasBar) {
          mergeBar(other.bar)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBBaz.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBBaz.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          var subBuilder:PBBar.Builder = PBBar.builder()
          if hasBar {
            subBuilder.mergeFrom(bar)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          bar = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBIceCreamCone : GeneratedMessage, GeneratedMessageProtocol, Hashable {


  //Nested type declaration start

    final public class PBMapperEntry : GeneratedMessage, GeneratedMessageProtocol, Hashable {
      public private(set) var hasKey:Bool = false
      public private(set) var key:Int32 = Int32(0)

      public private(set) var hasValue:Bool = false
      public private(set) var value:PBProtoPoint!
      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasKey {
          output.writeInt32(1, value:key)
        }
        if hasValue {
          output.writeMessage(2, value:value)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasKey {
          serialize_size += key.computeInt32Size(1)
        }
        if hasValue {
            if let varSizevalue = value?.computeMessageSize(2) {
                serialize_size += varSizevalue
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
      }
      public class func parseFromData(data:NSData) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
      }
      public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone.PBMapperEntry {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> PBIceCreamCone.PBMapperEntry.Builder {
        return PBIceCreamCone.PBMapperEntry.classBuilder() as! PBIceCreamCone.PBMapperEntry.Builder
      }
      public func builder() -> PBIceCreamCone.PBMapperEntry.Builder {
        return classBuilder() as! PBIceCreamCone.PBMapperEntry.Builder
      }
      public override class func classBuilder() -> MessageBuilder {
        return PBIceCreamCone.PBMapperEntry.Builder()
      }
      public override func classBuilder() -> MessageBuilder {
        return PBIceCreamCone.PBMapperEntry.builder()
      }
      public func toBuilder() -> PBIceCreamCone.PBMapperEntry.Builder {
        return PBIceCreamCone.PBMapperEntry.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:PBIceCreamCone.PBMapperEntry) -> PBIceCreamCone.PBMapperEntry.Builder {
        return PBIceCreamCone.PBMapperEntry.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        if hasKey {
          output += "\(indent) key: \(key) \n"
        }
        if hasValue {
          output += "\(indent) value {\n"
          value?.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent) }\n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasKey {
                 hashCode = (hashCode &* 31) &+ key.hashValue
              }
              if hasValue {
                  if let hashValuevalue = value?.hashValue {
                      hashCode = (hashCode &* 31) &+ hashValuevalue
                  }
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "PBIceCreamCone.PBMapperEntry"
      }
      override public func className() -> String {
          return "PBIceCreamCone.PBMapperEntry"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return PBIceCreamCone.PBMapperEntry.self
      }
      //Meta information declaration end

      final public class Builder : GeneratedMessageBuilder {
        private var builderResult:PBIceCreamCone.PBMapperEntry = PBIceCreamCone.PBMapperEntry()
        public func getMessage() -> PBIceCreamCone.PBMapperEntry {
            return builderResult
        }

        required override public init () {
           super.init()
        }
        public var hasKey:Bool {
             get {
                  return builderResult.hasKey
             }
        }
        public var key:Int32 {
             get {
                  return builderResult.key
             }
             set (value) {
                 builderResult.hasKey = true
                 builderResult.key = value
             }
        }
        public func setKey(value:Int32) -> PBIceCreamCone.PBMapperEntry.Builder {
          self.key = value
          return self
        }
        public func clearKey() -> PBIceCreamCone.PBMapperEntry.Builder{
             builderResult.hasKey = false
             builderResult.key = Int32(0)
             return self
        }
        public var hasValue:Bool {
             get {
                 return builderResult.hasValue
             }
        }
        public var value:PBProtoPoint! {
             get {
                 if valueBuilder_ != nil {
                    builderResult.value = valueBuilder_.getMessage()
                 }
                 return builderResult.value
             }
             set (value) {
                 builderResult.hasValue = true
                 builderResult.value = value
             }
        }
        private var valueBuilder_:PBProtoPoint.Builder! {
             didSet {
                builderResult.hasValue = true
             }
        }
        public func getValueBuilder() -> PBProtoPoint.Builder {
          if valueBuilder_ == nil {
             valueBuilder_ = PBProtoPoint.Builder()
             builderResult.value = valueBuilder_.getMessage()
             if value != nil {
                valueBuilder_.mergeFrom(value)
             }
          }
          return valueBuilder_
        }
        public func setValue(value:PBProtoPoint!) -> PBIceCreamCone.PBMapperEntry.Builder {
          self.value = value
          return self
        }
        public func mergeValue(value:PBProtoPoint) -> PBIceCreamCone.PBMapperEntry.Builder {
          if builderResult.hasValue {
            builderResult.value = PBProtoPoint.builderWithPrototype(builderResult.value).mergeFrom(value).buildPartial()
          } else {
            builderResult.value = value
          }
          builderResult.hasValue = true
          return self
        }
        public func clearValue() -> PBIceCreamCone.PBMapperEntry.Builder {
          valueBuilder_ = nil
          builderResult.hasValue = false
          builderResult.value = nil
          return self
        }
        override public var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        public override func clear() -> PBIceCreamCone.PBMapperEntry.Builder {
          builderResult = PBIceCreamCone.PBMapperEntry()
          return self
        }
        public override func clone() -> PBIceCreamCone.PBMapperEntry.Builder {
          return PBIceCreamCone.PBMapperEntry.builderWithPrototype(builderResult)
        }
        public override func build() -> PBIceCreamCone.PBMapperEntry {
             checkInitialized()
             return buildPartial()
        }
        public func buildPartial() -> PBIceCreamCone.PBMapperEntry {
          var returnMe:PBIceCreamCone.PBMapperEntry = builderResult
          return returnMe
        }
        public func mergeFrom(other:PBIceCreamCone.PBMapperEntry) -> PBIceCreamCone.PBMapperEntry.Builder {
          if other == PBIceCreamCone.PBMapperEntry() {
           return self
          }
          if other.hasKey {
               key = other.key
          }
          if (other.hasValue) {
              mergeValue(other.value)
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBIceCreamCone.PBMapperEntry.Builder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone.PBMapperEntry.Builder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              key = input.readInt32()

            case 18 :
              var subBuilder:PBProtoPoint.Builder = PBProtoPoint.builder()
              if hasValue {
                subBuilder.mergeFrom(value)
              }
              input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
              value = subBuilder.buildPartial()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    }

  //Nested type declaration end



    //Enum type declaration start 

    public enum PBFlavor:Int32 {
      case Chocolate = 0
      case Vanilla = 1

    }

    //Enum type declaration end 

  public private(set) var hasScoops:Bool = false
  public private(set) var scoops:Int32 = Int32(0)

  public private(set) var flavor:PBIceCreamCone.PBFlavor = PBIceCreamCone.PBFlavor.Chocolate
  public private(set) var hasFlavor:Bool = false
  public private(set) var hasMapper:Bool = false
  public private(set) var mapper:Dictionary<Int32,PBProtoPoint> = Dictionary<Int32,PBProtoPoint>()

  public private(set) var points:Array<PBProtoPoint>  = Array<PBProtoPoint>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasScoops {
      output.writeInt32(1, value:scoops)
    }
    if hasFlavor {
      output.writeEnum(2, value:flavor.rawValue)
    }
    if hasMapper {
        for (keyMapper, valueMapper) in mapper {
            var valueOfMapper = PBIceCreamCone.PBMapperEntry.builder().setKey(keyMapper).setValue(valueMapper).build()
            output.writeMessage(3, value:valueOfMapper)
        }
    }
    for oneElementpoints in points {
        output.writeMessage(4, value:oneElementpoints)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasScoops {
      serialize_size += scoops.computeInt32Size(1)
    }
    if (hasFlavor) {
      serialize_size += flavor.rawValue.computeEnumSize(2)
    }
    if hasMapper {
        for (keyMapper, valueMapper) in mapper {
            var valueOfMapper = PBIceCreamCone.PBMapperEntry.builder().setKey(keyMapper).setValue(valueMapper).build()
            serialize_size += valueOfMapper.computeMessageSize(3)
        }
    }
    for oneElementpoints in points {
        serialize_size += oneElementpoints.computeMessageSize(4)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone {
    return PBIceCreamCone.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBIceCreamCone.Builder {
    return PBIceCreamCone.classBuilder() as! PBIceCreamCone.Builder
  }
  public func builder() -> PBIceCreamCone.Builder {
    return classBuilder() as! PBIceCreamCone.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBIceCreamCone.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBIceCreamCone.builder()
  }
  public func toBuilder() -> PBIceCreamCone.Builder {
    return PBIceCreamCone.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBIceCreamCone) -> PBIceCreamCone.Builder {
    return PBIceCreamCone.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasScoops {
      output += "\(indent) scoops: \(scoops) \n"
    }
    if (hasFlavor) {
      output += "\(indent) flavor: \(flavor.rawValue)\n"
    }
    if hasMapper {
      output += "\(indent) mapper: \(mapper) \n"
    }
    var pointsElementIndex:Int = 0
    for oneElementpoints in points {
        output += "\(indent) points[\(pointsElementIndex)] {\n"
        oneElementpoints.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        pointsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasScoops {
             hashCode = (hashCode &* 31) &+ scoops.hashValue
          }
          if hasFlavor {
             hashCode = (hashCode &* 31) &+ Int(flavor.rawValue)
          }
          if hasMapper {
              for (keyMapper, valueMapper) in mapper {
                  hashCode = (hashCode &* 31) &+ keyMapper.hashValue
                  hashCode = (hashCode &* 31) &+ valueMapper.hashValue
              }
          }
          for oneElementpoints in points {
              hashCode = (hashCode &* 31) &+ oneElementpoints.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBIceCreamCone"
  }
  override public func className() -> String {
      return "PBIceCreamCone"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBIceCreamCone.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBIceCreamCone = PBIceCreamCone()
    public func getMessage() -> PBIceCreamCone {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasScoops:Bool {
         get {
              return builderResult.hasScoops
         }
    }
    public var scoops:Int32 {
         get {
              return builderResult.scoops
         }
         set (value) {
             builderResult.hasScoops = true
             builderResult.scoops = value
         }
    }
    public func setScoops(value:Int32) -> PBIceCreamCone.Builder {
      self.scoops = value
      return self
    }
    public func clearScoops() -> PBIceCreamCone.Builder{
         builderResult.hasScoops = false
         builderResult.scoops = Int32(0)
         return self
    }
      public var hasFlavor:Bool{
          get {
              return builderResult.hasFlavor
          }
      }
      public var flavor:PBIceCreamCone.PBFlavor {
          get {
              return builderResult.flavor
          }
          set (value) {
              builderResult.hasFlavor = true
              builderResult.flavor = value
          }
      }
      public func setFlavor(value:PBIceCreamCone.PBFlavor) -> PBIceCreamCone.Builder {
        self.flavor = value
        return self
      }
      public func clearFlavor() -> PBIceCreamCone.Builder {
         builderResult.hasFlavor = false
         builderResult.flavor = .Chocolate
         return self
      }
    public var hasMapper:Bool {
         get {
              return builderResult.hasMapper
         }
    }
    public var mapper:Dictionary<Int32,PBProtoPoint> {
         get {
              return builderResult.mapper
         }
         set (value) {
             builderResult.hasMapper = true
             builderResult.mapper = value
         }
    }
    public func setMapper(value:Dictionary<Int32,PBProtoPoint>) -> PBIceCreamCone.Builder {
      self.mapper = value
      return self
    }
    public func clearMapper() -> PBIceCreamCone.Builder{
         builderResult.hasMapper = false
         builderResult.mapper = Dictionary<Int32,PBProtoPoint>()
         return self
    }
    public var points:Array<PBProtoPoint> {
         get {
             return builderResult.points
         }
         set (value) {
             builderResult.points = value
         }
    }
    public func setPoints(value:Array<PBProtoPoint>) -> PBIceCreamCone.Builder {
      self.points = value
      return self
    }
    public func clearPoints() -> PBIceCreamCone.Builder {
      builderResult.points.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBIceCreamCone.Builder {
      builderResult = PBIceCreamCone()
      return self
    }
    public override func clone() -> PBIceCreamCone.Builder {
      return PBIceCreamCone.builderWithPrototype(builderResult)
    }
    public override func build() -> PBIceCreamCone {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBIceCreamCone {
      var returnMe:PBIceCreamCone = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBIceCreamCone) -> PBIceCreamCone.Builder {
      if other == PBIceCreamCone() {
       return self
      }
      if other.hasScoops {
           scoops = other.scoops
      }
      if other.hasFlavor {
           flavor = other.flavor
      }
      if other.hasMapper {
           mapper = other.mapper
      }
      if !other.points.isEmpty  {
         builderResult.points += other.points
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBIceCreamCone.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBIceCreamCone.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          scoops = input.readInt32()

        case 16 :
          let valueIntflavor = input.readEnum()
          if let enumsflavor = PBIceCreamCone.PBFlavor(rawValue:valueIntflavor){
               flavor = enumsflavor
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntflavor))
          }

        case 26 :
          var subBuilder = PBIceCreamCone.PBMapperEntry.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          let buildOfMapper = subBuilder.buildPartial()
          mapper[buildOfMapper.key] = buildOfMapper.value

        case 34 :
          var subBuilder = PBProtoPoint.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          points += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class PBProtoPoint : GeneratedMessage, GeneratedMessageProtocol, Hashable {
  public private(set) var hasLatitude:Bool = false
  public private(set) var latitude:Float = Float(0)

  public private(set) var hasLongitude:Bool = false
  public private(set) var longitude:Float = Float(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeFloat(1, value:latitude)
    }
    if hasLongitude {
      output.writeFloat(2, value:longitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasLatitude {
      serialize_size += latitude.computeFloatSize(1)
    }
    if hasLongitude {
      serialize_size += longitude.computeFloatSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseFromData(data:NSData) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromData(data, extensionRegistry:PerformanceRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBProtoPoint {
    return PBProtoPoint.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> PBProtoPoint.Builder {
    return PBProtoPoint.classBuilder() as! PBProtoPoint.Builder
  }
  public func builder() -> PBProtoPoint.Builder {
    return classBuilder() as! PBProtoPoint.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return PBProtoPoint.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return PBProtoPoint.builder()
  }
  public func toBuilder() -> PBProtoPoint.Builder {
    return PBProtoPoint.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:PBProtoPoint) -> PBProtoPoint.Builder {
    return PBProtoPoint.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "PBProtoPoint"
  }
  override public func className() -> String {
      return "PBProtoPoint"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return PBProtoPoint.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:PBProtoPoint = PBProtoPoint()
    public func getMessage() -> PBProtoPoint {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasLatitude:Bool {
         get {
              return builderResult.hasLatitude
         }
    }
    public var latitude:Float {
         get {
              return builderResult.latitude
         }
         set (value) {
             builderResult.hasLatitude = true
             builderResult.latitude = value
         }
    }
    public func setLatitude(value:Float) -> PBProtoPoint.Builder {
      self.latitude = value
      return self
    }
    public func clearLatitude() -> PBProtoPoint.Builder{
         builderResult.hasLatitude = false
         builderResult.latitude = Float(0)
         return self
    }
    public var hasLongitude:Bool {
         get {
              return builderResult.hasLongitude
         }
    }
    public var longitude:Float {
         get {
              return builderResult.longitude
         }
         set (value) {
             builderResult.hasLongitude = true
             builderResult.longitude = value
         }
    }
    public func setLongitude(value:Float) -> PBProtoPoint.Builder {
      self.longitude = value
      return self
    }
    public func clearLongitude() -> PBProtoPoint.Builder{
         builderResult.hasLongitude = false
         builderResult.longitude = Float(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> PBProtoPoint.Builder {
      builderResult = PBProtoPoint()
      return self
    }
    public override func clone() -> PBProtoPoint.Builder {
      return PBProtoPoint.builderWithPrototype(builderResult)
    }
    public override func build() -> PBProtoPoint {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> PBProtoPoint {
      var returnMe:PBProtoPoint = builderResult
      return returnMe
    }
    public func mergeFrom(other:PBProtoPoint) -> PBProtoPoint.Builder {
      if other == PBProtoPoint() {
       return self
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) -> PBProtoPoint.Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> PBProtoPoint.Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 13 :
          latitude = input.readFloat()

        case 21 :
          longitude = input.readFloat()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
