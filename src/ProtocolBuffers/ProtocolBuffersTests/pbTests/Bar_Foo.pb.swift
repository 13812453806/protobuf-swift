// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal struct Bar { }

internal func == (lhs: Foo, rhs: Foo) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasHello == rhs.hasHello) && (!lhs.hasHello || lhs.hello == rhs.hello)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Bar {
  internal struct FooRoot {
    internal static var sharedInstance : FooRoot {
     struct Static {
         static let instance : FooRoot = FooRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class Foo : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasHello:Bool = false
    private(set) var hello:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasHello {
        output.writeString(1, value:hello)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasHello {
        serialize_size += hello.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Foo {
      return Foo.builder().mergeFromData(data, extensionRegistry:Bar.FooRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Foo {
      return Foo.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Foo {
      return Foo.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Foo {
      return Foo.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Foo {
      return Foo.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Foo {
      return Foo.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> FooBuilder {
      return Foo.classBuilder() as! FooBuilder
    }
    internal func builder() -> FooBuilder {
      return classBuilder() as! FooBuilder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return FooBuilder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Foo.builder()
    }
    internal func toBuilder() -> FooBuilder {
      return Foo.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Foo) -> FooBuilder {
      return Foo.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasHello {
        output += "\(indent) hello: \(hello) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasHello {
               hashCode = (hashCode &* 31) &+ hello.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Foo"
    }
    override internal func className() -> String {
        return "Foo"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Foo.self
    }
    //Meta information declaration end

  }

  final internal class FooBuilder : GeneratedMessageBuilder {
    private var builderResult:Foo

    required override internal init () {
       builderResult = Foo()
       super.init()
    }
    var hasHello:Bool {
         get {
              return builderResult.hasHello
         }
    }
    var hello:String {
         get {
              return builderResult.hello
         }
         set (value) {
             builderResult.hasHello = true
             builderResult.hello = value
         }
    }
    func setHello(value:String)-> FooBuilder {
      self.hello = value
      return self
    }
    internal func clearHello() -> FooBuilder{
         builderResult.hasHello = false
         builderResult.hello = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> FooBuilder {
      builderResult = Foo()
      return self
    }
    internal override func clone() -> FooBuilder {
      return Foo.builderWithPrototype(builderResult)
    }
    internal override func build() -> Foo {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Foo {
      var returnMe:Foo = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Foo) -> FooBuilder {
      if (other == Foo()) {
       return self
      }
      if other.hasHello {
           hello = other.hello
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->FooBuilder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> FooBuilder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 10 :
          hello = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
